--------------------------------------------------------------------------------
--                      (c) 2017, TCantos Software                            --
--                           aduran@tcantos.com                               --
--------------------------------------------------------------------------------
--  This program is free software: you can redistribute it and/or modify  it  --
--  under the terms of  the GNU General Public  License as published by  the  --
--  Free Software Foundation, either version  3 of the License, or  (at your  --
--  option) any later version.                                                --
--                                                                            --
--  This program  is distributed  in the  hope that  it will  be useful, but  --
--  WITHOUT   ANY   WARRANTY;   without  even   the   implied   warranty  of  --
--  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General  --
--  Public License for more details.                                          --
--                                                                            --
--  You should have received a copy of the GNU General Public License  along  --
--  with this program. If not, see <http://www.gnu.org/licenses/>.            --
--------------------------------------------------------------------------------
-- 1. Identification
--    Filename          :  cryptada-digests-algorithms-whirlpool.adb
--    File kind         :  Ada package body
--    Author            :  A. Duran
--    Creation date     :  March 13th, 2017
--    Current version   :  1.0
--------------------------------------------------------------------------------
-- 2. Purpose:
--    Implements the Whirlpool message digest algorithm.
--------------------------------------------------------------------------------
-- 3. Revision history
--    Ver   When     Who   Why
--    ----- -------- ----- -----------------------------------------------------
--    1.0   20170313 ADD   Initial implementation.
--------------------------------------------------------------------------------

with CryptAda.Names;                   use CryptAda.Names;
with CryptAda.Pragmatics;              use CryptAda.Pragmatics;
with CryptAda.Digests.Counters;        use CryptAda.Digests.Counters;
with CryptAda.Digests.Hashes;          use CryptAda.Digests.Hashes;

package body CryptAda.Digests.Algorithms.Whirlpool is

   -----------------------------------------------------------------------------
   --[Constants]----------------------------------------------------------------
   -----------------------------------------------------------------------------

   --[Bit_Counter_Offset]-------------------------------------------------------
   -- Offset of the bit counter in last block. Whirlpool uses a 256-bit
   -- (32 bytes) bit counter. This implementation uses a 128-bit (16 byte) bit
   -- counter so only the low order 16  bytes of the bit counter are really used
   -- but counter must be appended in the right place in the last block.
   -----------------------------------------------------------------------------

   Bit_Counter_Offset      : constant Positive := 1 + Whirlpool_Block_Bytes - 32;

   --[Whirlpool_Pad]------------------------------------------------------------
   -- Array for padding.
   -----------------------------------------------------------------------------

   Whirlpool_Pad           : constant Whirlpool_Block := (1 => 16#80#, others => 16#00#);

   --[Whirlpool_Block_Words]----------------------------------------------------
   -- Size in words of Whirlpool block.
   -----------------------------------------------------------------------------

   Whirlpool_Block_Words   : constant Positive := Whirlpool_Block_Bytes / Whirlpool_Word_Bytes;

   --[Whirlpool_S_Boxes]--------------------------------------------------------
   -- Whirlpool algorithm S-Boxes.
   -----------------------------------------------------------------------------

   Whirlpool_S_Boxes       : constant array(Positive range 1 .. 8, Byte) of Eight_Bytes :=
      (
         (
            16#18186018C07830D8#, 16#23238C2305AF4626#, 16#C6C63FC67EF991B8#, 16#E8E887E8136FCDFB#, 16#878726874CA113CB#, 16#B8B8DAB8A9626D11#, 16#0101040108050209#, 16#4F4F214F426E9E0D#,
            16#3636D836ADEE6C9B#, 16#A6A6A2A6590451FF#, 16#D2D26FD2DEBDB90C#, 16#F5F5F3F5FB06F70E#, 16#7979F979EF80F296#, 16#6F6FA16F5FCEDE30#, 16#91917E91FCEF3F6D#, 16#52525552AA07A4F8#,
            16#60609D6027FDC047#, 16#BCBCCABC89766535#, 16#9B9B569BACCD2B37#, 16#8E8E028E048C018A#, 16#A3A3B6A371155BD2#, 16#0C0C300C603C186C#, 16#7B7BF17BFF8AF684#, 16#3535D435B5E16A80#,
            16#1D1D741DE8693AF5#, 16#E0E0A7E05347DDB3#, 16#D7D77BD7F6ACB321#, 16#C2C22FC25EED999C#, 16#2E2EB82E6D965C43#, 16#4B4B314B627A9629#, 16#FEFEDFFEA321E15D#, 16#575741578216AED5#,
            16#15155415A8412ABD#, 16#7777C1779FB6EEE8#, 16#3737DC37A5EB6E92#, 16#E5E5B3E57B56D79E#, 16#9F9F469F8CD92313#, 16#F0F0E7F0D317FD23#, 16#4A4A354A6A7F9420#, 16#DADA4FDA9E95A944#,
            16#58587D58FA25B0A2#, 16#C9C903C906CA8FCF#, 16#2929A429558D527C#, 16#0A0A280A5022145A#, 16#B1B1FEB1E14F7F50#, 16#A0A0BAA0691A5DC9#, 16#6B6BB16B7FDAD614#, 16#85852E855CAB17D9#,
            16#BDBDCEBD8173673C#, 16#5D5D695DD234BA8F#, 16#1010401080502090#, 16#F4F4F7F4F303F507#, 16#CBCB0BCB16C08BDD#, 16#3E3EF83EEDC67CD3#, 16#0505140528110A2D#, 16#676781671FE6CE78#,
            16#E4E4B7E47353D597#, 16#27279C2725BB4E02#, 16#4141194132588273#, 16#8B8B168B2C9D0BA7#, 16#A7A7A6A7510153F6#, 16#7D7DE97DCF94FAB2#, 16#95956E95DCFB3749#, 16#D8D847D88E9FAD56#,
            16#FBFBCBFB8B30EB70#, 16#EEEE9FEE2371C1CD#, 16#7C7CED7CC791F8BB#, 16#6666856617E3CC71#, 16#DDDD53DDA68EA77B#, 16#17175C17B84B2EAF#, 16#4747014702468E45#, 16#9E9E429E84DC211A#,
            16#CACA0FCA1EC589D4#, 16#2D2DB42D75995A58#, 16#BFBFC6BF9179632E#, 16#07071C07381B0E3F#, 16#ADAD8EAD012347AC#, 16#5A5A755AEA2FB4B0#, 16#838336836CB51BEF#, 16#3333CC3385FF66B6#,
            16#636391633FF2C65C#, 16#02020802100A0412#, 16#AAAA92AA39384993#, 16#7171D971AFA8E2DE#, 16#C8C807C80ECF8DC6#, 16#19196419C87D32D1#, 16#494939497270923B#, 16#D9D943D9869AAF5F#,
            16#F2F2EFF2C31DF931#, 16#E3E3ABE34B48DBA8#, 16#5B5B715BE22AB6B9#, 16#88881A8834920DBC#, 16#9A9A529AA4C8293E#, 16#262698262DBE4C0B#, 16#3232C8328DFA64BF#, 16#B0B0FAB0E94A7D59#,
            16#E9E983E91B6ACFF2#, 16#0F0F3C0F78331E77#, 16#D5D573D5E6A6B733#, 16#80803A8074BA1DF4#, 16#BEBEC2BE997C6127#, 16#CDCD13CD26DE87EB#, 16#3434D034BDE46889#, 16#48483D487A759032#,
            16#FFFFDBFFAB24E354#, 16#7A7AF57AF78FF48D#, 16#90907A90F4EA3D64#, 16#5F5F615FC23EBE9D#, 16#202080201DA0403D#, 16#6868BD6867D5D00F#, 16#1A1A681AD07234CA#, 16#AEAE82AE192C41B7#,
            16#B4B4EAB4C95E757D#, 16#54544D549A19A8CE#, 16#93937693ECE53B7F#, 16#222288220DAA442F#, 16#64648D6407E9C863#, 16#F1F1E3F1DB12FF2A#, 16#7373D173BFA2E6CC#, 16#12124812905A2482#,
            16#40401D403A5D807A#, 16#0808200840281048#, 16#C3C32BC356E89B95#, 16#ECEC97EC337BC5DF#, 16#DBDB4BDB9690AB4D#, 16#A1A1BEA1611F5FC0#, 16#8D8D0E8D1C830791#, 16#3D3DF43DF5C97AC8#,
            16#97976697CCF1335B#, 16#0000000000000000#, 16#CFCF1BCF36D483F9#, 16#2B2BAC2B4587566E#, 16#7676C57697B3ECE1#, 16#8282328264B019E6#, 16#D6D67FD6FEA9B128#, 16#1B1B6C1BD87736C3#,
            16#B5B5EEB5C15B7774#, 16#AFAF86AF112943BE#, 16#6A6AB56A77DFD41D#, 16#50505D50BA0DA0EA#, 16#45450945124C8A57#, 16#F3F3EBF3CB18FB38#, 16#3030C0309DF060AD#, 16#EFEF9BEF2B74C3C4#,
            16#3F3FFC3FE5C37EDA#, 16#55554955921CAAC7#, 16#A2A2B2A2791059DB#, 16#EAEA8FEA0365C9E9#, 16#656589650FECCA6A#, 16#BABAD2BAB9686903#, 16#2F2FBC2F65935E4A#, 16#C0C027C04EE79D8E#,
            16#DEDE5FDEBE81A160#, 16#1C1C701CE06C38FC#, 16#FDFDD3FDBB2EE746#, 16#4D4D294D52649A1F#, 16#92927292E4E03976#, 16#7575C9758FBCEAFA#, 16#06061806301E0C36#, 16#8A8A128A249809AE#,
            16#B2B2F2B2F940794B#, 16#E6E6BFE66359D185#, 16#0E0E380E70361C7E#, 16#1F1F7C1FF8633EE7#, 16#6262956237F7C455#, 16#D4D477D4EEA3B53A#, 16#A8A89AA829324D81#, 16#96966296C4F43152#,
            16#F9F9C3F99B3AEF62#, 16#C5C533C566F697A3#, 16#2525942535B14A10#, 16#59597959F220B2AB#, 16#84842A8454AE15D0#, 16#7272D572B7A7E4C5#, 16#3939E439D5DD72EC#, 16#4C4C2D4C5A619816#,
            16#5E5E655ECA3BBC94#, 16#7878FD78E785F09F#, 16#3838E038DDD870E5#, 16#8C8C0A8C14860598#, 16#D1D163D1C6B2BF17#, 16#A5A5AEA5410B57E4#, 16#E2E2AFE2434DD9A1#, 16#616199612FF8C24E#,
            16#B3B3F6B3F1457B42#, 16#2121842115A54234#, 16#9C9C4A9C94D62508#, 16#1E1E781EF0663CEE#, 16#4343114322528661#, 16#C7C73BC776FC93B1#, 16#FCFCD7FCB32BE54F#, 16#0404100420140824#,
            16#51515951B208A2E3#, 16#99995E99BCC72F25#, 16#6D6DA96D4FC4DA22#, 16#0D0D340D68391A65#, 16#FAFACFFA8335E979#, 16#DFDF5BDFB684A369#, 16#7E7EE57ED79BFCA9#, 16#242490243DB44819#,
            16#3B3BEC3BC5D776FE#, 16#ABAB96AB313D4B9A#, 16#CECE1FCE3ED181F0#, 16#1111441188552299#, 16#8F8F068F0C890383#, 16#4E4E254E4A6B9C04#, 16#B7B7E6B7D1517366#, 16#EBEB8BEB0B60CBE0#,
            16#3C3CF03CFDCC78C1#, 16#81813E817CBF1FFD#, 16#94946A94D4FE3540#, 16#F7F7FBF7EB0CF31C#, 16#B9B9DEB9A1676F18#, 16#13134C13985F268B#, 16#2C2CB02C7D9C5851#, 16#D3D36BD3D6B8BB05#,
            16#E7E7BBE76B5CD38C#, 16#6E6EA56E57CBDC39#, 16#C4C437C46EF395AA#, 16#03030C03180F061B#, 16#565645568A13ACDC#, 16#44440D441A49885E#, 16#7F7FE17FDF9EFEA0#, 16#A9A99EA921374F88#,
            16#2A2AA82A4D825467#, 16#BBBBD6BBB16D6B0A#, 16#C1C123C146E29F87#, 16#53535153A202A6F1#, 16#DCDC57DCAE8BA572#, 16#0B0B2C0B58271653#, 16#9D9D4E9D9CD32701#, 16#6C6CAD6C47C1D82B#,
            16#3131C43195F562A4#, 16#7474CD7487B9E8F3#, 16#F6F6FFF6E309F115#, 16#464605460A438C4C#, 16#ACAC8AAC092645A5#, 16#89891E893C970FB5#, 16#14145014A04428B4#, 16#E1E1A3E15B42DFBA#,
            16#16165816B04E2CA6#, 16#3A3AE83ACDD274F7#, 16#6969B9696FD0D206#, 16#09092409482D1241#, 16#7070DD70A7ADE0D7#, 16#B6B6E2B6D954716F#, 16#D0D067D0CEB7BD1E#, 16#EDED93ED3B7EC7D6#,
            16#CCCC17CC2EDB85E2#, 16#424215422A578468#, 16#98985A98B4C22D2C#, 16#A4A4AAA4490E55ED#, 16#2828A0285D885075#, 16#5C5C6D5CDA31B886#, 16#F8F8C7F8933FED6B#, 16#8686228644A411C2#
         ),
         (
            16#D818186018C07830#, 16#2623238C2305AF46#, 16#B8C6C63FC67EF991#, 16#FBE8E887E8136FCD#, 16#CB878726874CA113#, 16#11B8B8DAB8A9626D#, 16#0901010401080502#, 16#0D4F4F214F426E9E#,
            16#9B3636D836ADEE6C#, 16#FFA6A6A2A6590451#, 16#0CD2D26FD2DEBDB9#, 16#0EF5F5F3F5FB06F7#, 16#967979F979EF80F2#, 16#306F6FA16F5FCEDE#, 16#6D91917E91FCEF3F#, 16#F852525552AA07A4#,
            16#4760609D6027FDC0#, 16#35BCBCCABC897665#, 16#379B9B569BACCD2B#, 16#8A8E8E028E048C01#, 16#D2A3A3B6A371155B#, 16#6C0C0C300C603C18#, 16#847B7BF17BFF8AF6#, 16#803535D435B5E16A#,
            16#F51D1D741DE8693A#, 16#B3E0E0A7E05347DD#, 16#21D7D77BD7F6ACB3#, 16#9CC2C22FC25EED99#, 16#432E2EB82E6D965C#, 16#294B4B314B627A96#, 16#5DFEFEDFFEA321E1#, 16#D5575741578216AE#,
            16#BD15155415A8412A#, 16#E87777C1779FB6EE#, 16#923737DC37A5EB6E#, 16#9EE5E5B3E57B56D7#, 16#139F9F469F8CD923#, 16#23F0F0E7F0D317FD#, 16#204A4A354A6A7F94#, 16#44DADA4FDA9E95A9#,
            16#A258587D58FA25B0#, 16#CFC9C903C906CA8F#, 16#7C2929A429558D52#, 16#5A0A0A280A502214#, 16#50B1B1FEB1E14F7F#, 16#C9A0A0BAA0691A5D#, 16#146B6BB16B7FDAD6#, 16#D985852E855CAB17#,
            16#3CBDBDCEBD817367#, 16#8F5D5D695DD234BA#, 16#9010104010805020#, 16#07F4F4F7F4F303F5#, 16#DDCBCB0BCB16C08B#, 16#D33E3EF83EEDC67C#, 16#2D0505140528110A#, 16#78676781671FE6CE#,
            16#97E4E4B7E47353D5#, 16#0227279C2725BB4E#, 16#7341411941325882#, 16#A78B8B168B2C9D0B#, 16#F6A7A7A6A7510153#, 16#B27D7DE97DCF94FA#, 16#4995956E95DCFB37#, 16#56D8D847D88E9FAD#,
            16#70FBFBCBFB8B30EB#, 16#CDEEEE9FEE2371C1#, 16#BB7C7CED7CC791F8#, 16#716666856617E3CC#, 16#7BDDDD53DDA68EA7#, 16#AF17175C17B84B2E#, 16#454747014702468E#, 16#1A9E9E429E84DC21#,
            16#D4CACA0FCA1EC589#, 16#582D2DB42D75995A#, 16#2EBFBFC6BF917963#, 16#3F07071C07381B0E#, 16#ACADAD8EAD012347#, 16#B05A5A755AEA2FB4#, 16#EF838336836CB51B#, 16#B63333CC3385FF66#,
            16#5C636391633FF2C6#, 16#1202020802100A04#, 16#93AAAA92AA393849#, 16#DE7171D971AFA8E2#, 16#C6C8C807C80ECF8D#, 16#D119196419C87D32#, 16#3B49493949727092#, 16#5FD9D943D9869AAF#,
            16#31F2F2EFF2C31DF9#, 16#A8E3E3ABE34B48DB#, 16#B95B5B715BE22AB6#, 16#BC88881A8834920D#, 16#3E9A9A529AA4C829#, 16#0B262698262DBE4C#, 16#BF3232C8328DFA64#, 16#59B0B0FAB0E94A7D#,
            16#F2E9E983E91B6ACF#, 16#770F0F3C0F78331E#, 16#33D5D573D5E6A6B7#, 16#F480803A8074BA1D#, 16#27BEBEC2BE997C61#, 16#EBCDCD13CD26DE87#, 16#893434D034BDE468#, 16#3248483D487A7590#,
            16#54FFFFDBFFAB24E3#, 16#8D7A7AF57AF78FF4#, 16#6490907A90F4EA3D#, 16#9D5F5F615FC23EBE#, 16#3D202080201DA040#, 16#0F6868BD6867D5D0#, 16#CA1A1A681AD07234#, 16#B7AEAE82AE192C41#,
            16#7DB4B4EAB4C95E75#, 16#CE54544D549A19A8#, 16#7F93937693ECE53B#, 16#2F222288220DAA44#, 16#6364648D6407E9C8#, 16#2AF1F1E3F1DB12FF#, 16#CC7373D173BFA2E6#, 16#8212124812905A24#,
            16#7A40401D403A5D80#, 16#4808082008402810#, 16#95C3C32BC356E89B#, 16#DFECEC97EC337BC5#, 16#4DDBDB4BDB9690AB#, 16#C0A1A1BEA1611F5F#, 16#918D8D0E8D1C8307#, 16#C83D3DF43DF5C97A#,
            16#5B97976697CCF133#, 16#0000000000000000#, 16#F9CFCF1BCF36D483#, 16#6E2B2BAC2B458756#, 16#E17676C57697B3EC#, 16#E68282328264B019#, 16#28D6D67FD6FEA9B1#, 16#C31B1B6C1BD87736#,
            16#74B5B5EEB5C15B77#, 16#BEAFAF86AF112943#, 16#1D6A6AB56A77DFD4#, 16#EA50505D50BA0DA0#, 16#5745450945124C8A#, 16#38F3F3EBF3CB18FB#, 16#AD3030C0309DF060#, 16#C4EFEF9BEF2B74C3#,
            16#DA3F3FFC3FE5C37E#, 16#C755554955921CAA#, 16#DBA2A2B2A2791059#, 16#E9EAEA8FEA0365C9#, 16#6A656589650FECCA#, 16#03BABAD2BAB96869#, 16#4A2F2FBC2F65935E#, 16#8EC0C027C04EE79D#,
            16#60DEDE5FDEBE81A1#, 16#FC1C1C701CE06C38#, 16#46FDFDD3FDBB2EE7#, 16#1F4D4D294D52649A#, 16#7692927292E4E039#, 16#FA7575C9758FBCEA#, 16#3606061806301E0C#, 16#AE8A8A128A249809#,
            16#4BB2B2F2B2F94079#, 16#85E6E6BFE66359D1#, 16#7E0E0E380E70361C#, 16#E71F1F7C1FF8633E#, 16#556262956237F7C4#, 16#3AD4D477D4EEA3B5#, 16#81A8A89AA829324D#, 16#5296966296C4F431#,
            16#62F9F9C3F99B3AEF#, 16#A3C5C533C566F697#, 16#102525942535B14A#, 16#AB59597959F220B2#, 16#D084842A8454AE15#, 16#C57272D572B7A7E4#, 16#EC3939E439D5DD72#, 16#164C4C2D4C5A6198#,
            16#945E5E655ECA3BBC#, 16#9F7878FD78E785F0#, 16#E53838E038DDD870#, 16#988C8C0A8C148605#, 16#17D1D163D1C6B2BF#, 16#E4A5A5AEA5410B57#, 16#A1E2E2AFE2434DD9#, 16#4E616199612FF8C2#,
            16#42B3B3F6B3F1457B#, 16#342121842115A542#, 16#089C9C4A9C94D625#, 16#EE1E1E781EF0663C#, 16#6143431143225286#, 16#B1C7C73BC776FC93#, 16#4FFCFCD7FCB32BE5#, 16#2404041004201408#,
            16#E351515951B208A2#, 16#2599995E99BCC72F#, 16#226D6DA96D4FC4DA#, 16#650D0D340D68391A#, 16#79FAFACFFA8335E9#, 16#69DFDF5BDFB684A3#, 16#A97E7EE57ED79BFC#, 16#19242490243DB448#,
            16#FE3B3BEC3BC5D776#, 16#9AABAB96AB313D4B#, 16#F0CECE1FCE3ED181#, 16#9911114411885522#, 16#838F8F068F0C8903#, 16#044E4E254E4A6B9C#, 16#66B7B7E6B7D15173#, 16#E0EBEB8BEB0B60CB#,
            16#C13C3CF03CFDCC78#, 16#FD81813E817CBF1F#, 16#4094946A94D4FE35#, 16#1CF7F7FBF7EB0CF3#, 16#18B9B9DEB9A1676F#, 16#8B13134C13985F26#, 16#512C2CB02C7D9C58#, 16#05D3D36BD3D6B8BB#,
            16#8CE7E7BBE76B5CD3#, 16#396E6EA56E57CBDC#, 16#AAC4C437C46EF395#, 16#1B03030C03180F06#, 16#DC565645568A13AC#, 16#5E44440D441A4988#, 16#A07F7FE17FDF9EFE#, 16#88A9A99EA921374F#,
            16#672A2AA82A4D8254#, 16#0ABBBBD6BBB16D6B#, 16#87C1C123C146E29F#, 16#F153535153A202A6#, 16#72DCDC57DCAE8BA5#, 16#530B0B2C0B582716#, 16#019D9D4E9D9CD327#, 16#2B6C6CAD6C47C1D8#,
            16#A43131C43195F562#, 16#F37474CD7487B9E8#, 16#15F6F6FFF6E309F1#, 16#4C464605460A438C#, 16#A5ACAC8AAC092645#, 16#B589891E893C970F#, 16#B414145014A04428#, 16#BAE1E1A3E15B42DF#,
            16#A616165816B04E2C#, 16#F73A3AE83ACDD274#, 16#066969B9696FD0D2#, 16#4109092409482D12#, 16#D77070DD70A7ADE0#, 16#6FB6B6E2B6D95471#, 16#1ED0D067D0CEB7BD#, 16#D6EDED93ED3B7EC7#,
            16#E2CCCC17CC2EDB85#, 16#68424215422A5784#, 16#2C98985A98B4C22D#, 16#EDA4A4AAA4490E55#, 16#752828A0285D8850#, 16#865C5C6D5CDA31B8#, 16#6BF8F8C7F8933FED#, 16#C28686228644A411#
         ),
         (
            16#30D818186018C078#, 16#462623238C2305AF#, 16#91B8C6C63FC67EF9#, 16#CDFBE8E887E8136F#, 16#13CB878726874CA1#, 16#6D11B8B8DAB8A962#, 16#0209010104010805#, 16#9E0D4F4F214F426E#,
            16#6C9B3636D836ADEE#, 16#51FFA6A6A2A65904#, 16#B90CD2D26FD2DEBD#, 16#F70EF5F5F3F5FB06#, 16#F2967979F979EF80#, 16#DE306F6FA16F5FCE#, 16#3F6D91917E91FCEF#, 16#A4F852525552AA07#,
            16#C04760609D6027FD#, 16#6535BCBCCABC8976#, 16#2B379B9B569BACCD#, 16#018A8E8E028E048C#, 16#5BD2A3A3B6A37115#, 16#186C0C0C300C603C#, 16#F6847B7BF17BFF8A#, 16#6A803535D435B5E1#,
            16#3AF51D1D741DE869#, 16#DDB3E0E0A7E05347#, 16#B321D7D77BD7F6AC#, 16#999CC2C22FC25EED#, 16#5C432E2EB82E6D96#, 16#96294B4B314B627A#, 16#E15DFEFEDFFEA321#, 16#AED5575741578216#,
            16#2ABD15155415A841#, 16#EEE87777C1779FB6#, 16#6E923737DC37A5EB#, 16#D79EE5E5B3E57B56#, 16#23139F9F469F8CD9#, 16#FD23F0F0E7F0D317#, 16#94204A4A354A6A7F#, 16#A944DADA4FDA9E95#,
            16#B0A258587D58FA25#, 16#8FCFC9C903C906CA#, 16#527C2929A429558D#, 16#145A0A0A280A5022#, 16#7F50B1B1FEB1E14F#, 16#5DC9A0A0BAA0691A#, 16#D6146B6BB16B7FDA#, 16#17D985852E855CAB#,
            16#673CBDBDCEBD8173#, 16#BA8F5D5D695DD234#, 16#2090101040108050#, 16#F507F4F4F7F4F303#, 16#8BDDCBCB0BCB16C0#, 16#7CD33E3EF83EEDC6#, 16#0A2D050514052811#, 16#CE78676781671FE6#,
            16#D597E4E4B7E47353#, 16#4E0227279C2725BB#, 16#8273414119413258#, 16#0BA78B8B168B2C9D#, 16#53F6A7A7A6A75101#, 16#FAB27D7DE97DCF94#, 16#374995956E95DCFB#, 16#AD56D8D847D88E9F#,
            16#EB70FBFBCBFB8B30#, 16#C1CDEEEE9FEE2371#, 16#F8BB7C7CED7CC791#, 16#CC716666856617E3#, 16#A77BDDDD53DDA68E#, 16#2EAF17175C17B84B#, 16#8E45474701470246#, 16#211A9E9E429E84DC#,
            16#89D4CACA0FCA1EC5#, 16#5A582D2DB42D7599#, 16#632EBFBFC6BF9179#, 16#0E3F07071C07381B#, 16#47ACADAD8EAD0123#, 16#B4B05A5A755AEA2F#, 16#1BEF838336836CB5#, 16#66B63333CC3385FF#,
            16#C65C636391633FF2#, 16#041202020802100A#, 16#4993AAAA92AA3938#, 16#E2DE7171D971AFA8#, 16#8DC6C8C807C80ECF#, 16#32D119196419C87D#, 16#923B494939497270#, 16#AF5FD9D943D9869A#,
            16#F931F2F2EFF2C31D#, 16#DBA8E3E3ABE34B48#, 16#B6B95B5B715BE22A#, 16#0DBC88881A883492#, 16#293E9A9A529AA4C8#, 16#4C0B262698262DBE#, 16#64BF3232C8328DFA#, 16#7D59B0B0FAB0E94A#,
            16#CFF2E9E983E91B6A#, 16#1E770F0F3C0F7833#, 16#B733D5D573D5E6A6#, 16#1DF480803A8074BA#, 16#6127BEBEC2BE997C#, 16#87EBCDCD13CD26DE#, 16#68893434D034BDE4#, 16#903248483D487A75#,
            16#E354FFFFDBFFAB24#, 16#F48D7A7AF57AF78F#, 16#3D6490907A90F4EA#, 16#BE9D5F5F615FC23E#, 16#403D202080201DA0#, 16#D00F6868BD6867D5#, 16#34CA1A1A681AD072#, 16#41B7AEAE82AE192C#,
            16#757DB4B4EAB4C95E#, 16#A8CE54544D549A19#, 16#3B7F93937693ECE5#, 16#442F222288220DAA#, 16#C86364648D6407E9#, 16#FF2AF1F1E3F1DB12#, 16#E6CC7373D173BFA2#, 16#248212124812905A#,
            16#807A40401D403A5D#, 16#1048080820084028#, 16#9B95C3C32BC356E8#, 16#C5DFECEC97EC337B#, 16#AB4DDBDB4BDB9690#, 16#5FC0A1A1BEA1611F#, 16#07918D8D0E8D1C83#, 16#7AC83D3DF43DF5C9#,
            16#335B97976697CCF1#, 16#0000000000000000#, 16#83F9CFCF1BCF36D4#, 16#566E2B2BAC2B4587#, 16#ECE17676C57697B3#, 16#19E68282328264B0#, 16#B128D6D67FD6FEA9#, 16#36C31B1B6C1BD877#,
            16#7774B5B5EEB5C15B#, 16#43BEAFAF86AF1129#, 16#D41D6A6AB56A77DF#, 16#A0EA50505D50BA0D#, 16#8A5745450945124C#, 16#FB38F3F3EBF3CB18#, 16#60AD3030C0309DF0#, 16#C3C4EFEF9BEF2B74#,
            16#7EDA3F3FFC3FE5C3#, 16#AAC755554955921C#, 16#59DBA2A2B2A27910#, 16#C9E9EAEA8FEA0365#, 16#CA6A656589650FEC#, 16#6903BABAD2BAB968#, 16#5E4A2F2FBC2F6593#, 16#9D8EC0C027C04EE7#,
            16#A160DEDE5FDEBE81#, 16#38FC1C1C701CE06C#, 16#E746FDFDD3FDBB2E#, 16#9A1F4D4D294D5264#, 16#397692927292E4E0#, 16#EAFA7575C9758FBC#, 16#0C3606061806301E#, 16#09AE8A8A128A2498#,
            16#794BB2B2F2B2F940#, 16#D185E6E6BFE66359#, 16#1C7E0E0E380E7036#, 16#3EE71F1F7C1FF863#, 16#C4556262956237F7#, 16#B53AD4D477D4EEA3#, 16#4D81A8A89AA82932#, 16#315296966296C4F4#,
            16#EF62F9F9C3F99B3A#, 16#97A3C5C533C566F6#, 16#4A102525942535B1#, 16#B2AB59597959F220#, 16#15D084842A8454AE#, 16#E4C57272D572B7A7#, 16#72EC3939E439D5DD#, 16#98164C4C2D4C5A61#,
            16#BC945E5E655ECA3B#, 16#F09F7878FD78E785#, 16#70E53838E038DDD8#, 16#05988C8C0A8C1486#, 16#BF17D1D163D1C6B2#, 16#57E4A5A5AEA5410B#, 16#D9A1E2E2AFE2434D#, 16#C24E616199612FF8#,
            16#7B42B3B3F6B3F145#, 16#42342121842115A5#, 16#25089C9C4A9C94D6#, 16#3CEE1E1E781EF066#, 16#8661434311432252#, 16#93B1C7C73BC776FC#, 16#E54FFCFCD7FCB32B#, 16#0824040410042014#,
            16#A2E351515951B208#, 16#2F2599995E99BCC7#, 16#DA226D6DA96D4FC4#, 16#1A650D0D340D6839#, 16#E979FAFACFFA8335#, 16#A369DFDF5BDFB684#, 16#FCA97E7EE57ED79B#, 16#4819242490243DB4#,
            16#76FE3B3BEC3BC5D7#, 16#4B9AABAB96AB313D#, 16#81F0CECE1FCE3ED1#, 16#2299111144118855#, 16#03838F8F068F0C89#, 16#9C044E4E254E4A6B#, 16#7366B7B7E6B7D151#, 16#CBE0EBEB8BEB0B60#,
            16#78C13C3CF03CFDCC#, 16#1FFD81813E817CBF#, 16#354094946A94D4FE#, 16#F31CF7F7FBF7EB0C#, 16#6F18B9B9DEB9A167#, 16#268B13134C13985F#, 16#58512C2CB02C7D9C#, 16#BB05D3D36BD3D6B8#,
            16#D38CE7E7BBE76B5C#, 16#DC396E6EA56E57CB#, 16#95AAC4C437C46EF3#, 16#061B03030C03180F#, 16#ACDC565645568A13#, 16#885E44440D441A49#, 16#FEA07F7FE17FDF9E#, 16#4F88A9A99EA92137#,
            16#54672A2AA82A4D82#, 16#6B0ABBBBD6BBB16D#, 16#9F87C1C123C146E2#, 16#A6F153535153A202#, 16#A572DCDC57DCAE8B#, 16#16530B0B2C0B5827#, 16#27019D9D4E9D9CD3#, 16#D82B6C6CAD6C47C1#,
            16#62A43131C43195F5#, 16#E8F37474CD7487B9#, 16#F115F6F6FFF6E309#, 16#8C4C464605460A43#, 16#45A5ACAC8AAC0926#, 16#0FB589891E893C97#, 16#28B414145014A044#, 16#DFBAE1E1A3E15B42#,
            16#2CA616165816B04E#, 16#74F73A3AE83ACDD2#, 16#D2066969B9696FD0#, 16#124109092409482D#, 16#E0D77070DD70A7AD#, 16#716FB6B6E2B6D954#, 16#BD1ED0D067D0CEB7#, 16#C7D6EDED93ED3B7E#,
            16#85E2CCCC17CC2EDB#, 16#8468424215422A57#, 16#2D2C98985A98B4C2#, 16#55EDA4A4AAA4490E#, 16#50752828A0285D88#, 16#B8865C5C6D5CDA31#, 16#ED6BF8F8C7F8933F#, 16#11C28686228644A4#
         ),
         (
            16#7830D818186018C0#, 16#AF462623238C2305#, 16#F991B8C6C63FC67E#, 16#6FCDFBE8E887E813#, 16#A113CB878726874C#, 16#626D11B8B8DAB8A9#, 16#0502090101040108#, 16#6E9E0D4F4F214F42#,
            16#EE6C9B3636D836AD#, 16#0451FFA6A6A2A659#, 16#BDB90CD2D26FD2DE#, 16#06F70EF5F5F3F5FB#, 16#80F2967979F979EF#, 16#CEDE306F6FA16F5F#, 16#EF3F6D91917E91FC#, 16#07A4F852525552AA#,
            16#FDC04760609D6027#, 16#766535BCBCCABC89#, 16#CD2B379B9B569BAC#, 16#8C018A8E8E028E04#, 16#155BD2A3A3B6A371#, 16#3C186C0C0C300C60#, 16#8AF6847B7BF17BFF#, 16#E16A803535D435B5#,
            16#693AF51D1D741DE8#, 16#47DDB3E0E0A7E053#, 16#ACB321D7D77BD7F6#, 16#ED999CC2C22FC25E#, 16#965C432E2EB82E6D#, 16#7A96294B4B314B62#, 16#21E15DFEFEDFFEA3#, 16#16AED55757415782#,
            16#412ABD15155415A8#, 16#B6EEE87777C1779F#, 16#EB6E923737DC37A5#, 16#56D79EE5E5B3E57B#, 16#D923139F9F469F8C#, 16#17FD23F0F0E7F0D3#, 16#7F94204A4A354A6A#, 16#95A944DADA4FDA9E#,
            16#25B0A258587D58FA#, 16#CA8FCFC9C903C906#, 16#8D527C2929A42955#, 16#22145A0A0A280A50#, 16#4F7F50B1B1FEB1E1#, 16#1A5DC9A0A0BAA069#, 16#DAD6146B6BB16B7F#, 16#AB17D985852E855C#,
            16#73673CBDBDCEBD81#, 16#34BA8F5D5D695DD2#, 16#5020901010401080#, 16#03F507F4F4F7F4F3#, 16#C08BDDCBCB0BCB16#, 16#C67CD33E3EF83EED#, 16#110A2D0505140528#, 16#E6CE78676781671F#,
            16#53D597E4E4B7E473#, 16#BB4E0227279C2725#, 16#5882734141194132#, 16#9D0BA78B8B168B2C#, 16#0153F6A7A7A6A751#, 16#94FAB27D7DE97DCF#, 16#FB374995956E95DC#, 16#9FAD56D8D847D88E#,
            16#30EB70FBFBCBFB8B#, 16#71C1CDEEEE9FEE23#, 16#91F8BB7C7CED7CC7#, 16#E3CC716666856617#, 16#8EA77BDDDD53DDA6#, 16#4B2EAF17175C17B8#, 16#468E454747014702#, 16#DC211A9E9E429E84#,
            16#C589D4CACA0FCA1E#, 16#995A582D2DB42D75#, 16#79632EBFBFC6BF91#, 16#1B0E3F07071C0738#, 16#2347ACADAD8EAD01#, 16#2FB4B05A5A755AEA#, 16#B51BEF838336836C#, 16#FF66B63333CC3385#,
            16#F2C65C636391633F#, 16#0A04120202080210#, 16#384993AAAA92AA39#, 16#A8E2DE7171D971AF#, 16#CF8DC6C8C807C80E#, 16#7D32D119196419C8#, 16#70923B4949394972#, 16#9AAF5FD9D943D986#,
            16#1DF931F2F2EFF2C3#, 16#48DBA8E3E3ABE34B#, 16#2AB6B95B5B715BE2#, 16#920DBC88881A8834#, 16#C8293E9A9A529AA4#, 16#BE4C0B262698262D#, 16#FA64BF3232C8328D#, 16#4A7D59B0B0FAB0E9#,
            16#6ACFF2E9E983E91B#, 16#331E770F0F3C0F78#, 16#A6B733D5D573D5E6#, 16#BA1DF480803A8074#, 16#7C6127BEBEC2BE99#, 16#DE87EBCDCD13CD26#, 16#E468893434D034BD#, 16#75903248483D487A#,
            16#24E354FFFFDBFFAB#, 16#8FF48D7A7AF57AF7#, 16#EA3D6490907A90F4#, 16#3EBE9D5F5F615FC2#, 16#A0403D202080201D#, 16#D5D00F6868BD6867#, 16#7234CA1A1A681AD0#, 16#2C41B7AEAE82AE19#,
            16#5E757DB4B4EAB4C9#, 16#19A8CE54544D549A#, 16#E53B7F93937693EC#, 16#AA442F222288220D#, 16#E9C86364648D6407#, 16#12FF2AF1F1E3F1DB#, 16#A2E6CC7373D173BF#, 16#5A24821212481290#,
            16#5D807A40401D403A#, 16#2810480808200840#, 16#E89B95C3C32BC356#, 16#7BC5DFECEC97EC33#, 16#90AB4DDBDB4BDB96#, 16#1F5FC0A1A1BEA161#, 16#8307918D8D0E8D1C#, 16#C97AC83D3DF43DF5#,
            16#F1335B97976697CC#, 16#0000000000000000#, 16#D483F9CFCF1BCF36#, 16#87566E2B2BAC2B45#, 16#B3ECE17676C57697#, 16#B019E68282328264#, 16#A9B128D6D67FD6FE#, 16#7736C31B1B6C1BD8#,
            16#5B7774B5B5EEB5C1#, 16#2943BEAFAF86AF11#, 16#DFD41D6A6AB56A77#, 16#0DA0EA50505D50BA#, 16#4C8A574545094512#, 16#18FB38F3F3EBF3CB#, 16#F060AD3030C0309D#, 16#74C3C4EFEF9BEF2B#,
            16#C37EDA3F3FFC3FE5#, 16#1CAAC75555495592#, 16#1059DBA2A2B2A279#, 16#65C9E9EAEA8FEA03#, 16#ECCA6A656589650F#, 16#686903BABAD2BAB9#, 16#935E4A2F2FBC2F65#, 16#E79D8EC0C027C04E#,
            16#81A160DEDE5FDEBE#, 16#6C38FC1C1C701CE0#, 16#2EE746FDFDD3FDBB#, 16#649A1F4D4D294D52#, 16#E0397692927292E4#, 16#BCEAFA7575C9758F#, 16#1E0C360606180630#, 16#9809AE8A8A128A24#,
            16#40794BB2B2F2B2F9#, 16#59D185E6E6BFE663#, 16#361C7E0E0E380E70#, 16#633EE71F1F7C1FF8#, 16#F7C4556262956237#, 16#A3B53AD4D477D4EE#, 16#324D81A8A89AA829#, 16#F4315296966296C4#,
            16#3AEF62F9F9C3F99B#, 16#F697A3C5C533C566#, 16#B14A102525942535#, 16#20B2AB59597959F2#, 16#AE15D084842A8454#, 16#A7E4C57272D572B7#, 16#DD72EC3939E439D5#, 16#6198164C4C2D4C5A#,
            16#3BBC945E5E655ECA#, 16#85F09F7878FD78E7#, 16#D870E53838E038DD#, 16#8605988C8C0A8C14#, 16#B2BF17D1D163D1C6#, 16#0B57E4A5A5AEA541#, 16#4DD9A1E2E2AFE243#, 16#F8C24E616199612F#,
            16#457B42B3B3F6B3F1#, 16#A542342121842115#, 16#D625089C9C4A9C94#, 16#663CEE1E1E781EF0#, 16#5286614343114322#, 16#FC93B1C7C73BC776#, 16#2BE54FFCFCD7FCB3#, 16#1408240404100420#,
            16#08A2E351515951B2#, 16#C72F2599995E99BC#, 16#C4DA226D6DA96D4F#, 16#391A650D0D340D68#, 16#35E979FAFACFFA83#, 16#84A369DFDF5BDFB6#, 16#9BFCA97E7EE57ED7#, 16#B44819242490243D#,
            16#D776FE3B3BEC3BC5#, 16#3D4B9AABAB96AB31#, 16#D181F0CECE1FCE3E#, 16#5522991111441188#, 16#8903838F8F068F0C#, 16#6B9C044E4E254E4A#, 16#517366B7B7E6B7D1#, 16#60CBE0EBEB8BEB0B#,
            16#CC78C13C3CF03CFD#, 16#BF1FFD81813E817C#, 16#FE354094946A94D4#, 16#0CF31CF7F7FBF7EB#, 16#676F18B9B9DEB9A1#, 16#5F268B13134C1398#, 16#9C58512C2CB02C7D#, 16#B8BB05D3D36BD3D6#,
            16#5CD38CE7E7BBE76B#, 16#CBDC396E6EA56E57#, 16#F395AAC4C437C46E#, 16#0F061B03030C0318#, 16#13ACDC565645568A#, 16#49885E44440D441A#, 16#9EFEA07F7FE17FDF#, 16#374F88A9A99EA921#,
            16#8254672A2AA82A4D#, 16#6D6B0ABBBBD6BBB1#, 16#E29F87C1C123C146#, 16#02A6F153535153A2#, 16#8BA572DCDC57DCAE#, 16#2716530B0B2C0B58#, 16#D327019D9D4E9D9C#, 16#C1D82B6C6CAD6C47#,
            16#F562A43131C43195#, 16#B9E8F37474CD7487#, 16#09F115F6F6FFF6E3#, 16#438C4C464605460A#, 16#2645A5ACAC8AAC09#, 16#970FB589891E893C#, 16#4428B414145014A0#, 16#42DFBAE1E1A3E15B#,
            16#4E2CA616165816B0#, 16#D274F73A3AE83ACD#, 16#D0D2066969B9696F#, 16#2D12410909240948#, 16#ADE0D77070DD70A7#, 16#54716FB6B6E2B6D9#, 16#B7BD1ED0D067D0CE#, 16#7EC7D6EDED93ED3B#,
            16#DB85E2CCCC17CC2E#, 16#578468424215422A#, 16#C22D2C98985A98B4#, 16#0E55EDA4A4AAA449#, 16#8850752828A0285D#, 16#31B8865C5C6D5CDA#, 16#3FED6BF8F8C7F893#, 16#A411C28686228644#
         ),
         (
            16#C07830D818186018#, 16#05AF462623238C23#, 16#7EF991B8C6C63FC6#, 16#136FCDFBE8E887E8#, 16#4CA113CB87872687#, 16#A9626D11B8B8DAB8#, 16#0805020901010401#, 16#426E9E0D4F4F214F#,
            16#ADEE6C9B3636D836#, 16#590451FFA6A6A2A6#, 16#DEBDB90CD2D26FD2#, 16#FB06F70EF5F5F3F5#, 16#EF80F2967979F979#, 16#5FCEDE306F6FA16F#, 16#FCEF3F6D91917E91#, 16#AA07A4F852525552#,
            16#27FDC04760609D60#, 16#89766535BCBCCABC#, 16#ACCD2B379B9B569B#, 16#048C018A8E8E028E#, 16#71155BD2A3A3B6A3#, 16#603C186C0C0C300C#, 16#FF8AF6847B7BF17B#, 16#B5E16A803535D435#,
            16#E8693AF51D1D741D#, 16#5347DDB3E0E0A7E0#, 16#F6ACB321D7D77BD7#, 16#5EED999CC2C22FC2#, 16#6D965C432E2EB82E#, 16#627A96294B4B314B#, 16#A321E15DFEFEDFFE#, 16#8216AED557574157#,
            16#A8412ABD15155415#, 16#9FB6EEE87777C177#, 16#A5EB6E923737DC37#, 16#7B56D79EE5E5B3E5#, 16#8CD923139F9F469F#, 16#D317FD23F0F0E7F0#, 16#6A7F94204A4A354A#, 16#9E95A944DADA4FDA#,
            16#FA25B0A258587D58#, 16#06CA8FCFC9C903C9#, 16#558D527C2929A429#, 16#5022145A0A0A280A#, 16#E14F7F50B1B1FEB1#, 16#691A5DC9A0A0BAA0#, 16#7FDAD6146B6BB16B#, 16#5CAB17D985852E85#,
            16#8173673CBDBDCEBD#, 16#D234BA8F5D5D695D#, 16#8050209010104010#, 16#F303F507F4F4F7F4#, 16#16C08BDDCBCB0BCB#, 16#EDC67CD33E3EF83E#, 16#28110A2D05051405#, 16#1FE6CE7867678167#,
            16#7353D597E4E4B7E4#, 16#25BB4E0227279C27#, 16#3258827341411941#, 16#2C9D0BA78B8B168B#, 16#510153F6A7A7A6A7#, 16#CF94FAB27D7DE97D#, 16#DCFB374995956E95#, 16#8E9FAD56D8D847D8#,
            16#8B30EB70FBFBCBFB#, 16#2371C1CDEEEE9FEE#, 16#C791F8BB7C7CED7C#, 16#17E3CC7166668566#, 16#A68EA77BDDDD53DD#, 16#B84B2EAF17175C17#, 16#02468E4547470147#, 16#84DC211A9E9E429E#,
            16#1EC589D4CACA0FCA#, 16#75995A582D2DB42D#, 16#9179632EBFBFC6BF#, 16#381B0E3F07071C07#, 16#012347ACADAD8EAD#, 16#EA2FB4B05A5A755A#, 16#6CB51BEF83833683#, 16#85FF66B63333CC33#,
            16#3FF2C65C63639163#, 16#100A041202020802#, 16#39384993AAAA92AA#, 16#AFA8E2DE7171D971#, 16#0ECF8DC6C8C807C8#, 16#C87D32D119196419#, 16#7270923B49493949#, 16#869AAF5FD9D943D9#,
            16#C31DF931F2F2EFF2#, 16#4B48DBA8E3E3ABE3#, 16#E22AB6B95B5B715B#, 16#34920DBC88881A88#, 16#A4C8293E9A9A529A#, 16#2DBE4C0B26269826#, 16#8DFA64BF3232C832#, 16#E94A7D59B0B0FAB0#,
            16#1B6ACFF2E9E983E9#, 16#78331E770F0F3C0F#, 16#E6A6B733D5D573D5#, 16#74BA1DF480803A80#, 16#997C6127BEBEC2BE#, 16#26DE87EBCDCD13CD#, 16#BDE468893434D034#, 16#7A75903248483D48#,
            16#AB24E354FFFFDBFF#, 16#F78FF48D7A7AF57A#, 16#F4EA3D6490907A90#, 16#C23EBE9D5F5F615F#, 16#1DA0403D20208020#, 16#67D5D00F6868BD68#, 16#D07234CA1A1A681A#, 16#192C41B7AEAE82AE#,
            16#C95E757DB4B4EAB4#, 16#9A19A8CE54544D54#, 16#ECE53B7F93937693#, 16#0DAA442F22228822#, 16#07E9C86364648D64#, 16#DB12FF2AF1F1E3F1#, 16#BFA2E6CC7373D173#, 16#905A248212124812#,
            16#3A5D807A40401D40#, 16#4028104808082008#, 16#56E89B95C3C32BC3#, 16#337BC5DFECEC97EC#, 16#9690AB4DDBDB4BDB#, 16#611F5FC0A1A1BEA1#, 16#1C8307918D8D0E8D#, 16#F5C97AC83D3DF43D#,
            16#CCF1335B97976697#, 16#0000000000000000#, 16#36D483F9CFCF1BCF#, 16#4587566E2B2BAC2B#, 16#97B3ECE17676C576#, 16#64B019E682823282#, 16#FEA9B128D6D67FD6#, 16#D87736C31B1B6C1B#,
            16#C15B7774B5B5EEB5#, 16#112943BEAFAF86AF#, 16#77DFD41D6A6AB56A#, 16#BA0DA0EA50505D50#, 16#124C8A5745450945#, 16#CB18FB38F3F3EBF3#, 16#9DF060AD3030C030#, 16#2B74C3C4EFEF9BEF#,
            16#E5C37EDA3F3FFC3F#, 16#921CAAC755554955#, 16#791059DBA2A2B2A2#, 16#0365C9E9EAEA8FEA#, 16#0FECCA6A65658965#, 16#B9686903BABAD2BA#, 16#65935E4A2F2FBC2F#, 16#4EE79D8EC0C027C0#,
            16#BE81A160DEDE5FDE#, 16#E06C38FC1C1C701C#, 16#BB2EE746FDFDD3FD#, 16#52649A1F4D4D294D#, 16#E4E0397692927292#, 16#8FBCEAFA7575C975#, 16#301E0C3606061806#, 16#249809AE8A8A128A#,
            16#F940794BB2B2F2B2#, 16#6359D185E6E6BFE6#, 16#70361C7E0E0E380E#, 16#F8633EE71F1F7C1F#, 16#37F7C45562629562#, 16#EEA3B53AD4D477D4#, 16#29324D81A8A89AA8#, 16#C4F4315296966296#,
            16#9B3AEF62F9F9C3F9#, 16#66F697A3C5C533C5#, 16#35B14A1025259425#, 16#F220B2AB59597959#, 16#54AE15D084842A84#, 16#B7A7E4C57272D572#, 16#D5DD72EC3939E439#, 16#5A6198164C4C2D4C#,
            16#CA3BBC945E5E655E#, 16#E785F09F7878FD78#, 16#DDD870E53838E038#, 16#148605988C8C0A8C#, 16#C6B2BF17D1D163D1#, 16#410B57E4A5A5AEA5#, 16#434DD9A1E2E2AFE2#, 16#2FF8C24E61619961#,
            16#F1457B42B3B3F6B3#, 16#15A5423421218421#, 16#94D625089C9C4A9C#, 16#F0663CEE1E1E781E#, 16#2252866143431143#, 16#76FC93B1C7C73BC7#, 16#B32BE54FFCFCD7FC#, 16#2014082404041004#,
            16#B208A2E351515951#, 16#BCC72F2599995E99#, 16#4FC4DA226D6DA96D#, 16#68391A650D0D340D#, 16#8335E979FAFACFFA#, 16#B684A369DFDF5BDF#, 16#D79BFCA97E7EE57E#, 16#3DB4481924249024#,
            16#C5D776FE3B3BEC3B#, 16#313D4B9AABAB96AB#, 16#3ED181F0CECE1FCE#, 16#8855229911114411#, 16#0C8903838F8F068F#, 16#4A6B9C044E4E254E#, 16#D1517366B7B7E6B7#, 16#0B60CBE0EBEB8BEB#,
            16#FDCC78C13C3CF03C#, 16#7CBF1FFD81813E81#, 16#D4FE354094946A94#, 16#EB0CF31CF7F7FBF7#, 16#A1676F18B9B9DEB9#, 16#985F268B13134C13#, 16#7D9C58512C2CB02C#, 16#D6B8BB05D3D36BD3#,
            16#6B5CD38CE7E7BBE7#, 16#57CBDC396E6EA56E#, 16#6EF395AAC4C437C4#, 16#180F061B03030C03#, 16#8A13ACDC56564556#, 16#1A49885E44440D44#, 16#DF9EFEA07F7FE17F#, 16#21374F88A9A99EA9#,
            16#4D8254672A2AA82A#, 16#B16D6B0ABBBBD6BB#, 16#46E29F87C1C123C1#, 16#A202A6F153535153#, 16#AE8BA572DCDC57DC#, 16#582716530B0B2C0B#, 16#9CD327019D9D4E9D#, 16#47C1D82B6C6CAD6C#,
            16#95F562A43131C431#, 16#87B9E8F37474CD74#, 16#E309F115F6F6FFF6#, 16#0A438C4C46460546#, 16#092645A5ACAC8AAC#, 16#3C970FB589891E89#, 16#A04428B414145014#, 16#5B42DFBAE1E1A3E1#,
            16#B04E2CA616165816#, 16#CDD274F73A3AE83A#, 16#6FD0D2066969B969#, 16#482D124109092409#, 16#A7ADE0D77070DD70#, 16#D954716FB6B6E2B6#, 16#CEB7BD1ED0D067D0#, 16#3B7EC7D6EDED93ED#,
            16#2EDB85E2CCCC17CC#, 16#2A57846842421542#, 16#B4C22D2C98985A98#, 16#490E55EDA4A4AAA4#, 16#5D8850752828A028#, 16#DA31B8865C5C6D5C#, 16#933FED6BF8F8C7F8#, 16#44A411C286862286#
         ),
         (
            16#18C07830D8181860#, 16#2305AF462623238C#, 16#C67EF991B8C6C63F#, 16#E8136FCDFBE8E887#, 16#874CA113CB878726#, 16#B8A9626D11B8B8DA#, 16#0108050209010104#, 16#4F426E9E0D4F4F21#,
            16#36ADEE6C9B3636D8#, 16#A6590451FFA6A6A2#, 16#D2DEBDB90CD2D26F#, 16#F5FB06F70EF5F5F3#, 16#79EF80F2967979F9#, 16#6F5FCEDE306F6FA1#, 16#91FCEF3F6D91917E#, 16#52AA07A4F8525255#,
            16#6027FDC04760609D#, 16#BC89766535BCBCCA#, 16#9BACCD2B379B9B56#, 16#8E048C018A8E8E02#, 16#A371155BD2A3A3B6#, 16#0C603C186C0C0C30#, 16#7BFF8AF6847B7BF1#, 16#35B5E16A803535D4#,
            16#1DE8693AF51D1D74#, 16#E05347DDB3E0E0A7#, 16#D7F6ACB321D7D77B#, 16#C25EED999CC2C22F#, 16#2E6D965C432E2EB8#, 16#4B627A96294B4B31#, 16#FEA321E15DFEFEDF#, 16#578216AED5575741#,
            16#15A8412ABD151554#, 16#779FB6EEE87777C1#, 16#37A5EB6E923737DC#, 16#E57B56D79EE5E5B3#, 16#9F8CD923139F9F46#, 16#F0D317FD23F0F0E7#, 16#4A6A7F94204A4A35#, 16#DA9E95A944DADA4F#,
            16#58FA25B0A258587D#, 16#C906CA8FCFC9C903#, 16#29558D527C2929A4#, 16#0A5022145A0A0A28#, 16#B1E14F7F50B1B1FE#, 16#A0691A5DC9A0A0BA#, 16#6B7FDAD6146B6BB1#, 16#855CAB17D985852E#,
            16#BD8173673CBDBDCE#, 16#5DD234BA8F5D5D69#, 16#1080502090101040#, 16#F4F303F507F4F4F7#, 16#CB16C08BDDCBCB0B#, 16#3EEDC67CD33E3EF8#, 16#0528110A2D050514#, 16#671FE6CE78676781#,
            16#E47353D597E4E4B7#, 16#2725BB4E0227279C#, 16#4132588273414119#, 16#8B2C9D0BA78B8B16#, 16#A7510153F6A7A7A6#, 16#7DCF94FAB27D7DE9#, 16#95DCFB374995956E#, 16#D88E9FAD56D8D847#,
            16#FB8B30EB70FBFBCB#, 16#EE2371C1CDEEEE9F#, 16#7CC791F8BB7C7CED#, 16#6617E3CC71666685#, 16#DDA68EA77BDDDD53#, 16#17B84B2EAF17175C#, 16#4702468E45474701#, 16#9E84DC211A9E9E42#,
            16#CA1EC589D4CACA0F#, 16#2D75995A582D2DB4#, 16#BF9179632EBFBFC6#, 16#07381B0E3F07071C#, 16#AD012347ACADAD8E#, 16#5AEA2FB4B05A5A75#, 16#836CB51BEF838336#, 16#3385FF66B63333CC#,
            16#633FF2C65C636391#, 16#02100A0412020208#, 16#AA39384993AAAA92#, 16#71AFA8E2DE7171D9#, 16#C80ECF8DC6C8C807#, 16#19C87D32D1191964#, 16#497270923B494939#, 16#D9869AAF5FD9D943#,
            16#F2C31DF931F2F2EF#, 16#E34B48DBA8E3E3AB#, 16#5BE22AB6B95B5B71#, 16#8834920DBC88881A#, 16#9AA4C8293E9A9A52#, 16#262DBE4C0B262698#, 16#328DFA64BF3232C8#, 16#B0E94A7D59B0B0FA#,
            16#E91B6ACFF2E9E983#, 16#0F78331E770F0F3C#, 16#D5E6A6B733D5D573#, 16#8074BA1DF480803A#, 16#BE997C6127BEBEC2#, 16#CD26DE87EBCDCD13#, 16#34BDE468893434D0#, 16#487A75903248483D#,
            16#FFAB24E354FFFFDB#, 16#7AF78FF48D7A7AF5#, 16#90F4EA3D6490907A#, 16#5FC23EBE9D5F5F61#, 16#201DA0403D202080#, 16#6867D5D00F6868BD#, 16#1AD07234CA1A1A68#, 16#AE192C41B7AEAE82#,
            16#B4C95E757DB4B4EA#, 16#549A19A8CE54544D#, 16#93ECE53B7F939376#, 16#220DAA442F222288#, 16#6407E9C86364648D#, 16#F1DB12FF2AF1F1E3#, 16#73BFA2E6CC7373D1#, 16#12905A2482121248#,
            16#403A5D807A40401D#, 16#0840281048080820#, 16#C356E89B95C3C32B#, 16#EC337BC5DFECEC97#, 16#DB9690AB4DDBDB4B#, 16#A1611F5FC0A1A1BE#, 16#8D1C8307918D8D0E#, 16#3DF5C97AC83D3DF4#,
            16#97CCF1335B979766#, 16#0000000000000000#, 16#CF36D483F9CFCF1B#, 16#2B4587566E2B2BAC#, 16#7697B3ECE17676C5#, 16#8264B019E6828232#, 16#D6FEA9B128D6D67F#, 16#1BD87736C31B1B6C#,
            16#B5C15B7774B5B5EE#, 16#AF112943BEAFAF86#, 16#6A77DFD41D6A6AB5#, 16#50BA0DA0EA50505D#, 16#45124C8A57454509#, 16#F3CB18FB38F3F3EB#, 16#309DF060AD3030C0#, 16#EF2B74C3C4EFEF9B#,
            16#3FE5C37EDA3F3FFC#, 16#55921CAAC7555549#, 16#A2791059DBA2A2B2#, 16#EA0365C9E9EAEA8F#, 16#650FECCA6A656589#, 16#BAB9686903BABAD2#, 16#2F65935E4A2F2FBC#, 16#C04EE79D8EC0C027#,
            16#DEBE81A160DEDE5F#, 16#1CE06C38FC1C1C70#, 16#FDBB2EE746FDFDD3#, 16#4D52649A1F4D4D29#, 16#92E4E03976929272#, 16#758FBCEAFA7575C9#, 16#06301E0C36060618#, 16#8A249809AE8A8A12#,
            16#B2F940794BB2B2F2#, 16#E66359D185E6E6BF#, 16#0E70361C7E0E0E38#, 16#1FF8633EE71F1F7C#, 16#6237F7C455626295#, 16#D4EEA3B53AD4D477#, 16#A829324D81A8A89A#, 16#96C4F43152969662#,
            16#F99B3AEF62F9F9C3#, 16#C566F697A3C5C533#, 16#2535B14A10252594#, 16#59F220B2AB595979#, 16#8454AE15D084842A#, 16#72B7A7E4C57272D5#, 16#39D5DD72EC3939E4#, 16#4C5A6198164C4C2D#,
            16#5ECA3BBC945E5E65#, 16#78E785F09F7878FD#, 16#38DDD870E53838E0#, 16#8C148605988C8C0A#, 16#D1C6B2BF17D1D163#, 16#A5410B57E4A5A5AE#, 16#E2434DD9A1E2E2AF#, 16#612FF8C24E616199#,
            16#B3F1457B42B3B3F6#, 16#2115A54234212184#, 16#9C94D625089C9C4A#, 16#1EF0663CEE1E1E78#, 16#4322528661434311#, 16#C776FC93B1C7C73B#, 16#FCB32BE54FFCFCD7#, 16#0420140824040410#,
            16#51B208A2E3515159#, 16#99BCC72F2599995E#, 16#6D4FC4DA226D6DA9#, 16#0D68391A650D0D34#, 16#FA8335E979FAFACF#, 16#DFB684A369DFDF5B#, 16#7ED79BFCA97E7EE5#, 16#243DB44819242490#,
            16#3BC5D776FE3B3BEC#, 16#AB313D4B9AABAB96#, 16#CE3ED181F0CECE1F#, 16#1188552299111144#, 16#8F0C8903838F8F06#, 16#4E4A6B9C044E4E25#, 16#B7D1517366B7B7E6#, 16#EB0B60CBE0EBEB8B#,
            16#3CFDCC78C13C3CF0#, 16#817CBF1FFD81813E#, 16#94D4FE354094946A#, 16#F7EB0CF31CF7F7FB#, 16#B9A1676F18B9B9DE#, 16#13985F268B13134C#, 16#2C7D9C58512C2CB0#, 16#D3D6B8BB05D3D36B#,
            16#E76B5CD38CE7E7BB#, 16#6E57CBDC396E6EA5#, 16#C46EF395AAC4C437#, 16#03180F061B03030C#, 16#568A13ACDC565645#, 16#441A49885E44440D#, 16#7FDF9EFEA07F7FE1#, 16#A921374F88A9A99E#,
            16#2A4D8254672A2AA8#, 16#BBB16D6B0ABBBBD6#, 16#C146E29F87C1C123#, 16#53A202A6F1535351#, 16#DCAE8BA572DCDC57#, 16#0B582716530B0B2C#, 16#9D9CD327019D9D4E#, 16#6C47C1D82B6C6CAD#,
            16#3195F562A43131C4#, 16#7487B9E8F37474CD#, 16#F6E309F115F6F6FF#, 16#460A438C4C464605#, 16#AC092645A5ACAC8A#, 16#893C970FB589891E#, 16#14A04428B4141450#, 16#E15B42DFBAE1E1A3#,
            16#16B04E2CA6161658#, 16#3ACDD274F73A3AE8#, 16#696FD0D2066969B9#, 16#09482D1241090924#, 16#70A7ADE0D77070DD#, 16#B6D954716FB6B6E2#, 16#D0CEB7BD1ED0D067#, 16#ED3B7EC7D6EDED93#,
            16#CC2EDB85E2CCCC17#, 16#422A578468424215#, 16#98B4C22D2C98985A#, 16#A4490E55EDA4A4AA#, 16#285D8850752828A0#, 16#5CDA31B8865C5C6D#, 16#F8933FED6BF8F8C7#, 16#8644A411C2868622#
         ),
         (
            16#6018C07830D81818#, 16#8C2305AF46262323#, 16#3FC67EF991B8C6C6#, 16#87E8136FCDFBE8E8#, 16#26874CA113CB8787#, 16#DAB8A9626D11B8B8#, 16#0401080502090101#, 16#214F426E9E0D4F4F#,
            16#D836ADEE6C9B3636#, 16#A2A6590451FFA6A6#, 16#6FD2DEBDB90CD2D2#, 16#F3F5FB06F70EF5F5#, 16#F979EF80F2967979#, 16#A16F5FCEDE306F6F#, 16#7E91FCEF3F6D9191#, 16#5552AA07A4F85252#,
            16#9D6027FDC0476060#, 16#CABC89766535BCBC#, 16#569BACCD2B379B9B#, 16#028E048C018A8E8E#, 16#B6A371155BD2A3A3#, 16#300C603C186C0C0C#, 16#F17BFF8AF6847B7B#, 16#D435B5E16A803535#,
            16#741DE8693AF51D1D#, 16#A7E05347DDB3E0E0#, 16#7BD7F6ACB321D7D7#, 16#2FC25EED999CC2C2#, 16#B82E6D965C432E2E#, 16#314B627A96294B4B#, 16#DFFEA321E15DFEFE#, 16#41578216AED55757#,
            16#5415A8412ABD1515#, 16#C1779FB6EEE87777#, 16#DC37A5EB6E923737#, 16#B3E57B56D79EE5E5#, 16#469F8CD923139F9F#, 16#E7F0D317FD23F0F0#, 16#354A6A7F94204A4A#, 16#4FDA9E95A944DADA#,
            16#7D58FA25B0A25858#, 16#03C906CA8FCFC9C9#, 16#A429558D527C2929#, 16#280A5022145A0A0A#, 16#FEB1E14F7F50B1B1#, 16#BAA0691A5DC9A0A0#, 16#B16B7FDAD6146B6B#, 16#2E855CAB17D98585#,
            16#CEBD8173673CBDBD#, 16#695DD234BA8F5D5D#, 16#4010805020901010#, 16#F7F4F303F507F4F4#, 16#0BCB16C08BDDCBCB#, 16#F83EEDC67CD33E3E#, 16#140528110A2D0505#, 16#81671FE6CE786767#,
            16#B7E47353D597E4E4#, 16#9C2725BB4E022727#, 16#1941325882734141#, 16#168B2C9D0BA78B8B#, 16#A6A7510153F6A7A7#, 16#E97DCF94FAB27D7D#, 16#6E95DCFB37499595#, 16#47D88E9FAD56D8D8#,
            16#CBFB8B30EB70FBFB#, 16#9FEE2371C1CDEEEE#, 16#ED7CC791F8BB7C7C#, 16#856617E3CC716666#, 16#53DDA68EA77BDDDD#, 16#5C17B84B2EAF1717#, 16#014702468E454747#, 16#429E84DC211A9E9E#,
            16#0FCA1EC589D4CACA#, 16#B42D75995A582D2D#, 16#C6BF9179632EBFBF#, 16#1C07381B0E3F0707#, 16#8EAD012347ACADAD#, 16#755AEA2FB4B05A5A#, 16#36836CB51BEF8383#, 16#CC3385FF66B63333#,
            16#91633FF2C65C6363#, 16#0802100A04120202#, 16#92AA39384993AAAA#, 16#D971AFA8E2DE7171#, 16#07C80ECF8DC6C8C8#, 16#6419C87D32D11919#, 16#39497270923B4949#, 16#43D9869AAF5FD9D9#,
            16#EFF2C31DF931F2F2#, 16#ABE34B48DBA8E3E3#, 16#715BE22AB6B95B5B#, 16#1A8834920DBC8888#, 16#529AA4C8293E9A9A#, 16#98262DBE4C0B2626#, 16#C8328DFA64BF3232#, 16#FAB0E94A7D59B0B0#,
            16#83E91B6ACFF2E9E9#, 16#3C0F78331E770F0F#, 16#73D5E6A6B733D5D5#, 16#3A8074BA1DF48080#, 16#C2BE997C6127BEBE#, 16#13CD26DE87EBCDCD#, 16#D034BDE468893434#, 16#3D487A7590324848#,
            16#DBFFAB24E354FFFF#, 16#F57AF78FF48D7A7A#, 16#7A90F4EA3D649090#, 16#615FC23EBE9D5F5F#, 16#80201DA0403D2020#, 16#BD6867D5D00F6868#, 16#681AD07234CA1A1A#, 16#82AE192C41B7AEAE#,
            16#EAB4C95E757DB4B4#, 16#4D549A19A8CE5454#, 16#7693ECE53B7F9393#, 16#88220DAA442F2222#, 16#8D6407E9C8636464#, 16#E3F1DB12FF2AF1F1#, 16#D173BFA2E6CC7373#, 16#4812905A24821212#,
            16#1D403A5D807A4040#, 16#2008402810480808#, 16#2BC356E89B95C3C3#, 16#97EC337BC5DFECEC#, 16#4BDB9690AB4DDBDB#, 16#BEA1611F5FC0A1A1#, 16#0E8D1C8307918D8D#, 16#F43DF5C97AC83D3D#,
            16#6697CCF1335B9797#, 16#0000000000000000#, 16#1BCF36D483F9CFCF#, 16#AC2B4587566E2B2B#, 16#C57697B3ECE17676#, 16#328264B019E68282#, 16#7FD6FEA9B128D6D6#, 16#6C1BD87736C31B1B#,
            16#EEB5C15B7774B5B5#, 16#86AF112943BEAFAF#, 16#B56A77DFD41D6A6A#, 16#5D50BA0DA0EA5050#, 16#0945124C8A574545#, 16#EBF3CB18FB38F3F3#, 16#C0309DF060AD3030#, 16#9BEF2B74C3C4EFEF#,
            16#FC3FE5C37EDA3F3F#, 16#4955921CAAC75555#, 16#B2A2791059DBA2A2#, 16#8FEA0365C9E9EAEA#, 16#89650FECCA6A6565#, 16#D2BAB9686903BABA#, 16#BC2F65935E4A2F2F#, 16#27C04EE79D8EC0C0#,
            16#5FDEBE81A160DEDE#, 16#701CE06C38FC1C1C#, 16#D3FDBB2EE746FDFD#, 16#294D52649A1F4D4D#, 16#7292E4E039769292#, 16#C9758FBCEAFA7575#, 16#1806301E0C360606#, 16#128A249809AE8A8A#,
            16#F2B2F940794BB2B2#, 16#BFE66359D185E6E6#, 16#380E70361C7E0E0E#, 16#7C1FF8633EE71F1F#, 16#956237F7C4556262#, 16#77D4EEA3B53AD4D4#, 16#9AA829324D81A8A8#, 16#6296C4F431529696#,
            16#C3F99B3AEF62F9F9#, 16#33C566F697A3C5C5#, 16#942535B14A102525#, 16#7959F220B2AB5959#, 16#2A8454AE15D08484#, 16#D572B7A7E4C57272#, 16#E439D5DD72EC3939#, 16#2D4C5A6198164C4C#,
            16#655ECA3BBC945E5E#, 16#FD78E785F09F7878#, 16#E038DDD870E53838#, 16#0A8C148605988C8C#, 16#63D1C6B2BF17D1D1#, 16#AEA5410B57E4A5A5#, 16#AFE2434DD9A1E2E2#, 16#99612FF8C24E6161#,
            16#F6B3F1457B42B3B3#, 16#842115A542342121#, 16#4A9C94D625089C9C#, 16#781EF0663CEE1E1E#, 16#1143225286614343#, 16#3BC776FC93B1C7C7#, 16#D7FCB32BE54FFCFC#, 16#1004201408240404#,
            16#5951B208A2E35151#, 16#5E99BCC72F259999#, 16#A96D4FC4DA226D6D#, 16#340D68391A650D0D#, 16#CFFA8335E979FAFA#, 16#5BDFB684A369DFDF#, 16#E57ED79BFCA97E7E#, 16#90243DB448192424#,
            16#EC3BC5D776FE3B3B#, 16#96AB313D4B9AABAB#, 16#1FCE3ED181F0CECE#, 16#4411885522991111#, 16#068F0C8903838F8F#, 16#254E4A6B9C044E4E#, 16#E6B7D1517366B7B7#, 16#8BEB0B60CBE0EBEB#,
            16#F03CFDCC78C13C3C#, 16#3E817CBF1FFD8181#, 16#6A94D4FE35409494#, 16#FBF7EB0CF31CF7F7#, 16#DEB9A1676F18B9B9#, 16#4C13985F268B1313#, 16#B02C7D9C58512C2C#, 16#6BD3D6B8BB05D3D3#,
            16#BBE76B5CD38CE7E7#, 16#A56E57CBDC396E6E#, 16#37C46EF395AAC4C4#, 16#0C03180F061B0303#, 16#45568A13ACDC5656#, 16#0D441A49885E4444#, 16#E17FDF9EFEA07F7F#, 16#9EA921374F88A9A9#,
            16#A82A4D8254672A2A#, 16#D6BBB16D6B0ABBBB#, 16#23C146E29F87C1C1#, 16#5153A202A6F15353#, 16#57DCAE8BA572DCDC#, 16#2C0B582716530B0B#, 16#4E9D9CD327019D9D#, 16#AD6C47C1D82B6C6C#,
            16#C43195F562A43131#, 16#CD7487B9E8F37474#, 16#FFF6E309F115F6F6#, 16#05460A438C4C4646#, 16#8AAC092645A5ACAC#, 16#1E893C970FB58989#, 16#5014A04428B41414#, 16#A3E15B42DFBAE1E1#,
            16#5816B04E2CA61616#, 16#E83ACDD274F73A3A#, 16#B9696FD0D2066969#, 16#2409482D12410909#, 16#DD70A7ADE0D77070#, 16#E2B6D954716FB6B6#, 16#67D0CEB7BD1ED0D0#, 16#93ED3B7EC7D6EDED#,
            16#17CC2EDB85E2CCCC#, 16#15422A5784684242#, 16#5A98B4C22D2C9898#, 16#AAA4490E55EDA4A4#, 16#A0285D8850752828#, 16#6D5CDA31B8865C5C#, 16#C7F8933FED6BF8F8#, 16#228644A411C28686#
         ),
         (
            16#186018C07830D818#, 16#238C2305AF462623#, 16#C63FC67EF991B8C6#, 16#E887E8136FCDFBE8#, 16#8726874CA113CB87#, 16#B8DAB8A9626D11B8#, 16#0104010805020901#, 16#4F214F426E9E0D4F#,
            16#36D836ADEE6C9B36#, 16#A6A2A6590451FFA6#, 16#D26FD2DEBDB90CD2#, 16#F5F3F5FB06F70EF5#, 16#79F979EF80F29679#, 16#6FA16F5FCEDE306F#, 16#917E91FCEF3F6D91#, 16#525552AA07A4F852#,
            16#609D6027FDC04760#, 16#BCCABC89766535BC#, 16#9B569BACCD2B379B#, 16#8E028E048C018A8E#, 16#A3B6A371155BD2A3#, 16#0C300C603C186C0C#, 16#7BF17BFF8AF6847B#, 16#35D435B5E16A8035#,
            16#1D741DE8693AF51D#, 16#E0A7E05347DDB3E0#, 16#D77BD7F6ACB321D7#, 16#C22FC25EED999CC2#, 16#2EB82E6D965C432E#, 16#4B314B627A96294B#, 16#FEDFFEA321E15DFE#, 16#5741578216AED557#,
            16#155415A8412ABD15#, 16#77C1779FB6EEE877#, 16#37DC37A5EB6E9237#, 16#E5B3E57B56D79EE5#, 16#9F469F8CD923139F#, 16#F0E7F0D317FD23F0#, 16#4A354A6A7F94204A#, 16#DA4FDA9E95A944DA#,
            16#587D58FA25B0A258#, 16#C903C906CA8FCFC9#, 16#29A429558D527C29#, 16#0A280A5022145A0A#, 16#B1FEB1E14F7F50B1#, 16#A0BAA0691A5DC9A0#, 16#6BB16B7FDAD6146B#, 16#852E855CAB17D985#,
            16#BDCEBD8173673CBD#, 16#5D695DD234BA8F5D#, 16#1040108050209010#, 16#F4F7F4F303F507F4#, 16#CB0BCB16C08BDDCB#, 16#3EF83EEDC67CD33E#, 16#05140528110A2D05#, 16#6781671FE6CE7867#,
            16#E4B7E47353D597E4#, 16#279C2725BB4E0227#, 16#4119413258827341#, 16#8B168B2C9D0BA78B#, 16#A7A6A7510153F6A7#, 16#7DE97DCF94FAB27D#, 16#956E95DCFB374995#, 16#D847D88E9FAD56D8#,
            16#FBCBFB8B30EB70FB#, 16#EE9FEE2371C1CDEE#, 16#7CED7CC791F8BB7C#, 16#66856617E3CC7166#, 16#DD53DDA68EA77BDD#, 16#175C17B84B2EAF17#, 16#47014702468E4547#, 16#9E429E84DC211A9E#,
            16#CA0FCA1EC589D4CA#, 16#2DB42D75995A582D#, 16#BFC6BF9179632EBF#, 16#071C07381B0E3F07#, 16#AD8EAD012347ACAD#, 16#5A755AEA2FB4B05A#, 16#8336836CB51BEF83#, 16#33CC3385FF66B633#,
            16#6391633FF2C65C63#, 16#020802100A041202#, 16#AA92AA39384993AA#, 16#71D971AFA8E2DE71#, 16#C807C80ECF8DC6C8#, 16#196419C87D32D119#, 16#4939497270923B49#, 16#D943D9869AAF5FD9#,
            16#F2EFF2C31DF931F2#, 16#E3ABE34B48DBA8E3#, 16#5B715BE22AB6B95B#, 16#881A8834920DBC88#, 16#9A529AA4C8293E9A#, 16#2698262DBE4C0B26#, 16#32C8328DFA64BF32#, 16#B0FAB0E94A7D59B0#,
            16#E983E91B6ACFF2E9#, 16#0F3C0F78331E770F#, 16#D573D5E6A6B733D5#, 16#803A8074BA1DF480#, 16#BEC2BE997C6127BE#, 16#CD13CD26DE87EBCD#, 16#34D034BDE4688934#, 16#483D487A75903248#,
            16#FFDBFFAB24E354FF#, 16#7AF57AF78FF48D7A#, 16#907A90F4EA3D6490#, 16#5F615FC23EBE9D5F#, 16#2080201DA0403D20#, 16#68BD6867D5D00F68#, 16#1A681AD07234CA1A#, 16#AE82AE192C41B7AE#,
            16#B4EAB4C95E757DB4#, 16#544D549A19A8CE54#, 16#937693ECE53B7F93#, 16#2288220DAA442F22#, 16#648D6407E9C86364#, 16#F1E3F1DB12FF2AF1#, 16#73D173BFA2E6CC73#, 16#124812905A248212#,
            16#401D403A5D807A40#, 16#0820084028104808#, 16#C32BC356E89B95C3#, 16#EC97EC337BC5DFEC#, 16#DB4BDB9690AB4DDB#, 16#A1BEA1611F5FC0A1#, 16#8D0E8D1C8307918D#, 16#3DF43DF5C97AC83D#,
            16#976697CCF1335B97#, 16#0000000000000000#, 16#CF1BCF36D483F9CF#, 16#2BAC2B4587566E2B#, 16#76C57697B3ECE176#, 16#82328264B019E682#, 16#D67FD6FEA9B128D6#, 16#1B6C1BD87736C31B#,
            16#B5EEB5C15B7774B5#, 16#AF86AF112943BEAF#, 16#6AB56A77DFD41D6A#, 16#505D50BA0DA0EA50#, 16#450945124C8A5745#, 16#F3EBF3CB18FB38F3#, 16#30C0309DF060AD30#, 16#EF9BEF2B74C3C4EF#,
            16#3FFC3FE5C37EDA3F#, 16#554955921CAAC755#, 16#A2B2A2791059DBA2#, 16#EA8FEA0365C9E9EA#, 16#6589650FECCA6A65#, 16#BAD2BAB9686903BA#, 16#2FBC2F65935E4A2F#, 16#C027C04EE79D8EC0#,
            16#DE5FDEBE81A160DE#, 16#1C701CE06C38FC1C#, 16#FDD3FDBB2EE746FD#, 16#4D294D52649A1F4D#, 16#927292E4E0397692#, 16#75C9758FBCEAFA75#, 16#061806301E0C3606#, 16#8A128A249809AE8A#,
            16#B2F2B2F940794BB2#, 16#E6BFE66359D185E6#, 16#0E380E70361C7E0E#, 16#1F7C1FF8633EE71F#, 16#62956237F7C45562#, 16#D477D4EEA3B53AD4#, 16#A89AA829324D81A8#, 16#966296C4F4315296#,
            16#F9C3F99B3AEF62F9#, 16#C533C566F697A3C5#, 16#25942535B14A1025#, 16#597959F220B2AB59#, 16#842A8454AE15D084#, 16#72D572B7A7E4C572#, 16#39E439D5DD72EC39#, 16#4C2D4C5A6198164C#,
            16#5E655ECA3BBC945E#, 16#78FD78E785F09F78#, 16#38E038DDD870E538#, 16#8C0A8C148605988C#, 16#D163D1C6B2BF17D1#, 16#A5AEA5410B57E4A5#, 16#E2AFE2434DD9A1E2#, 16#6199612FF8C24E61#,
            16#B3F6B3F1457B42B3#, 16#21842115A5423421#, 16#9C4A9C94D625089C#, 16#1E781EF0663CEE1E#, 16#4311432252866143#, 16#C73BC776FC93B1C7#, 16#FCD7FCB32BE54FFC#, 16#0410042014082404#,
            16#515951B208A2E351#, 16#995E99BCC72F2599#, 16#6DA96D4FC4DA226D#, 16#0D340D68391A650D#, 16#FACFFA8335E979FA#, 16#DF5BDFB684A369DF#, 16#7EE57ED79BFCA97E#, 16#2490243DB4481924#,
            16#3BEC3BC5D776FE3B#, 16#AB96AB313D4B9AAB#, 16#CE1FCE3ED181F0CE#, 16#1144118855229911#, 16#8F068F0C8903838F#, 16#4E254E4A6B9C044E#, 16#B7E6B7D1517366B7#, 16#EB8BEB0B60CBE0EB#,
            16#3CF03CFDCC78C13C#, 16#813E817CBF1FFD81#, 16#946A94D4FE354094#, 16#F7FBF7EB0CF31CF7#, 16#B9DEB9A1676F18B9#, 16#134C13985F268B13#, 16#2CB02C7D9C58512C#, 16#D36BD3D6B8BB05D3#,
            16#E7BBE76B5CD38CE7#, 16#6EA56E57CBDC396E#, 16#C437C46EF395AAC4#, 16#030C03180F061B03#, 16#5645568A13ACDC56#, 16#440D441A49885E44#, 16#7FE17FDF9EFEA07F#, 16#A99EA921374F88A9#,
            16#2AA82A4D8254672A#, 16#BBD6BBB16D6B0ABB#, 16#C123C146E29F87C1#, 16#535153A202A6F153#, 16#DC57DCAE8BA572DC#, 16#0B2C0B582716530B#, 16#9D4E9D9CD327019D#, 16#6CAD6C47C1D82B6C#,
            16#31C43195F562A431#, 16#74CD7487B9E8F374#, 16#F6FFF6E309F115F6#, 16#4605460A438C4C46#, 16#AC8AAC092645A5AC#, 16#891E893C970FB589#, 16#145014A04428B414#, 16#E1A3E15B42DFBAE1#,
            16#165816B04E2CA616#, 16#3AE83ACDD274F73A#, 16#69B9696FD0D20669#, 16#092409482D124109#, 16#70DD70A7ADE0D770#, 16#B6E2B6D954716FB6#, 16#D067D0CEB7BD1ED0#, 16#ED93ED3B7EC7D6ED#,
            16#CC17CC2EDB85E2CC#, 16#4215422A57846842#, 16#985A98B4C22D2C98#, 16#A4AAA4490E55EDA4#, 16#28A0285D88507528#, 16#5C6D5CDA31B8865C#, 16#F8C7F8933FED6BF8#, 16#86228644A411C286#
         )
      );

   --[Whirlpool_Rounds]---------------------------------------------------------
   -- Number of rounds.
   -----------------------------------------------------------------------------

   Whirlpool_Rounds           : constant Positive := 10;

   --[Whirlpool_Round_Constants]------------------------------------------------
   -- Round constants.
   -----------------------------------------------------------------------------

   Whirlpool_Round_Constants  : constant Eight_Bytes_Array(1 .. Whirlpool_Rounds) :=
      (
         16#1823C6E887B8014F#, 16#36A6D2F5796F9152#, 16#60BC9B8EA30C7B35#, 16#1DE0D7C22E4BFE57#,
         16#157737E59FF04ADA#, 16#58C9290AB1A06B85#, 16#BD5D10F4CB3E0567#, 16#E427418BA77D95D8#,
         16#FBEE7C66DD17479E#, 16#CA2DBF07AD5A8333#
      );

   -----------------------------------------------------------------------------
   --[Types]--------------------------------------------------------------------
   -----------------------------------------------------------------------------

   --[Whirlpool_Packed_Block]---------------------------------------------------
   -- Packed block type.
   -----------------------------------------------------------------------------

   subtype Whirlpool_Packed_Block is Eight_Bytes_Array(1 .. Whirlpool_Block_Words);

   --[Whirlpool_Unpacked_State]-------------------------------------------------
   -- Unpacked state type.
   -----------------------------------------------------------------------------

   subtype Whirlpool_Unpacked_State is Byte_Array(1 .. Whirlpool_State_Bytes);

   -----------------------------------------------------------------------------
   --[Body Declared Subprogram Specifications]----------------------------------
   -----------------------------------------------------------------------------

   --[Pack_Block]---------------------------------------------------------------

   function    Pack_Block(
                  The_Block      : in     Whirlpool_Block)
      return   Whirlpool_Packed_Block;
   pragma Inline(Pack_Block);

   --[Unpack_State]-------------------------------------------------------------

   function    Unpack_State(
                  The_State      : in     Whirlpool_State)
      return   Whirlpool_Unpacked_State;
   pragma Inline(Unpack_State);

   --[Transform]----------------------------------------------------------------

   procedure   Transform(
                  State          : in out Whirlpool_State;
                  Block          : in     Whirlpool_Block);
   pragma Inline(Transform);

   -----------------------------------------------------------------------------
   --[Body Declared Subprogram Bodies]------------------------------------------
   -----------------------------------------------------------------------------

   --[Pack_Block]---------------------------------------------------------------

   function    Pack_Block(
                  The_Block      : in     Whirlpool_Block)
      return   Whirlpool_Packed_Block
   is
      PB             : Whirlpool_Packed_Block;
      J              : Positive := The_Block'First;
   begin
      for I in PB'Range loop
         PB(I) := Pack(The_Block(J .. J + Whirlpool_Word_Bytes - 1), Big_Endian);
         J := J + Whirlpool_Word_Bytes;
      end loop;

      return PB;
   end Pack_Block;

   --[Unpack_State]-------------------------------------------------------------

   function    Unpack_State(
                  The_State      : in     Whirlpool_State)
      return   Whirlpool_Unpacked_State
   is
      US             : Whirlpool_Unpacked_State;
      J              : Positive := US'First;
   begin
      for I in The_State'Range loop
         US(J .. J + Whirlpool_Word_Bytes - 1) := Unpack(The_State(I), Big_Endian);
         J := J + Whirlpool_Word_Bytes;
      end loop;

      return US;
   end Unpack_State;

   --[Transform]----------------------------------------------------------------

   procedure   Transform(
                  State          : in out Whirlpool_State;
                  Block          : in     Whirlpool_Block)
   is
      K              : Whirlpool_State := State;
      X              : constant Whirlpool_Packed_Block := Pack_Block(Block);
      T              : Whirlpool_State := (others => 0);
      L              : Whirlpool_State := (others => 0);
   begin

      -- Initialize temporary T (State xor Block).

      for I in T'Range loop
         T(I) := X(I) xor K(I);
      end loop;

      -- Perform Whirlpool rounds.

      for I in 1 .. Whirlpool_Rounds loop

         -- Compute K

         L(1)  := Whirlpool_S_Boxes(1, Hi_Byte(Hi_Two_Bytes(Hi_Four_Bytes(K(1)))))   xor
                  Whirlpool_S_Boxes(2, Lo_Byte(Hi_Two_Bytes(Hi_Four_Bytes(K(8)))))   xor
                  Whirlpool_S_Boxes(3, Hi_Byte(Lo_Two_Bytes(Hi_Four_Bytes(K(7)))))   xor
                  Whirlpool_S_Boxes(4, Lo_Byte(Lo_Two_Bytes(Hi_Four_Bytes(K(6)))))   xor
                  Whirlpool_S_Boxes(5, Hi_Byte(Hi_Two_Bytes(Lo_Four_Bytes(K(5)))))   xor
                  Whirlpool_S_Boxes(6, Lo_Byte(Hi_Two_Bytes(Lo_Four_Bytes(K(4)))))   xor
                  Whirlpool_S_Boxes(7, Hi_Byte(Lo_Two_Bytes(Lo_Four_Bytes(K(3)))))   xor
                  Whirlpool_S_Boxes(8, Lo_Byte(Lo_Two_Bytes(Lo_Four_Bytes(K(2)))))   xor
                  Whirlpool_Round_Constants(I);

         L(2)  := Whirlpool_S_Boxes(1, Hi_Byte(Hi_Two_Bytes(Hi_Four_Bytes(K(2)))))   xor
                  Whirlpool_S_Boxes(2, Lo_Byte(Hi_Two_Bytes(Hi_Four_Bytes(K(1)))))   xor
                  Whirlpool_S_Boxes(3, Hi_Byte(Lo_Two_Bytes(Hi_Four_Bytes(K(8)))))   xor
                  Whirlpool_S_Boxes(4, Lo_Byte(Lo_Two_Bytes(Hi_Four_Bytes(K(7)))))   xor
                  Whirlpool_S_Boxes(5, Hi_Byte(Hi_Two_Bytes(Lo_Four_Bytes(K(6)))))   xor
                  Whirlpool_S_Boxes(6, Lo_Byte(Hi_Two_Bytes(Lo_Four_Bytes(K(5)))))   xor
                  Whirlpool_S_Boxes(7, Hi_Byte(Lo_Two_Bytes(Lo_Four_Bytes(K(4)))))   xor
                  Whirlpool_S_Boxes(8, Lo_Byte(Lo_Two_Bytes(Lo_Four_Bytes(K(3)))));

         L(3)  := Whirlpool_S_Boxes(1, Hi_Byte(Hi_Two_Bytes(Hi_Four_Bytes(K(3)))))   xor
                  Whirlpool_S_Boxes(2, Lo_Byte(Hi_Two_Bytes(Hi_Four_Bytes(K(2)))))   xor
                  Whirlpool_S_Boxes(3, Hi_Byte(Lo_Two_Bytes(Hi_Four_Bytes(K(1)))))   xor
                  Whirlpool_S_Boxes(4, Lo_Byte(Lo_Two_Bytes(Hi_Four_Bytes(K(8)))))   xor
                  Whirlpool_S_Boxes(5, Hi_Byte(Hi_Two_Bytes(Lo_Four_Bytes(K(7)))))   xor
                  Whirlpool_S_Boxes(6, Lo_Byte(Hi_Two_Bytes(Lo_Four_Bytes(K(6)))))   xor
                  Whirlpool_S_Boxes(7, Hi_Byte(Lo_Two_Bytes(Lo_Four_Bytes(K(5)))))   xor
                  Whirlpool_S_Boxes(8, Lo_Byte(Lo_Two_Bytes(Lo_Four_Bytes(K(4)))));

         L(4)  := Whirlpool_S_Boxes(1, Hi_Byte(Hi_Two_Bytes(Hi_Four_Bytes(K(4)))))   xor
                  Whirlpool_S_Boxes(2, Lo_Byte(Hi_Two_Bytes(Hi_Four_Bytes(K(3)))))   xor
                  Whirlpool_S_Boxes(3, Hi_Byte(Lo_Two_Bytes(Hi_Four_Bytes(K(2)))))   xor
                  Whirlpool_S_Boxes(4, Lo_Byte(Lo_Two_Bytes(Hi_Four_Bytes(K(1)))))   xor
                  Whirlpool_S_Boxes(5, Hi_Byte(Hi_Two_Bytes(Lo_Four_Bytes(K(8)))))   xor
                  Whirlpool_S_Boxes(6, Lo_Byte(Hi_Two_Bytes(Lo_Four_Bytes(K(7)))))   xor
                  Whirlpool_S_Boxes(7, Hi_Byte(Lo_Two_Bytes(Lo_Four_Bytes(K(6)))))   xor
                  Whirlpool_S_Boxes(8, Lo_Byte(Lo_Two_Bytes(Lo_Four_Bytes(K(5)))));

         L(5)  := Whirlpool_S_Boxes(1, Hi_Byte(Hi_Two_Bytes(Hi_Four_Bytes(K(5)))))   xor
                  Whirlpool_S_Boxes(2, Lo_Byte(Hi_Two_Bytes(Hi_Four_Bytes(K(4)))))   xor
                  Whirlpool_S_Boxes(3, Hi_Byte(Lo_Two_Bytes(Hi_Four_Bytes(K(3)))))   xor
                  Whirlpool_S_Boxes(4, Lo_Byte(Lo_Two_Bytes(Hi_Four_Bytes(K(2)))))   xor
                  Whirlpool_S_Boxes(5, Hi_Byte(Hi_Two_Bytes(Lo_Four_Bytes(K(1)))))   xor
                  Whirlpool_S_Boxes(6, Lo_Byte(Hi_Two_Bytes(Lo_Four_Bytes(K(8)))))   xor
                  Whirlpool_S_Boxes(7, Hi_Byte(Lo_Two_Bytes(Lo_Four_Bytes(K(7)))))   xor
                  Whirlpool_S_Boxes(8, Lo_Byte(Lo_Two_Bytes(Lo_Four_Bytes(K(6)))));

         L(6)  := Whirlpool_S_Boxes(1, Hi_Byte(Hi_Two_Bytes(Hi_Four_Bytes(K(6)))))   xor
                  Whirlpool_S_Boxes(2, Lo_Byte(Hi_Two_Bytes(Hi_Four_Bytes(K(5)))))   xor
                  Whirlpool_S_Boxes(3, Hi_Byte(Lo_Two_Bytes(Hi_Four_Bytes(K(4)))))   xor
                  Whirlpool_S_Boxes(4, Lo_Byte(Lo_Two_Bytes(Hi_Four_Bytes(K(3)))))   xor
                  Whirlpool_S_Boxes(5, Hi_Byte(Hi_Two_Bytes(Lo_Four_Bytes(K(2)))))   xor
                  Whirlpool_S_Boxes(6, Lo_Byte(Hi_Two_Bytes(Lo_Four_Bytes(K(1)))))   xor
                  Whirlpool_S_Boxes(7, Hi_Byte(Lo_Two_Bytes(Lo_Four_Bytes(K(8)))))   xor
                  Whirlpool_S_Boxes(8, Lo_Byte(Lo_Two_Bytes(Lo_Four_Bytes(K(7)))));

         L(7)  := Whirlpool_S_Boxes(1, Hi_Byte(Hi_Two_Bytes(Hi_Four_Bytes(K(7)))))   xor
                  Whirlpool_S_Boxes(2, Lo_Byte(Hi_Two_Bytes(Hi_Four_Bytes(K(6)))))   xor
                  Whirlpool_S_Boxes(3, Hi_Byte(Lo_Two_Bytes(Hi_Four_Bytes(K(5)))))   xor
                  Whirlpool_S_Boxes(4, Lo_Byte(Lo_Two_Bytes(Hi_Four_Bytes(K(4)))))   xor
                  Whirlpool_S_Boxes(5, Hi_Byte(Hi_Two_Bytes(Lo_Four_Bytes(K(3)))))   xor
                  Whirlpool_S_Boxes(6, Lo_Byte(Hi_Two_Bytes(Lo_Four_Bytes(K(2)))))   xor
                  Whirlpool_S_Boxes(7, Hi_Byte(Lo_Two_Bytes(Lo_Four_Bytes(K(1)))))   xor
                  Whirlpool_S_Boxes(8, Lo_Byte(Lo_Two_Bytes(Lo_Four_Bytes(K(8)))));

         L(8)  := Whirlpool_S_Boxes(1, Hi_Byte(Hi_Two_Bytes(Hi_Four_Bytes(K(8)))))   xor
                  Whirlpool_S_Boxes(2, Lo_Byte(Hi_Two_Bytes(Hi_Four_Bytes(K(7)))))   xor
                  Whirlpool_S_Boxes(3, Hi_Byte(Lo_Two_Bytes(Hi_Four_Bytes(K(6)))))   xor
                  Whirlpool_S_Boxes(4, Lo_Byte(Lo_Two_Bytes(Hi_Four_Bytes(K(5)))))   xor
                  Whirlpool_S_Boxes(5, Hi_Byte(Hi_Two_Bytes(Lo_Four_Bytes(K(4)))))   xor
                  Whirlpool_S_Boxes(6, Lo_Byte(Hi_Two_Bytes(Lo_Four_Bytes(K(3)))))   xor
                  Whirlpool_S_Boxes(7, Hi_Byte(Lo_Two_Bytes(Lo_Four_Bytes(K(2)))))   xor
                  Whirlpool_S_Boxes(8, Lo_Byte(Lo_Two_Bytes(Lo_Four_Bytes(K(1)))));

         for J in K'Range loop
            K(J) := L(J);
         end loop;

         -- Apply the i-th transformation.

         L(1)  := Whirlpool_S_Boxes(1, Hi_Byte(Hi_Two_Bytes(Hi_Four_Bytes(T(1)))))   xor
                  Whirlpool_S_Boxes(2, Lo_Byte(Hi_Two_Bytes(Hi_Four_Bytes(T(8)))))   xor
                  Whirlpool_S_Boxes(3, Hi_Byte(Lo_Two_Bytes(Hi_Four_Bytes(T(7)))))   xor
                  Whirlpool_S_Boxes(4, Lo_Byte(Lo_Two_Bytes(Hi_Four_Bytes(T(6)))))   xor
                  Whirlpool_S_Boxes(5, Hi_Byte(Hi_Two_Bytes(Lo_Four_Bytes(T(5)))))   xor
                  Whirlpool_S_Boxes(6, Lo_Byte(Hi_Two_Bytes(Lo_Four_Bytes(T(4)))))   xor
                  Whirlpool_S_Boxes(7, Hi_Byte(Lo_Two_Bytes(Lo_Four_Bytes(T(3)))))   xor
                  Whirlpool_S_Boxes(8, Lo_Byte(Lo_Two_Bytes(Lo_Four_Bytes(T(2)))))   xor
                  K(1);

         L(2)  := Whirlpool_S_Boxes(1, Hi_Byte(Hi_Two_Bytes(Hi_Four_Bytes(T(2)))))   xor
                  Whirlpool_S_Boxes(2, Lo_Byte(Hi_Two_Bytes(Hi_Four_Bytes(T(1)))))   xor
                  Whirlpool_S_Boxes(3, Hi_Byte(Lo_Two_Bytes(Hi_Four_Bytes(T(8)))))   xor
                  Whirlpool_S_Boxes(4, Lo_Byte(Lo_Two_Bytes(Hi_Four_Bytes(T(7)))))   xor
                  Whirlpool_S_Boxes(5, Hi_Byte(Hi_Two_Bytes(Lo_Four_Bytes(T(6)))))   xor
                  Whirlpool_S_Boxes(6, Lo_Byte(Hi_Two_Bytes(Lo_Four_Bytes(T(5)))))   xor
                  Whirlpool_S_Boxes(7, Hi_Byte(Lo_Two_Bytes(Lo_Four_Bytes(T(4)))))   xor
                  Whirlpool_S_Boxes(8, Lo_Byte(Lo_Two_Bytes(Lo_Four_Bytes(T(3)))))   xor
                  K(2);

         L(3)  := Whirlpool_S_Boxes(1, Hi_Byte(Hi_Two_Bytes(Hi_Four_Bytes(T(3)))))   xor
                  Whirlpool_S_Boxes(2, Lo_Byte(Hi_Two_Bytes(Hi_Four_Bytes(T(2)))))   xor
                  Whirlpool_S_Boxes(3, Hi_Byte(Lo_Two_Bytes(Hi_Four_Bytes(T(1)))))   xor
                  Whirlpool_S_Boxes(4, Lo_Byte(Lo_Two_Bytes(Hi_Four_Bytes(T(8)))))   xor
                  Whirlpool_S_Boxes(5, Hi_Byte(Hi_Two_Bytes(Lo_Four_Bytes(T(7)))))   xor
                  Whirlpool_S_Boxes(6, Lo_Byte(Hi_Two_Bytes(Lo_Four_Bytes(T(6)))))   xor
                  Whirlpool_S_Boxes(7, Hi_Byte(Lo_Two_Bytes(Lo_Four_Bytes(T(5)))))   xor
                  Whirlpool_S_Boxes(8, Lo_Byte(Lo_Two_Bytes(Lo_Four_Bytes(T(4)))))   xor
                  K(3);

         L(4)  := Whirlpool_S_Boxes(1, Hi_Byte(Hi_Two_Bytes(Hi_Four_Bytes(T(4)))))   xor
                  Whirlpool_S_Boxes(2, Lo_Byte(Hi_Two_Bytes(Hi_Four_Bytes(T(3)))))   xor
                  Whirlpool_S_Boxes(3, Hi_Byte(Lo_Two_Bytes(Hi_Four_Bytes(T(2)))))   xor
                  Whirlpool_S_Boxes(4, Lo_Byte(Lo_Two_Bytes(Hi_Four_Bytes(T(1)))))   xor
                  Whirlpool_S_Boxes(5, Hi_Byte(Hi_Two_Bytes(Lo_Four_Bytes(T(8)))))   xor
                  Whirlpool_S_Boxes(6, Lo_Byte(Hi_Two_Bytes(Lo_Four_Bytes(T(7)))))   xor
                  Whirlpool_S_Boxes(7, Hi_Byte(Lo_Two_Bytes(Lo_Four_Bytes(T(6)))))   xor
                  Whirlpool_S_Boxes(8, Lo_Byte(Lo_Two_Bytes(Lo_Four_Bytes(T(5)))))   xor
                  K(4);

         L(5)  := Whirlpool_S_Boxes(1, Hi_Byte(Hi_Two_Bytes(Hi_Four_Bytes(T(5)))))   xor
                  Whirlpool_S_Boxes(2, Lo_Byte(Hi_Two_Bytes(Hi_Four_Bytes(T(4)))))   xor
                  Whirlpool_S_Boxes(3, Hi_Byte(Lo_Two_Bytes(Hi_Four_Bytes(T(3)))))   xor
                  Whirlpool_S_Boxes(4, Lo_Byte(Lo_Two_Bytes(Hi_Four_Bytes(T(2)))))   xor
                  Whirlpool_S_Boxes(5, Hi_Byte(Hi_Two_Bytes(Lo_Four_Bytes(T(1)))))   xor
                  Whirlpool_S_Boxes(6, Lo_Byte(Hi_Two_Bytes(Lo_Four_Bytes(T(8)))))   xor
                  Whirlpool_S_Boxes(7, Hi_Byte(Lo_Two_Bytes(Lo_Four_Bytes(T(7)))))   xor
                  Whirlpool_S_Boxes(8, Lo_Byte(Lo_Two_Bytes(Lo_Four_Bytes(T(6)))))   xor
                  K(5);

         L(6)  := Whirlpool_S_Boxes(1, Hi_Byte(Hi_Two_Bytes(Hi_Four_Bytes(T(6)))))   xor
                  Whirlpool_S_Boxes(2, Lo_Byte(Hi_Two_Bytes(Hi_Four_Bytes(T(5)))))   xor
                  Whirlpool_S_Boxes(3, Hi_Byte(Lo_Two_Bytes(Hi_Four_Bytes(T(4)))))   xor
                  Whirlpool_S_Boxes(4, Lo_Byte(Lo_Two_Bytes(Hi_Four_Bytes(T(3)))))   xor
                  Whirlpool_S_Boxes(5, Hi_Byte(Hi_Two_Bytes(Lo_Four_Bytes(T(2)))))   xor
                  Whirlpool_S_Boxes(6, Lo_Byte(Hi_Two_Bytes(Lo_Four_Bytes(T(1)))))   xor
                  Whirlpool_S_Boxes(7, Hi_Byte(Lo_Two_Bytes(Lo_Four_Bytes(T(8)))))   xor
                  Whirlpool_S_Boxes(8, Lo_Byte(Lo_Two_Bytes(Lo_Four_Bytes(T(7)))))   xor
                  K(6);

         L(7)  := Whirlpool_S_Boxes(1, Hi_Byte(Hi_Two_Bytes(Hi_Four_Bytes(T(7)))))   xor
                  Whirlpool_S_Boxes(2, Lo_Byte(Hi_Two_Bytes(Hi_Four_Bytes(T(6)))))   xor
                  Whirlpool_S_Boxes(3, Hi_Byte(Lo_Two_Bytes(Hi_Four_Bytes(T(5)))))   xor
                  Whirlpool_S_Boxes(4, Lo_Byte(Lo_Two_Bytes(Hi_Four_Bytes(T(4)))))   xor
                  Whirlpool_S_Boxes(5, Hi_Byte(Hi_Two_Bytes(Lo_Four_Bytes(T(3)))))   xor
                  Whirlpool_S_Boxes(6, Lo_Byte(Hi_Two_Bytes(Lo_Four_Bytes(T(2)))))   xor
                  Whirlpool_S_Boxes(7, Hi_Byte(Lo_Two_Bytes(Lo_Four_Bytes(T(1)))))   xor
                  Whirlpool_S_Boxes(8, Lo_Byte(Lo_Two_Bytes(Lo_Four_Bytes(T(8)))))   xor
                  K(7);

         L(8)  := Whirlpool_S_Boxes(1, Hi_Byte(Hi_Two_Bytes(Hi_Four_Bytes(T(8)))))   xor
                  Whirlpool_S_Boxes(2, Lo_Byte(Hi_Two_Bytes(Hi_Four_Bytes(T(7)))))   xor
                  Whirlpool_S_Boxes(3, Hi_Byte(Lo_Two_Bytes(Hi_Four_Bytes(T(6)))))   xor
                  Whirlpool_S_Boxes(4, Lo_Byte(Lo_Two_Bytes(Hi_Four_Bytes(T(5)))))   xor
                  Whirlpool_S_Boxes(5, Hi_Byte(Hi_Two_Bytes(Lo_Four_Bytes(T(4)))))   xor
                  Whirlpool_S_Boxes(6, Lo_Byte(Hi_Two_Bytes(Lo_Four_Bytes(T(3)))))   xor
                  Whirlpool_S_Boxes(7, Hi_Byte(Lo_Two_Bytes(Lo_Four_Bytes(T(2)))))   xor
                  Whirlpool_S_Boxes(8, Lo_Byte(Lo_Two_Bytes(Lo_Four_Bytes(T(1)))))   xor
                  K(8);

         for J in T'Range loop
            T(J) := L(J);
         end loop;
      end loop;

      -- Apply the Miyaguchi-Preneel compression function:

      for I in State'Range loop
         State(I) := State(I) xor (T(I) xor X(I));
      end loop;
   end Transform;

   -----------------------------------------------------------------------------
   --[Dispatching Operations]---------------------------------------------------
   -----------------------------------------------------------------------------

   --[Digest_Start]-------------------------------------------------------------

   procedure   Digest_Start(
                  The_Digest     : in out Whirlpool_Digest)
   is
   begin
      Initialize(The_Digest);
   end Digest_Start;

   --[Digest_Update]------------------------------------------------------------

   procedure   Digest_Update(
                  The_Digest     : in out Whirlpool_Digest;
                  The_Bytes      : in     Byte_Array)
   is
      Tot_Bytes      : constant Natural := The_Digest.BIB + The_Bytes'Length;
      Chunks         : Natural := Tot_Bytes / Whirlpool_Block_Bytes;
      New_BIB        : constant Natural := Tot_Bytes mod Whirlpool_Block_Bytes;
      I              : Natural := The_Bytes'First;
      To_Copy        : Natural := 0;
   begin

      -- Data is processed in chunks of Whirlpool_Block_Bytes bytes.

      if Chunks > 0 then

         -- If the object already has buffered data, fill the internal buffer
         -- with bytes from input and transform from internal buffer.

         if The_Digest.BIB > 0 then
            To_Copy := Whirlpool_Block_Bytes - The_Digest.BIB;
            The_Digest.Buffer(The_Digest.BIB + 1 .. Whirlpool_Block_Bytes) := The_Bytes(I .. I + To_Copy - 1);
            Transform(The_Digest.State, The_Digest.Buffer);

            -- Now there are not any bytes in internal buffer.

            The_Digest.BIB    := 0;
            The_Digest.Buffer := (others => 16#00#);

            -- Update index over The_Bytes, decrease number of chunks.

            I := I + To_Copy;
            Chunks := Chunks - 1;
         end if;

         -- Remaining chunks are processed from The_Bytes.

         while Chunks > 0 loop
            Transform(The_Digest.State, The_Bytes(I .. I + Whirlpool_Block_Bytes - 1));

            -- Update index over The_Bytes, decrease number of chunks.

            I := I + Whirlpool_Block_Bytes;
            Chunks := Chunks - 1;
         end loop;
      end if;

      -- Copy remaining bytes (if any, to internal buffer).

      if New_BIB > The_Digest.BIB then
         The_Digest.Buffer(The_Digest.BIB + 1 .. New_BIB) := The_Bytes(I .. The_Bytes'Last);
      end if;

      The_Digest.BIB := New_BIB;

      -- Increase processed bit counter.

      Increment(The_Digest.Bit_Count, 8 * The_Bytes'Length);
   end Digest_Update;

   --[Digest_End]---------------------------------------------------------------

   procedure   Digest_End(
                  The_Digest     : in out Whirlpool_Digest;
                  The_Hash       :    out Hash)
   is
      UC             : constant Unpacked_Counter := Unpack(The_Digest.Bit_Count, Big_Endian);
      To_Pad         : constant Natural := Whirlpool_Block_Bytes - The_Digest.BIB;
   begin

      -- Pad message.

      if To_Pad > 0 then
         The_Digest.Buffer(The_Digest.BIB + 1 .. Whirlpool_Block_Bytes) := Whirlpool_Pad(1 .. To_Pad);
      end if;

      -- Check if there are room in Buffer for the unpacked bit counter (8
      -- bytes).

      if (The_Digest.BIB + 1) >= Bit_Counter_Offset then

         -- No room for bit counter, transform and zeroize block.

         Transform(The_Digest.State, The_Digest.Buffer);
         The_Digest.Buffer := (others => 0);
      end if;

      -- Copy the bit counter bytes to buffer and transform. High order 16 bytes
      -- are set to 0. Low order 16 bytes are copied to buffer.

      The_Digest.Buffer(Bit_Counter_Offset .. Bit_Counter_Offset + 15) := (others => 16#00#);
      The_Digest.Buffer(Bit_Counter_Offset + 16 .. Whirlpool_Block_Bytes) := UC;
      Transform(The_Digest.State, The_Digest.Buffer);

      -- Set the hash from state.

      Set_Hash(Unpack_State(The_Digest.State), The_Hash);

      -- Zeroize state.

      Initialize(The_Digest);
   end Digest_End;

   -----------------------------------------------------------------------------
   --[Non Dispatching Operations]-----------------------------------------------
   -----------------------------------------------------------------------------

   --[Initialize]---------------------------------------------------------------

   procedure   Initialize(
                  The_Digest     : in out Whirlpool_Digest)
   is
   begin
      The_Digest.Algorithm_Id := MD_Whirlpool;
      The_Digest.State_Size   := Whirlpool_State_Bytes;
      The_Digest.Block_Size   := Whirlpool_Block_Bytes;
      The_Digest.Hash_Size    := Whirlpool_Hash_Bytes;
      The_Digest.Bit_Count    := Zero;
      The_Digest.State        := (others => 0);
      The_Digest.BIB          := 0;
      The_Digest.Buffer       := (others => 0);
   end Initialize;

   --[Finalize]-----------------------------------------------------------------

   procedure   Finalize(
                  The_Digest     : in out Whirlpool_Digest)
   is
   begin
      The_Digest.Algorithm_Id := MD_Whirlpool;
      The_Digest.State_Size   := Whirlpool_State_Bytes;
      The_Digest.Block_Size   := Whirlpool_Block_Bytes;
      The_Digest.Hash_Size    := Whirlpool_Hash_Bytes;
      The_Digest.Bit_Count    := Zero;
      The_Digest.State        := (others => 0);
      The_Digest.BIB          := 0;
      The_Digest.Buffer       := (others => 0);
   end Finalize;

end CryptAda.Digests.Algorithms.Whirlpool;
