--------------------------------------------------------------------------------
--                      (c) 2017, TCantos Software                            --
--                           aduran@tcantos.com                               --
--------------------------------------------------------------------------------
--  This program is free software: you can redistribute it and/or modify  it  --
--  under the terms of  the GNU General Public  License as published by  the  --
--  Free Software Foundation, either version  3 of the License, or  (at your  --
--  option) any later version.                                                --
--                                                                            --
--  This program  is distributed  in the  hope that  it will  be useful, but  --
--  WITHOUT   ANY   WARRANTY;   without  even   the   implied   warranty  of  --
--  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General  --
--  Public License for more details.                                          --
--                                                                            --
--  You should have received a copy of the GNU General Public License  along  --
--  with this program. If not, see <http://www.gnu.org/licenses/>.            --
--------------------------------------------------------------------------------
-- 1. Identification
--    Filename          :  cryptada-digests-message_digests-snefru.adb
--    File kind         :  Ada package body
--    Author            :  A. Duran
--    Creation date     :  March 13th, 2017
--    Current version   :  2.0
--------------------------------------------------------------------------------
-- 2. Purpose:
--    Implements the Snefru message digest algorithm.
--------------------------------------------------------------------------------
-- 3. Revision history
--    Ver   When     Who   Why
--    ----- -------- ----- -----------------------------------------------------
--    1.0   20170313 ADD   Initial implementation.
--    2.0   20170516 ADD   Design changes to use access to objects.
--------------------------------------------------------------------------------

with Ada.Exceptions;                            use Ada.Exceptions;

with CryptAda.Names;                            use CryptAda.Names;
with CryptAda.Exceptions;                       use CryptAda.Exceptions;
with CryptAda.Pragmatics;                       use CryptAda.Pragmatics;
with CryptAda.Lists;                            use CryptAda.Lists;
with CryptAda.Lists.Integer_Item;
with CryptAda.Digests.Counters;                 use CryptAda.Digests.Counters;
with CryptAda.Digests.Hashes;                   use CryptAda.Digests.Hashes;

package body CryptAda.Digests.Message_Digests.Snefru is

   -----------------------------------------------------------------------------
   --[Generic Instantiations]---------------------------------------------------
   -----------------------------------------------------------------------------

   package PItem_Pkg is new CryptAda.Lists.Integer_Item(Positive);
   use PItem_Pkg;

   -----------------------------------------------------------------------------
   --[Constants]----------------------------------------------------------------
   -----------------------------------------------------------------------------

   --[Parameters list parameter names]------------------------------------------
   -- Next constants identify the parameters names of parameters list.
   -----------------------------------------------------------------------------

   Hash_Bytes_Name               : constant String := "Hash_Bytes";
   Security_Level_Name           : constant String := "Security_Level";

   --[S_Box_Count]--------------------------------------------------------------
   -- Number of S-Boxes.
   -----------------------------------------------------------------------------

   S_Box_Count             : constant Positive := 16;

   --[S_Boxes]------------------------------------------------------------------
   -- The Snefru S-Boxes.
   -----------------------------------------------------------------------------

   S_Boxes                 : constant array(1 .. S_Box_Count, Byte) of Four_Bytes := (
      (  -- S_Box:  1
         16#64F9_001B#, 16#FEDD_CDF6#, 16#7C8F_F1E2#, 16#11D7_1514#, 16#8B8C_18D3#, 16#DDDF_881E#, 16#6EAB_5056#, 16#88CE_D8E1#,    -- 16#00# .. 16#07#
         16#4914_8959#, 16#69C5_6FD5#, 16#B799_4F03#, 16#0FBC_EE3E#, 16#3C26_4940#, 16#2155_7E58#, 16#E14B_3FC2#, 16#2E5C_F591#,    -- 16#08# .. 16#0F#
         16#DCEF_F8CE#, 16#092A_1648#, 16#BE81_2936#, 16#FF7B_0C6A#, 16#D525_1037#, 16#AFA4_48F1#, 16#7DAF_C95A#, 16#1EA6_9C3F#,    -- 16#10# .. 16#17#
         16#A417_ABE7#, 16#5890_E423#, 16#B0CB_70C0#, 16#C850_25F7#, 16#244D_97E3#, 16#1FF3_595F#, 16#C4EC_6396#, 16#5918_1E17#,    -- 16#18# .. 16#1F#

         16#E635_B477#, 16#354E_7DBF#, 16#796F_7753#, 16#66EB_52CC#, 16#77C3_F995#, 16#32E3_A927#, 16#80CC_AED6#, 16#4E2B_E89D#,    -- 16#20# .. 16#27#
         16#375B_BD28#, 16#AD1A_3D05#, 16#2B1B_42B3#, 16#16C4_4C71#, 16#4D54_BFA8#, 16#E57D_DC7A#, 16#EC6D_8144#, 16#5A71_046B#,    -- 16#28# .. 16#2F#
         16#D822_9650#, 16#87FC_8F24#, 16#CBC6_0E09#, 16#B639_0366#, 16#D9F7_6092#, 16#D393_A70B#, 16#1D31_A08A#, 16#9CD9_71C9#,    -- 16#30# .. 16#37#
         16#5C1E_F445#, 16#86FA_B694#, 16#FDB4_4165#, 16#8EAA_FCBE#, 16#4BCA_C6EB#, 16#FB7A_94E5#, 16#5789_D04E#, 16#FA13_CF35#,    -- 16#38# .. 16#3F#

         16#236B_8DA9#, 16#4133_F000#, 16#6224_261C#, 16#F412_F23B#, 16#E75E_56A4#, 16#3002_2116#, 16#BAF1_7F1F#, 16#D098_72F9#,    -- 16#40# .. 16#47#
         16#C1A3_699C#, 16#F1E8_02AA#, 16#0DD1_45DC#, 16#4FDC_E093#, 16#8D84_12F0#, 16#6CD0_F376#, 16#3DE6_B73D#, 16#84BA_737F#,    -- 16#48# .. 16#4F#
         16#B43A_30F2#, 16#4456_9F69#, 16#00E4_EACA#, 16#B58D_E3B0#, 16#9591_13C8#, 16#D62E_FEE9#, 16#9086_1F83#, 16#CED6_9874#,    -- 16#50# .. 16#57#
         16#2F79_3CEE#, 16#E857_1C30#, 16#4836_65D1#, 16#AB07_B031#, 16#914C_844F#, 16#15BF_3BE8#, 16#2C3F_2A9A#, 16#9EB9_5FD4#,    -- 16#58# .. 16#5F#

         16#92E7_472D#, 16#2297_CC5B#, 16#EE5F_2782#, 16#5377_B562#, 16#DB8E_BBCF#, 16#F961_DEDD#, 16#C59B_5C60#, 16#1BD3_910D#,    -- 16#60# .. 16#67#
         16#26D2_06AD#, 16#B285_14D8#, 16#5ECF_6B52#, 16#7FEA_78BB#, 16#5048_79AC#, 16#ED34_A884#, 16#36E5_1D3C#, 16#1753_741D#,    -- 16#68# .. 16#6F#
         16#8C47_CAED#, 16#9D0A_40EF#, 16#3145_E221#, 16#DA27_EB70#, 16#DF73_0BA3#, 16#183C_8789#, 16#739A_C0A6#, 16#9A58_DFC6#,    -- 16#70# .. 16#77#
         16#54B1_34C1#, 16#AC3E_242E#, 16#CC49_3902#, 16#7B2D_DA99#, 16#8F15_BC01#, 16#29FD_38C7#, 16#27D5_318F#, 16#604A_AFF5#,    -- 16#78# .. 16#7F#

         16#F29C_6818#, 16#C38A_A2EC#, 16#1019_D4C3#, 16#A8FB_936E#, 16#20ED_7B39#, 16#0B68_6119#, 16#89A0_906F#, 16#1CC7_829E#,    -- 16#80# .. 16#87#
         16#9952_EF4B#, 16#850E_9E8C#, 16#CD06_3A90#, 16#6700_2F8E#, 16#CFAC_8CB7#, 16#EAA2_4B11#, 16#988B_4E6C#, 16#46F0_66DF#,    -- 16#88# .. 16#8F#
         16#CA7E_EC08#, 16#C7BB_A664#, 16#831D_17BD#, 16#63F5_75E6#, 16#9764_350E#, 16#4787_0D42#, 16#026C_A4A2#, 16#8167_D587#,    -- 16#90# .. 16#97#
         16#61B6_ADAB#, 16#AA65_64D2#, 16#70DA_237B#, 16#25E1_C74A#, 16#A1C9_01A0#, 16#0EB0_A5DA#, 16#7670_F741#, 16#51C0_5AEA#,    -- 16#98# .. 16#9F#

         16#933D_FA32#, 16#0759_FF1A#, 16#5601_0AB8#, 16#5FDE_CB78#, 16#3F32_EDF8#, 16#AEBE_DBB9#, 16#39F8_326D#, 16#D208_58C5#,    -- 16#A0# .. 16#A7#
         16#9B63_8BE4#, 16#A572_C80A#, 16#28E0_A19F#, 16#4320_99FC#, 16#3A37_C3CD#, 16#BF95_C585#, 16#B392_C12A#, 16#6AA7_07D7#,    -- 16#A8# .. 16#AF#
         16#52F6_6A61#, 16#12D4_83B1#, 16#9643_5B5E#, 16#3E75_802B#, 16#3BA5_2B33#, 16#A99F_51A5#, 16#BDA1_E157#, 16#78C2_E70C#,    -- 16#B0# .. 16#B7#
         16#FCAE_7CE0#, 16#D160_2267#, 16#2AFF_AC4D#, 16#4A51_0947#, 16#0AB2_B83A#, 16#7A04_E579#, 16#340D_FD80#, 16#B916_E922#,    -- 16#B8# .. 16#BF#

         16#E29D_5E9B#, 16#F562_4AF4#, 16#4CA9_D9AF#, 16#6BBD_2CFE#, 16#E3B7_F620#, 16#C274_6E07#, 16#5B42_B9B6#, 16#A069_19BC#,    -- 16#C0# .. 16#C7#
         16#F0F2_C40F#, 16#7221_7AB5#, 16#14C1_9DF3#, 16#F380_2DAE#, 16#E094_BEB4#, 16#A210_1AFF#, 16#0529_575D#, 16#55CD_B27C#,    -- 16#C8# .. 16#CF#
         16#A33B_DDB2#, 16#6528_B37D#, 16#740C_05DB#, 16#E96A_62C4#, 16#4078_2846#, 16#6D30_D706#, 16#BBF4_8E2C#, 16#BCE2_D3DE#,    -- 16#D0# .. 16#D7#
         16#049E_37FA#, 16#01B5_E634#, 16#2D88_6D8D#, 16#7E5A_2E7E#, 16#D741_2013#, 16#06E9_0F97#, 16#E45D_3EBA#, 16#B8AD_3386#,    -- 16#D8# .. 16#DF#

         16#1305_1B25#, 16#0C03_5354#, 16#71C8_9B75#, 16#C638_FBD0#, 16#197F_11A1#, 16#EF0F_08FB#, 16#F844_8651#, 16#3840_9563#,    -- 16#E0# .. 16#E7#
         16#452F_4443#, 16#5D46_4D55#, 16#03D8_764C#, 16#B1B8_D638#, 16#A70B_BA2F#, 16#94B3_D210#, 16#EB66_92A7#, 16#D409_C2D9#,    -- 16#E8# .. 16#EF#
         16#6883_8526#, 16#A6DB_8A15#, 16#751F_6C98#, 16#DE76_9A88#, 16#C9EE_4668#, 16#1A82_A373#, 16#0896_AA49#, 16#4223_3681#,    -- 16#F0# .. 16#F7#
         16#F62C_55CB#, 16#9F1C_5404#, 16#F74F_B15C#, 16#C06E_4312#, 16#6FFE_5D72#, 16#8AA8_678B#, 16#337C_D129#, 16#8211_CEFD#     -- 16#F8# .. 16#FF#
      ),
      (  -- S_Box:  2
         16#074A_1D09#, 16#52A1_0E5A#, 16#9275_A3F8#, 16#4B82_506C#, 16#37DF_7E1B#, 16#4C78_B3C5#, 16#CEFA_B1DA#, 16#F472_267E#,    -- 16#00# .. 16#07#
         16#B630_45F6#, 16#D66A_1FC0#, 16#4002_98E3#, 16#27E6_0C94#, 16#87D2_F1B8#, 16#DF9E_56CC#, 16#45CD_1803#, 16#1D35_E098#,    -- 16#08# .. 16#0F#
         16#CCE7_C736#, 16#0348_3BF1#, 16#1F73_07D7#, 16#C6E8_F948#, 16#E613_C111#, 16#3955_C6FF#, 16#1170_ED7C#, 16#8E95_DA41#,    -- 16#10# .. 16#17#
         16#99C3_1BF4#, 16#A4DA_8021#, 16#7B5F_94FB#, 16#DD0D_A51F#, 16#6562_AA77#, 16#556B_CB23#, 16#DB1B_ACC6#, 16#7980_40B9#,    -- 16#18# .. 16#1F#

         16#BFE5_378F#, 16#731D_55E6#, 16#DAA5_BFEE#, 16#389B_BC60#, 16#1B33_FBA4#, 16#9C56_7204#, 16#36C2_6C68#, 16#77EE_9D69#,    -- 16#20# .. 16#27#
         16#8AEB_3E88#, 16#2D50_B5CE#, 16#9579_E790#, 16#42B1_3CFC#, 16#33FB_D32B#, 16#EE05_03A7#, 16#B586_2824#, 16#15E4_1EAD#,    -- 16#28# .. 16#2F#
         16#C841_2EF7#, 16#9D44_1275#, 16#2FCE_C582#, 16#5FF4_83B7#, 16#8F39_31DF#, 16#2E5D_2A7B#, 16#4946_7BF9#, 16#0653_DEA9#,    -- 16#30# .. 16#37#
         16#2684_CE35#, 16#7E65_5E5C#, 16#F127_71D8#, 16#BB15_CC67#, 16#AB09_7CA1#, 16#983D_CF52#, 16#10DD_F026#, 16#2126_7F57#,    -- 16#38# .. 16#3F#

         16#2C58_F6B4#, 16#3104_3265#, 16#0BAB_8C01#, 16#D549_2099#, 16#ACAA_E619#, 16#944C_E54A#, 16#F2D1_3D39#, 16#ADD3_FC32#,    -- 16#40# .. 16#47#
         16#CDA0_8A40#, 16#E2B0_D451#, 16#9EFE_08AE#, 16#B9D5_0FD2#, 16#EA5C_D7FD#, 16#C9A7_49DD#, 16#13EA_2253#, 16#832D_EBAA#,    -- 16#48# .. 16#4F#
         16#24BE_640F#, 16#E03E_926A#, 16#29E0_1CDE#, 16#8BF5_9F18#, 16#0F9D_00B6#, 16#E123_8B46#, 16#1E7D_8E34#, 16#9361_9ADB#,    -- 16#50# .. 16#57#
         16#76B3_2F9F#, 16#BD97_2CEC#, 16#E31F_A976#, 16#A68F_BB10#, 16#FB3B_A49D#, 16#8587_C41D#, 16#A5AD_D1D0#, 16#F3CF_84BF#,    -- 16#58# .. 16#5F#

         16#D4E1_1150#, 16#D9FF_A6BC#, 16#C3F6_018C#, 16#AEF1_0572#, 16#74A6_4B2F#, 16#E7DC_9559#, 16#2AAE_35D5#, 16#5B6F_587F#,    -- 16#60# .. 16#67#
         16#A9E3_53FE#, 16#CA4F_B674#, 16#04BA_24A8#, 16#E5C6_875F#, 16#DCBC_6266#, 16#6BC5_C03F#, 16#661E_EF02#, 16#ED74_0BAB#,    -- 16#68# .. 16#6F#
         16#058E_34E4#, 16#B7E9_46CF#, 16#8869_8125#, 16#72EC_48ED#, 16#B110_73A3#, 16#A134_85EB#, 16#A2A2_429C#, 16#FA40_7547#,    -- 16#70# .. 16#77#
         16#50B7_6713#, 16#5418_C37D#, 16#9619_2DA5#, 16#170B_B04B#, 16#518A_021E#, 16#B0AC_13D1#, 16#0963_FA2A#, 16#4A6E_10E1#,    -- 16#78# .. 16#7F#

         16#5847_2BDC#, 16#F7F8_D962#, 16#9791_39EA#, 16#8D85_6538#, 16#C099_7042#, 16#4832_4D7A#, 16#4476_23CB#, 16#8CBB_E364#,    -- 16#80# .. 16#87#
         16#6E0C_6B0E#, 16#D36D_63B0#, 16#3F24_4C84#, 16#3542_C971#, 16#2B22_8DC1#, 16#CB03_25BB#, 16#F8C0_D6E9#, 16#DE11_066B#,    -- 16#88# .. 16#8F#
         16#A864_9327#, 16#FC31_F83E#, 16#7DD8_0406#, 16#F916_DD61#, 16#D89F_79D3#, 16#6151_44C2#, 16#EBB4_5D31#, 16#2800_2958#,    -- 16#90# .. 16#97#
         16#5689_0A37#, 16#F05B_3808#, 16#123A_E844#, 16#8683_9E16#, 16#914B_0D83#, 16#C506_B43C#, 16#CF3C_BA5E#, 16#7C60_F5C9#,    -- 16#98# .. 16#9F#

         16#22DE_B2A0#, 16#5D9C_2715#, 16#C77B_A0EF#, 16#4F45_360B#, 16#C101_7D8B#, 16#E45A_DC29#, 16#A759_909B#, 16#412C_D293#,    -- 16#A0# .. 16#A7#
         16#D7D7_96B1#, 16#00C8_FF30#, 16#23A3_4A80#, 16#4EC1_5C91#, 16#714E_78B5#, 16#47B9_E42E#, 16#78F3_EA4D#, 16#7F07_8F5B#,    -- 16#A8# .. 16#AF#
         16#346C_593A#, 16#A3A8_7A1A#, 16#9BCB_FE12#, 16#3D43_9963#, 16#B2EF_6D8E#, 16#B8D4_6028#, 16#6C2F_D5CA#, 16#6267_5256#,    -- 16#B0# .. 16#B7#
         16#01F2_A2F3#, 16#BC96_AE0A#, 16#709A_8920#, 16#B414_6E87#, 16#6308_B9E2#, 16#64BD_A7BA#, 16#AFED_6892#, 16#6037_F2A2#,    -- 16#B8# .. 16#BF#

         16#F529_69E0#, 16#0ADB_43A6#, 16#8281_1400#, 16#90D0_BDF0#, 16#19C9_549E#, 16#203F_6A73#, 16#1ACC_AF4F#, 16#8971_4E6D#,    -- 16#C0# .. 16#C7#
         16#164D_4705#, 16#6766_5F07#, 16#EC20_6170#, 16#0C21_82B2#, 16#A02B_9C81#, 16#5328_9722#, 16#F6A9_7686#, 16#140E_4179#,    -- 16#C8# .. 16#CF#
         16#9F77_8849#, 16#9A88_E15D#, 16#25CA_DB54#, 16#D157_F36F#, 16#32A4_21C3#, 16#B368_E98A#, 16#5A92_CD0D#, 16#757A_A8D4#,    -- 16#D0# .. 16#D7#
         16#C20A_C278#, 16#08B5_51C7#, 16#8494_91E8#, 16#4DC7_5AD6#, 16#697C_33BE#, 16#BAF0_CA33#, 16#4612_5B4E#, 16#59D6_77B3#,    -- 16#D8# .. 16#DF#

         16#30D9_C8F2#, 16#D0AF_860C#, 16#1C7F_D0FA#, 16#FE0F_F72C#, 16#5C8D_6F43#, 16#57FD_EC3B#, 16#6AB6_AD97#, 16#D22A_DF89#,    -- 16#E0# .. 16#E7#
         16#1817_1785#, 16#02BF_E22D#, 16#6DB8_0917#, 16#80B2_16AF#, 16#E85E_4F9A#, 16#7A1C_306E#, 16#6FC4_9BF5#, 16#3AF7_A11C#,    -- 16#E8# .. 16#EF#
         16#81E2_15E7#, 16#6836_3FCD#, 16#3E93_57C8#, 16#EF52_FD55#, 16#3B8B_AB4C#, 16#3C8C_F495#, 16#BEFC_EEBD#, 16#FD25_B714#,    -- 16#F0# .. 16#F7#
         16#C498_D83D#, 16#0D2E_1A8D#, 16#E9F9_66AC#, 16#0E38_7445#, 16#4354_19E5#, 16#5E7E_BEC4#, 16#AA90_B8D9#, 16#FF1A_3A96#     -- 16#F8# .. 16#FF#
      ),
      (  -- S_Box:  3
         16#4A8F_E4E3#, 16#F27D_99CD#, 16#D04A_40CA#, 16#CB5F_F194#, 16#3668_275A#, 16#FF48_16BE#, 16#A78B_394C#, 16#4C6B_E9DB#,    -- 16#00# .. 16#07#
         16#4EEC_38D2#, 16#4296_EC80#, 16#CDCE_96F8#, 16#888C_2F38#, 16#E755_08F5#, 16#7B91_6414#, 16#060A_A14A#, 16#A214_F327#,    -- 16#08# .. 16#0F#
         16#BE60_8DAF#, 16#1EBB_DEC2#, 16#61F9_8CE9#, 16#E921_56FE#, 16#4F22_D7A3#, 16#3F76_A8D9#, 16#559A_4B33#, 16#38AD_2959#,    -- 16#10# .. 16#17#
         16#F3F1_7E9E#, 16#85E1_BA91#, 16#E5EB_A6FB#, 16#73DC_D48C#, 16#F5C3_FF78#, 16#481B_6058#, 16#8A32_97F7#, 16#8F1F_3BF4#,    -- 16#18# .. 16#1F#

         16#9378_5AB2#, 16#477A_4A5B#, 16#6334_EB5D#, 16#6D25_1B2E#, 16#74A9_102D#, 16#07E3_8FFA#, 16#915C_9C62#, 16#CCC2_75EA#,    -- 16#20# .. 16#27#
         16#6BE2_73EC#, 16#3EBD_DD70#, 16#D895_796C#, 16#DC54_A91B#, 16#C9AF_DF81#, 16#2363_3F73#, 16#2751_19B4#, 16#B19F_6B67#,    -- 16#28# .. 16#2F#
         16#5075_6E22#, 16#2BB1_52E2#, 16#76EA_46A2#, 16#A353_E232#, 16#2F59_6AD6#, 16#0B1E_DB0B#, 16#02D3_D9A4#, 16#78B4_7843#,    -- 16#30# .. 16#37#
         16#6489_3E90#, 16#40F0_CAAD#, 16#F68D_3AD7#, 16#46FD_1707#, 16#1C9C_67EF#, 16#B5E0_86DE#, 16#96EE_6CA6#, 16#9AA3_4774#,    -- 16#38# .. 16#3F#

         16#1BA4_F48A#, 16#8D01_ABFD#, 16#183E_E1F6#, 16#5FF8_AA7A#, 16#17E4_FAAE#, 16#3039_83B0#, 16#6C08_668B#, 16#D4AC_4382#,    -- 16#40# .. 16#47#
         16#E6C5_849F#, 16#92FE_FB53#, 16#C1CA_C4CE#, 16#4350_1388#, 16#4411_18CF#, 16#EC4F_B308#, 16#53A0_8E86#, 16#9E0F_E0C5#,    -- 16#48# .. 16#4F#
         16#F91C_1525#, 16#AC45_BE05#, 16#D798_7CB5#, 16#49BA_1487#, 16#5793_8940#, 16#D587_7648#, 16#A958_727F#, 16#58DF_E3C3#,    -- 16#50# .. 16#57#
         16#F436_CF77#, 16#399E_4D11#, 16#F0A5_BFA9#, 16#EF61_A33B#, 16#A64C_AC60#, 16#04A8_D0BA#, 16#030D_D572#, 16#B83D_320F#,    -- 16#58# .. 16#5F#

         16#CAB2_3045#, 16#E366_F2F0#, 16#815D_008D#, 16#C897_A43A#, 16#1D35_2DF3#, 16#B9CC_571D#, 16#8BF3_8744#, 16#7220_9092#,    -- 16#60# .. 16#67#
         16#EBA1_24EB#, 16#FB99_CE5E#, 16#3BB9_4293#, 16#28DA_549C#, 16#AAB8_A228#, 16#A419_7785#, 16#33C7_0296#, 16#25F6_259B#,    -- 16#68# .. 16#6F#
         16#5C85_DA21#, 16#DF15_BDEE#, 16#15B7_C7E8#, 16#E2AB_EF75#, 16#FCC1_9BC1#, 16#417F_F868#, 16#1488_4434#, 16#6282_5179#,    -- 16#70# .. 16#77#
         16#C6D5_C11C#, 16#0E47_05DC#, 16#2270_0DE0#, 16#D3D2_AF18#, 16#9BE8_22A0#, 16#35B6_69F1#, 16#C42B_B55C#, 16#0A80_1252#,    -- 16#78# .. 16#7F#

         16#115B_F0FC#, 16#3CD7_D856#, 16#B43F_5F9D#, 16#C230_6516#, 16#A123_1C47#, 16#F149_207E#, 16#5209_A795#, 16#34B3_CCD8#,    -- 16#80# .. 16#87#
         16#67AE_FE54#, 16#2C83_924E#, 16#6662_CBAC#, 16#5EED_D161#, 16#84E6_81AA#, 16#5D57_D26B#, 16#FA46_5CC4#, 16#7E3A_C3A8#,    -- 16#88# .. 16#8F#
         16#BF7C_0CC6#, 16#E18A_9AA1#, 16#C32F_0A6F#, 16#B22C_C00D#, 16#3D28_0369#, 16#994E_554F#, 16#68F4_80D3#, 16#ADCF_F5E6#,    -- 16#90# .. 16#97#
         16#3A8E_B265#, 16#8326_9831#, 16#BD56_8A09#, 16#4BC8_AE6A#, 16#69F5_6D2B#, 16#0F17_EAC8#, 16#772E_B6C7#, 16#9F41_343C#,    -- 16#98# .. 16#9F#

         16#AB1D_0742#, 16#826A_6F50#, 16#FEA2_097C#, 16#1912_C283#, 16#CE18_5899#, 16#E444_4839#, 16#2D86_35D5#, 16#65D0_B1FF#,    -- 16#A0# .. 16#A7#
         16#865A_7F17#, 16#326D_9FB1#, 16#59E5_2820#, 16#0090_ADE1#, 16#753C_7149#, 16#9DDD_8B98#, 16#A5A6_91DA#, 16#0D03_82BB#,    -- 16#A8# .. 16#AF#
         16#8904_C930#, 16#086C_B000#, 16#6E69_D3BD#, 16#24D4_E7A7#, 16#0524_4FD0#, 16#101A_5E0C#, 16#6A94_7DCB#, 16#E840_F77B#,    -- 16#B0# .. 16#B7#
         16#7D0C_5003#, 16#7C37_0F1F#, 16#8052_45ED#, 16#E05E_3D3F#, 16#7906_880E#, 16#BABF_CD35#, 16#1A7E_C697#, 16#8C05_2324#,    -- 16#B8# .. 16#BF#

         16#0C6E_C8DF#, 16#D129_A589#, 16#C7A7_5B02#, 16#12D8_1DE7#, 16#D9BE_2A66#, 16#1F42_63AB#, 16#DE73_FDB6#, 16#2A00_680A#,    -- 16#C0# .. 16#C7#
         16#5664_9E36#, 16#3133_ED55#, 16#90FA_0BF2#, 16#2910_A02A#, 16#949D_9D46#, 16#A0D1_DCDD#, 16#CFC9_B7D4#, 16#D267_7BE5#,    -- 16#C8# .. 16#CF#
         16#95CB_36B3#, 16#13CD_9410#, 16#DBF7_3313#, 16#B7C6_E8C0#, 16#F781_414B#, 16#510B_016D#, 16#B0DE_1157#, 16#D6B0_F62C#,    -- 16#D0# .. 16#D7#
         16#BB07_4ECC#, 16#7F13_95B7#, 16#EE79_2CF9#, 16#EA6F_D63E#, 16#5BD6_938E#, 16#AF02_FC64#, 16#DAB5_7AB8#, 16#8EDB_3784#,    -- 16#D8# .. 16#DF#

         16#8716_318F#, 16#164D_1A01#, 16#26F2_6141#, 16#B372_E6B9#, 16#F8FC_2B06#, 16#7AC0_0E04#, 16#3727_B89A#, 16#97E9_BCA5#,    -- 16#E0# .. 16#E7#
         16#9C2A_742F#, 16#BC3B_1F7D#, 16#7165_B471#, 16#609B_4C29#, 16#2092_5351#, 16#5AE7_2112#, 16#454B_E5D1#, 16#C0FF_B95F#,    -- 16#E8# .. 16#EF#
         16#DD0E_F919#, 16#6F2D_70C9#, 16#0974_C5BF#, 16#98AA_6263#, 16#01D9_1E4D#, 16#2184_BB6E#, 16#70C4_3C1E#, 16#4D43_5915#,    -- 16#F0# .. 16#F7#
         16#AE7B_8523#, 16#B6FB_06BC#, 16#5431_EE76#, 16#FDBC_5D26#, 16#ED77_493D#, 16#C571_2EE4#, 16#A838_0437#, 16#2EEF_261A#     -- 16#F8# .. 16#FF#
      ),
      (  -- S_Box:  4
         16#5A79_392B#, 16#B8AF_32C2#, 16#41F7_720A#, 16#833A_61EC#, 16#13DF_EDAC#, 16#C499_0BC4#, 16#DC0F_54BC#, 16#FEDD_5E88#,    -- 16#00# .. 16#07#
         16#80DA_1881#, 16#4DEA_1AFD#, 16#FD40_2CC6#, 16#AE67_CC7A#, 16#C523_8525#, 16#8EA0_1254#, 16#B56B_9BD5#, 16#862F_BD6D#,    -- 16#08# .. 16#0F#
         16#AC85_75D3#, 16#6FBA_3714#, 16#DA7E_BF46#, 16#59CD_5238#, 16#8AC9_DBFE#, 16#3537_29FC#, 16#E497_D7F2#, 16#C3AB_84E0#,    -- 16#10# .. 16#17#
         16#F05A_114B#, 16#7B88_7A75#, 16#EDC6_03DD#, 16#5E6F_E680#, 16#2C84_B399#, 16#884E_B1DA#, 16#1CB8_C8BF#, 16#AA51_098A#,    -- 16#18# .. 16#1F#

         16#C862_231C#, 16#8BAC_2221#, 16#21B3_87E5#, 16#208A_430D#, 16#2A3F_0F8B#, 16#A5FF_9CD2#, 16#6012_A2EA#, 16#147A_9EE7#,    -- 16#20# .. 16#27#
         16#F62A_501D#, 16#B4B2_E51A#, 16#3EF3_484C#, 16#C025_3C59#, 16#2B82_B536#, 16#0AA9_696B#, 16#BE0C_109B#, 16#C70B_7929#,    -- 16#28# .. 16#2F#
         16#CE3E_8A19#, 16#2F66_950E#, 16#459F_1C2C#, 16#E68F_B93D#, 16#A3C3_FF3E#, 16#62B4_5C62#, 16#3009_91CB#, 16#0191_4C57#,    -- 16#30# .. 16#37#
         16#7F7B_C06A#, 16#1828_31F5#, 16#E7B7_4BCA#, 16#FA50_F6D0#, 16#523C_AA61#, 16#E3A7_CF05#, 16#E9E4_1311#, 16#280A_21D1#,    -- 16#38# .. 16#3F#

         16#6A42_97E1#, 16#F24D_C67E#, 16#FC31_89E6#, 16#B72B_F34F#, 16#4B1E_67AF#, 16#5434_02CE#, 16#79A5_9867#, 16#0648_E02A#,    -- 16#40# .. 16#47#
         16#00A3_AC17#, 16#C620_8D35#, 16#6E7F_5F76#, 16#A45B_B4BE#, 16#F168_FA63#, 16#3F41_25F3#, 16#F311_406F#, 16#0270_6565#,    -- 16#48# .. 16#4F#
         16#BFE5_8022#, 16#0CFC_FDD9#, 16#0735_A7F7#, 16#8F04_9092#, 16#D98E_DC27#, 16#F5C5_D55C#, 16#E0F2_01DB#, 16#0DCA_FC9A#,    -- 16#50# .. 16#57#
         16#7727_FB79#, 16#AF43_ABF4#, 16#26E9_38C1#, 16#401B_26A6#, 16#9007_20FA#, 16#2752_D97B#, 16#CFF1_D1B3#, 16#A9D9_E424#,    -- 16#58# .. 16#5F#

         16#42DB_99AB#, 16#6CF8_BE5F#, 16#E82C_EBE3#, 16#3AFB_733B#, 16#6B73_4EB6#, 16#1036_414A#, 16#975F_667C#, 16#049D_6377#,    -- 16#60# .. 16#67#
         16#BA58_7C60#, 16#B1D1_0483#, 16#DE1A_EFCC#, 16#1129_D055#, 16#7205_1E91#, 16#6946_D623#, 16#F9E8_6EA7#, 16#4876_8C00#,    -- 16#68# .. 16#6F#
         16#B016_6C93#, 16#9956_BBF0#, 16#1F1F_6D84#, 16#FB15_E18E#, 16#033B_495D#, 16#56E3_362E#, 16#4F44_C53C#, 16#747C_BA51#,    -- 16#70# .. 16#77#
         16#89D3_7872#, 16#5D9C_331B#, 16#D2EF_9FA8#, 16#2549_17F8#, 16#1B10_6F47#, 16#37D7_5553#, 16#B3F0_53B0#, 16#7DCC_D8EF#,    -- 16#78# .. 16#7F#

         16#D30E_B802#, 16#5889_F42D#, 16#6102_06D7#, 16#1A7D_34A1#, 16#92D8_7DD8#, 16#E5F4_A315#, 16#D1CF_0E71#, 16#B22D_FE45#,    -- 16#80# .. 16#87#
         16#B901_E8EB#, 16#0FC0_CE5E#, 16#2EFA_60C9#, 16#2DE7_4290#, 16#36D0_C906#, 16#381C_70E4#, 16#4C6D_A5B5#, 16#3D81_A682#,    -- 16#88# .. 16#8F#
         16#7E38_1F34#, 16#396C_4F52#, 16#95AD_5901#, 16#1DB5_0C5A#, 16#2998_2E9E#, 16#1557_689F#, 16#3471_EE42#, 16#D7E2_F7C0#,    -- 16#90# .. 16#97#
         16#8795_A1E2#, 16#BC32_4D8D#, 16#E224_C3C8#, 16#1283_7E39#, 16#CDEE_3D74#, 16#7AD2_143F#, 16#0E13_D40C#, 16#78BD_4A68#,    -- 16#98# .. 16#9F#

         16#A2EB_194D#, 16#DB94_51F9#, 16#859B_71DC#, 16#5C4F_5B89#, 16#CA14_A8A4#, 16#EF92_F003#, 16#1674_1D98#, 16#33AA_4444#,    -- 16#A0# .. 16#A7#
         16#9E96_7FBB#, 16#092E_3020#, 16#D86A_35B8#, 16#8CC1_7B10#, 16#E1BF_08AE#, 16#5569_3FC5#, 16#7680_AD13#, 16#1E65_46E8#,    -- 16#A8# .. 16#AF#
         16#23B6_E7B9#, 16#EE77_A4B2#, 16#08ED_0533#, 16#44FD_2895#, 16#B639_3B69#, 16#05D6_CACF#, 16#9819_B209#, 16#ECBB_B72F#,    -- 16#B0# .. 16#B7#
         16#9A75_779C#, 16#EAEC_0749#, 16#94A6_5AEE#, 16#BDF5_2DC3#, 16#D6A2_5D04#, 16#8200_8E4E#, 16#A6DE_160F#, 16#9B03_6AFB#,    -- 16#B8# .. 16#BF#

         16#228B_3A66#, 16#5FB1_0A70#, 16#CC33_8B58#, 16#5378_A9DF#, 16#C908_BCA9#, 16#4959_E25B#, 16#4690_9A97#, 16#66AE_8F6E#,    -- 16#C0# .. 16#C7#
         16#DD06_83E9#, 16#65F9_94B4#, 16#6426_CDA5#, 16#C24B_8840#, 16#3253_9DA0#, 16#6317_5650#, 16#D0C8_15FF#, 16#50CB_C41E#,    -- 16#C8# .. 16#CF#
         16#F7C7_74A3#, 16#31B0_C231#, 16#8D0D_8116#, 16#24BE_F16C#, 16#D555_D256#, 16#DF47_EA8C#, 16#6D21_ECCD#, 16#A887_A012#,    -- 16#D0# .. 16#D7#
         16#8454_2AED#, 16#A7B9_C1BD#, 16#914C_1BB1#, 16#A0D5_B67D#, 16#438C_E937#, 16#7030_F873#, 16#71F6_B0C7#, 16#5745_76BA#,    -- 16#D8# .. 16#DF#

         16#F8BC_4541#, 16#9C61_D348#, 16#1960_579D#, 16#17C4_DAAD#, 16#96A4_CB0B#, 16#C193_F2F6#, 16#756E_AFA2#, 16#7C1D_2F94#,    -- 16#E0# .. 16#E7#
         16#F4FE_2B43#, 16#CB86_E33A#, 16#EBD4_C728#, 16#9D18_AE64#, 16#9FE1_3E30#, 16#3CE0_F5DE#, 16#ABA1_F985#, 16#ADDC_2718#,    -- 16#E8# .. 16#EF#
         16#68CE_6278#, 16#D45E_241F#, 16#A15C_82B7#, 16#3B22_93D4#, 16#739E_DD32#, 16#674A_6BF1#, 16#5B5D_587F#, 16#4772_DEAA#,    -- 16#F0# .. 16#F7#
         16#4A63_968F#, 16#0BE6_8686#, 16#513D_6426#, 16#939A_4787#, 16#BBA8_9296#, 16#4EC2_0007#, 16#818D_0D08#, 16#FF64_DFD6#     -- 16#F8# .. 16#FF#
      ),
      (  -- S_Box:  5
         16#CB22_97CB#, 16#DB48_A144#, 16#A16C_BE4B#, 16#BBEA_1D6C#, 16#5AF6_B6B7#, 16#8A81_10B6#, 16#F923_6EF9#, 16#C98F_83E6#,    -- 16#00# .. 16#07#
         16#0F9C_65B8#, 16#252D_4A89#, 16#A497_F068#, 16#A5D7_ED2D#, 16#94C2_2845#, 16#9DA1_C8C4#, 16#E27C_2E2E#, 16#6E8B_A2B4#,    -- 16#08# .. 16#0F#
         16#C3DD_17FB#, 16#498C_D482#, 16#0DFE_6A9F#, 16#B070_5829#, 16#9A1E_6DC1#, 16#F829_717C#, 16#07BB_8E3A#, 16#DA3C_0B02#,    -- 16#10# .. 16#17#
         16#1AF8_2FC7#, 16#73B7_0955#, 16#7A04_379C#, 16#5EE2_0A28#, 16#8371_2AE5#, 16#F4C4_7C6D#, 16#DF72_BA56#, 16#D794_858D#,    -- 16#18# .. 16#1F#

         16#8C0C_F709#, 16#18F0_F390#, 16#B6C6_9B35#, 16#BF2F_01DB#, 16#2FA7_4DCA#, 16#D0CD_9127#, 16#BDE6_6CEC#, 16#3DEE_BD46#,    -- 16#20# .. 16#27#
         16#57C8_8FC3#, 16#CEE1_406F#, 16#0066_385A#, 16#F3C3_444F#, 16#3A79_D5D5#, 16#7575_1EB9#, 16#3E7F_8185#, 16#521C_2605#,    -- 16#28# .. 16#2F#
         16#E1AA_AB6E#, 16#38EB_B80F#, 16#BEE7_E904#, 16#61CB_9647#, 16#EA54_904E#, 16#05AE_00E4#, 16#2D7A_C65F#, 16#0877_51A1#,    -- 16#30# .. 16#37#
         16#DCD8_2915#, 16#0921_EE16#, 16#DD86_D33B#, 16#D6BD_491A#, 16#40FB_ADF0#, 16#4232_CBD2#, 16#3380_8D10#, 16#3909_8C42#,    -- 16#38# .. 16#3F#

         16#193F_3199#, 16#0BC1_E47A#, 16#4A82_B149#, 16#02B6_5A8A#, 16#104C_DC8E#, 16#24A8_F52C#, 16#685C_6077#, 16#C79F_95C9#,    -- 16#40# .. 16#47#
         16#1D11_FE50#, 16#C08D_AFCD#, 16#7B1A_9A03#, 16#1C1F_11D8#, 16#8425_0E7F#, 16#979D_B248#, 16#EBDC_0501#, 16#B955_3395#,    -- 16#48# .. 16#4F#
         16#E3C0_5EA8#, 16#B1E5_1C4C#, 16#13B0_E681#, 16#3B40_7766#, 16#36DB_3087#, 16#EE17_C9FC#, 16#6C53_ECF2#, 16#ADCC_C58F#,    -- 16#50# .. 16#57#
         16#C427_660B#, 16#EFD5_867D#, 16#9B6D_54A5#, 16#6FF1_AEFF#, 16#8E78_7952#, 16#9E2B_FFE0#, 16#8761_D034#, 16#E00B_DBAD#,    -- 16#58# .. 16#5F#

         16#AE99_A8D3#, 16#CC03_F6E2#, 16#FD0E_D807#, 16#0E50_8AE3#, 16#B741_82AB#, 16#4349_245D#, 16#D120_A465#, 16#B246_A641#,    -- 16#60# .. 16#67#
         16#AF3B_7AB0#, 16#2A64_88BB#, 16#4B3A_0D1F#, 16#E7C7_E58C#, 16#3FAF_F2EB#, 16#9044_5FFD#, 16#CF38_C393#, 16#995D_07E7#,    -- 16#68# .. 16#6F#
         16#F24F_1B36#, 16#356F_6891#, 16#6D6E_BCBE#, 16#8DA9_E262#, 16#50FD_520E#, 16#5BCA_9E1E#, 16#3747_2CF3#, 16#6907_5057#,    -- 16#70# .. 16#77#
         16#7EC5_FDED#, 16#0CAB_892A#, 16#FB24_12BA#, 16#1728_DEBF#, 16#A000_A988#, 16#D843_CE79#, 16#042E_20DD#, 16#4FE8_F853#,    -- 16#78# .. 16#7F#

         16#5665_9C3C#, 16#2739_D119#, 16#A78A_6120#, 16#8096_0375#, 16#7042_0611#, 16#85E0_9F78#, 16#ABD1_7E96#, 16#1B51_3EAF#,    -- 16#80# .. 16#87#
         16#1E01_EB63#, 16#26AD_2133#, 16#A890_C094#, 16#7613_CF60#, 16#817E_781B#, 16#A391_13D7#, 16#E957_FA58#, 16#4131_B99E#,    -- 16#88# .. 16#8F#
         16#28B1_EFDA#, 16#66AC_FBA7#, 16#FF68_944A#, 16#77A4_4FD1#, 16#7F33_1522#, 16#59FF_B3FA#, 16#A6DF_935B#, 16#FA12_D9DF#,    -- 16#90# .. 16#97#
         16#C6BF_6F3F#, 16#8952_0CF6#, 16#659E_DD6A#, 16#544D_A739#, 16#8B05_2538#, 16#7C30_EA21#, 16#C234_5525#, 16#1592_7FB2#,    -- 16#98# .. 16#9F#

         16#144A_436B#, 16#BA10_7B8B#, 16#1219_AC97#, 16#0673_0432#, 16#3183_1AB3#, 16#C55A_5C24#, 16#AA0F_CD3E#, 16#E560_6BE8#,    -- 16#A0# .. 16#A7#
         16#5C88_F19B#, 16#4C08_41EE#, 16#1FE3_7267#, 16#11F9_C4F4#, 16#9F1B_9DAE#, 16#864E_76D0#, 16#E637_C731#, 16#D97D_23A6#,    -- 16#A8# .. 16#AF#
         16#32F5_3D5C#, 16#B816_1980#, 16#93FA_0F84#, 16#CAEF_0870#, 16#8874_487E#, 16#98F2_CC73#, 16#645F_B5C6#, 16#CD85_3659#,    -- 16#B0# .. 16#B7#
         16#2062_470D#, 16#16ED_E8E9#, 16#6B06_DAB5#, 16#78B4_3900#, 16#FC95_B786#, 16#5D8E_7DE1#, 16#465B_5954#, 16#FE7B_A014#,    -- 16#B8# .. 16#BF#

         16#F7D2_3F7B#, 16#92BC_8B18#, 16#0359_3592#, 16#55CE_F4F7#, 16#74B2_7317#, 16#79DE_1FC2#, 16#C8A0_BFBD#, 16#2293_98CC#,    -- 16#C0# .. 16#C7#
         16#62A6_02CE#, 16#BCB9_4661#, 16#5336_D206#, 16#D2A3_75FE#, 16#6A6A_B483#, 16#4702_A5A4#, 16#A2E9_D73D#, 16#23A2_E0F1#,    -- 16#C8# .. 16#CF#
         16#9189_140A#, 16#581D_18DC#, 16#B39A_922B#, 16#8235_6212#, 16#D5F4_32A9#, 16#D356_C2A3#, 16#5F76_5B4D#, 16#450A_FCC8#,    -- 16#D0# .. 16#D7#
         16#4415_E137#, 16#E8EC_DFBC#, 16#ED0D_E3EA#, 16#60D4_2B13#, 16#F13D_F971#, 16#71FC_5DA2#, 16#C145_5340#, 16#F087_742F#,    -- 16#D8# .. 16#DF#

         16#F55E_5751#, 16#67B3_C1F8#, 16#AC6B_8774#, 16#7DCF_AAAC#, 16#9598_3BC0#, 16#489B_B0B1#, 16#2C18_4223#, 16#964B_6726#,    -- 16#E0# .. 16#E7#
         16#2BD3_271C#, 16#7226_6472#, 16#DED6_4530#, 16#0A2A_A343#, 16#D4F7_16A0#, 16#B4DA_D6D9#, 16#2184_345E#, 16#512C_990C#,    -- 16#E8# .. 16#EF#
         16#29D9_2D08#, 16#2EBE_709A#, 16#0114_4C69#, 16#3458_4B9D#, 16#E463_4ED6#, 16#ECC9_63CF#, 16#3C69_84AA#, 16#4ED0_56EF#,    -- 16#F0# .. 16#F7#
         16#9CA5_6976#, 16#8F3E_80D4#, 16#B5BA_E7C5#, 16#30B5_CAF5#, 16#63F3_3A64#, 16#A9E4_BBDE#, 16#F6B8_2298#, 16#4D67_3C1D#     -- 16#F8# .. 16#FF#
      ),
      (  -- S_Box:  6
         16#4B4F_1121#, 16#BA18_3081#, 16#C784_F41F#, 16#D17D_0BAC#, 16#083D_2267#, 16#37B1_361E#, 16#3581_AD05#, 16#FDA2_F6BC#,    -- 16#00# .. 16#07#
         16#1E89_2CDD#, 16#B56D_3C3A#, 16#3214_0E46#, 16#138D_8AAB#, 16#E147_73D4#, 16#5B0E_71DF#, 16#5D1F_E055#, 16#3FB9_91D3#,    -- 16#08# .. 16#0F#
         16#F1F4_6C71#, 16#A325_988C#, 16#10F6_6E80#, 16#B100_6348#, 16#726A_9F60#, 16#3B67_F8BA#, 16#4E11_4EF4#, 16#05C5_2115#,    -- 16#10# .. 16#17#
         16#4C5C_A11C#, 16#99E1_EFD8#, 16#471B_83B3#, 16#CBF7_E524#, 16#43AD_82F5#, 16#690C_A93B#, 16#FAA6_1BB2#, 16#12A8_32B5#,    -- 16#18# .. 16#1F#

         16#B734_F943#, 16#BD22_AEA7#, 16#88FE_C626#, 16#5E80_C3E7#, 16#BE3E_AF5E#, 16#4461_7652#, 16#A572_4475#, 16#BB3B_9695#,    -- 16#20# .. 16#27#
         16#7F3F_EE8F#, 16#964E_7DEB#, 16#518C_052D#, 16#2A0B_BC2B#, 16#C217_5F5C#, 16#9A7B_3889#, 16#A70D_8D0C#, 16#EACC_DD29#,    -- 16#28# .. 16#2F#
         16#CCCD_6658#, 16#34BB_25E6#, 16#B839_1090#, 16#F651_356F#, 16#5298_7C9E#, 16#0C16_C1CD#, 16#8E37_2D3C#, 16#2FC6_EBBD#,    -- 16#30# .. 16#37#
         16#6E5D_A3E3#, 16#B0E2_7239#, 16#5F68_5738#, 16#4541_1786#, 16#067F_65F8#, 16#6177_8B40#, 16#81AB_2E65#, 16#14C8_F0F9#,    -- 16#38# .. 16#3F#

         16#A6B7_B4CE#, 16#4036_EAEC#, 16#BF62_B00A#, 16#ECFD_5E02#, 16#0454_49A6#, 16#B20A_FD28#, 16#2166_D273#, 16#0D13_A863#,    -- 16#40# .. 16#47#
         16#8950_8756#, 16#D51A_7530#, 16#2D65_3F7A#, 16#3CDB_DBC3#, 16#80C9_DF4F#, 16#3D58_12D9#, 16#53FB_B1F3#, 16#C0F1_85C0#,    -- 16#48# .. 16#4F#
         16#7A3C_3D7E#, 16#6864_6410#, 16#8576_07A0#, 16#1D12_622E#, 16#97F3_3466#, 16#DB4C_9917#, 16#6469_607C#, 16#566E_043D#,    -- 16#50# .. 16#57#
         16#79EF_1EDB#, 16#2C05_898D#, 16#C957_8E25#, 16#CD38_0101#, 16#46E0_4377#, 16#7D1C_C7A9#, 16#6552_B837#, 16#2019_2608#,    -- 16#58# .. 16#5F#

         16#B975_00C5#, 16#ED29_6B44#, 16#3686_48B4#, 16#6299_5CD5#, 16#8273_1400#, 16#F9AE_BD8B#, 16#3844_C0C7#, 16#7C2D_E794#,    -- 16#60# .. 16#67#
         16#33A1_A770#, 16#8AE5_28C2#, 16#5A2B_E812#, 16#1F8F_4A07#, 16#2B5E_D7CA#, 16#937E_B564#, 16#6FDA_7E11#, 16#E49B_5D6C#,    -- 16#68# .. 16#6F#
         16#B4B3_244E#, 16#18AA_53A4#, 16#3A06_1334#, 16#4D60_67A3#, 16#83BA_5868#, 16#9BDF_4DFE#, 16#7449_F261#, 16#709F_8450#,    -- 16#70# .. 16#77#
         16#CAD1_33CB#, 16#DE94_1C3F#, 16#F52A_E484#, 16#781D_77ED#, 16#7E43_95F0#, 16#AE10_3B59#, 16#9223_31BB#, 16#42CE_50C8#,    -- 16#78# .. 16#7F#

         16#E6F0_8153#, 16#E7D9_41D0#, 16#5028_ED6B#, 16#B3D2_C49B#, 16#AD4D_9C3E#, 16#D201_FB6E#, 16#A45B_D5BE#, 16#FFCB_7F4B#,    -- 16#80# .. 16#87#
         16#579D_7806#, 16#F821_BB5B#, 16#59D5_92AD#, 16#D0BE_0C31#, 16#D4E3_B676#, 16#0107_165A#, 16#0FE9_39D2#, 16#49BC_AAFD#,    -- 16#88# .. 16#8F#
         16#55FF_CFE5#, 16#2EC1_F783#, 16#F39A_09A5#, 16#3EB4_2772#, 16#19B5_5A5D#, 16#024A_0679#, 16#8C83_B3F7#, 16#8642_BA1D#,    -- 16#90# .. 16#97#
         16#ACAC_D9EA#, 16#87D3_52C4#, 16#6093_1F45#, 16#A05F_97D7#, 16#1CEC_D42C#, 16#E2FC_C87B#, 16#B60F_94E2#, 16#67A3_4B0B#,    -- 16#98# .. 16#9F#

         16#FCDD_40C9#, 16#0B15_0A27#, 16#D3EE_9E04#, 16#582E_29E9#, 16#4AC2_2B41#, 16#6AC4_E1B8#, 16#BCCA_A51A#, 16#237A_F30E#,    -- 16#A0# .. 16#A7#
         16#EBC3_B709#, 16#C4A5_9D19#, 16#284B_C98A#, 16#E9D4_1A93#, 16#6BFA_2018#, 16#73B2_D651#, 16#11F9_A2FA#, 16#CE09_BFF1#,    -- 16#A8# .. 16#AF#
         16#41A4_70AA#, 16#2588_8F22#, 16#77E7_54E8#, 16#F733_0D8E#, 16#158E_AB16#, 16#C5D6_8842#, 16#C685_A6F6#, 16#E5B8_2FDE#,    -- 16#B0# .. 16#B7#
         16#09EA_3A96#, 16#6DDE_1536#, 16#4FA9_19DA#, 16#26C0_BE9F#, 16#9EED_6F69#, 16#F055_55F2#, 16#E06F_C285#, 16#9CD7_6D23#,    -- 16#B8# .. 16#BF#

         16#AF45_2A92#, 16#EFC7_4CB7#, 16#9D6B_4732#, 16#8BE4_08EE#, 16#2240_1D0D#, 16#EE6C_459D#, 16#7587_CB82#, 16#E874_6862#,    -- 16#C0# .. 16#C7#
         16#5CBD_DE87#, 16#9879_4278#, 16#31AF_B94D#, 16#C11E_0F2F#, 16#30E8_FC2A#, 16#CF32_61EF#, 16#1A30_23E1#, 16#AA2F_86CF#,    -- 16#C8# .. 16#CF#
         16#F202_E24A#, 16#8D08_DCFF#, 16#7648_37C6#, 16#A263_74CC#, 16#9F7C_3E88#, 16#949C_C57D#, 16#DD26_A07F#, 16#C39E_FAB0#,    -- 16#D0# .. 16#D7#
         16#C8F8_79A1#, 16#DCE6_7BB9#, 16#F4B0_A435#, 16#912C_9AE0#, 16#D856_03E4#, 16#953A_9BBF#, 16#FB82_90D6#, 16#0AEB_CD5F#,    -- 16#D8# .. 16#DF#

         16#1620_6A9A#, 16#6C78_7A14#, 16#D9A0_F16A#, 16#29BF_4F74#, 16#8F8B_CE91#, 16#0E5A_9354#, 16#AB03_8CB1#, 16#1B8A_D11B#,    -- 16#E0# .. 16#E7#
         16#E327_FF49#, 16#0053_DA20#, 16#90CF_51DC#, 16#DA92_FE6D#, 16#0390_CA47#, 16#A895_8097#, 16#A9DC_5BAF#, 16#3931_E3C1#,    -- 16#E8# .. 16#EF#
         16#8404_46B6#, 16#63D0_69FB#, 16#D746_0299#, 16#7124_ECD1#, 16#0791_E613#, 16#4859_18FC#, 16#D635_D04C#, 16#DF96_AC33#,    -- 16#F0# .. 16#F7#
         16#66F2_D303#, 16#2470_56AE#, 16#A1A7_B2A8#, 16#27D8_CC9C#, 16#17B6_E998#, 16#7BF5_590F#, 16#FE97_F557#, 16#5471_D8A2#     -- 16#F8# .. 16#FF#
      ),
      (  -- S_Box:  7
         16#83A3_27A1#, 16#9F37_9F51#, 16#40A7_D007#, 16#1130_7423#, 16#2245_87C1#, 16#AC27_D63B#, 16#3B7E_64EA#, 16#2E1C_BFA6#,    -- 16#00# .. 16#07#
         16#0999_6000#, 16#03BC_0E2C#, 16#D4C4_478A#, 16#4542_E0AB#, 16#FEDA_26D4#, 16#C1D1_0FCB#, 16#8252_F596#, 16#4494_EB5C#,    -- 16#08# .. 16#0F#
         16#A362_F314#, 16#F5BA_81FD#, 16#75C3_A376#, 16#4CA2_14CA#, 16#E164_DEDD#, 16#5088_FA97#, 16#4B09_30E0#, 16#2FCF_B7E8#,    -- 16#10# .. 16#17#
         16#33A6_F4B2#, 16#C7E9_4211#, 16#2D66_C774#, 16#43BE_8BAE#, 16#C663_D445#, 16#908E_B130#, 16#F4E3_BE15#, 16#63B9_D566#,    -- 16#18# .. 16#1F#

         16#5293_96B5#, 16#1E1B_E743#, 16#4D5F_F63F#, 16#985E_4A83#, 16#71AB_9DF7#, 16#C516_C6F5#, 16#85C1_9AB4#, 16#1F4D_AEE4#,    -- 16#20# .. 16#27#
         16#F297_3431#, 16#B713_DC5E#, 16#3F2E_159A#, 16#C824_DA16#, 16#06BF_376A#, 16#B2FE_23EC#, 16#E39B_1C22#, 16#F1EE_CB5F#,    -- 16#28# .. 16#2F#
         16#08E8_2D52#, 16#5656_86C2#, 16#AB0A_EA93#, 16#FD47_219F#, 16#EBDB_ABD7#, 16#2404_A185#, 16#8C73_12B9#, 16#A8F2_D828#,    -- 16#30# .. 16#37#
         16#0C89_02DA#, 16#65B4_2B63#, 16#C0BB_EF62#, 16#4E3E_4CEF#, 16#788F_8018#, 16#EE1E_BAB7#, 16#9392_8F9D#, 16#683D_2903#,    -- 16#38# .. 16#3F#

         16#D3B6_0689#, 16#AFCB_0DDC#, 16#88A4_C47A#, 16#F6DD_9C3D#, 16#7EA5_FCA0#, 16#8A6D_7244#, 16#BE11_F120#, 16#04FF_91B8#,    -- 16#40# .. 16#47#
         16#8D2D_C8C0#, 16#27F9_7FDB#, 16#7F9E_1F47#, 16#1734_F0C7#, 16#26F3_ED8E#, 16#0DF8_F2BF#, 16#B083_3D9E#, 16#E420_A4E5#,    -- 16#48# .. 16#4F#
         16#A423_CAE6#, 16#9561_6772#, 16#9AE6_C049#, 16#0759_41F2#, 16#D8E1_2812#, 16#000F_6F4F#, 16#3C0D_6B05#, 16#6CEF_921C#,    -- 16#50# .. 16#57#
         16#B82B_C264#, 16#396C_B008#, 16#5D60_8A6F#, 16#6D77_82C8#, 16#1865_50AA#, 16#6B6F_EC09#, 16#28E7_0B13#, 16#57CE_5688#,    -- 16#58# .. 16#5F#

         16#ECD3_AF84#, 16#2333_5A95#, 16#91F4_0CD2#, 16#7B6A_3B26#, 16#BD32_B3B6#, 16#3754_A6FB#, 16#8ED0_88F0#, 16#F867_E87C#,    -- 16#60# .. 16#67#
         16#2085_1746#, 16#6410_F9C6#, 16#3538_0442#, 16#C2CA_10A7#, 16#1ADE_A27F#, 16#76BD_DD79#, 16#9274_2CF4#, 16#0E98_F7EE#,    -- 16#68# .. 16#6F#
         16#164E_931D#, 16#B9C8_35B3#, 16#6906_0A99#, 16#B44C_531E#, 16#FA7B_66FE#, 16#C98A_5B53#, 16#7D95_AAE9#, 16#302F_467B#,    -- 16#70# .. 16#77#
         16#74B8_11DE#, 16#F386_6ABD#, 16#B5B3_D32D#, 16#FC31_57A4#, 16#D251_FE19#, 16#0B5D_8EAC#, 16#DA71_FFD5#, 16#47EA_05A3#,    -- 16#78# .. 16#7F#

         16#05C6_A9E1#, 16#CA0E_E958#, 16#9939_034D#, 16#25DC_5EDF#, 16#7908_3CB1#, 16#8676_8450#, 16#CF75_7D6D#, 16#5972_B6BC#,    -- 16#80# .. 16#87#
         16#A78D_59C9#, 16#C4AD_8D41#, 16#2A36_2AD3#, 16#D117_9991#, 16#6014_07FF#, 16#DCF5_0917#, 16#5870_69D0#, 16#E082_1ED6#,    -- 16#88# .. 16#8F#
         16#DBB5_9427#, 16#7391_1A4B#, 16#7C90_4FC3#, 16#844A_FB92#, 16#6F8C_955D#, 16#E8C0_C5BB#, 16#B67A_B987#, 16#A529_D96C#,    -- 16#90# .. 16#97#
         16#F91F_7181#, 16#618B_1B06#, 16#E718_BB0C#, 16#8BD7_615B#, 16#D5A9_3A59#, 16#54AE_F81B#, 16#7721_36E3#, 16#CE44_FD9C#,    -- 16#98# .. 16#9F#

         16#10CD_A57E#, 16#87D6_6E0B#, 16#3D79_8967#, 16#1B2C_1804#, 16#3EDF_BD68#, 16#15F6_E62B#, 16#EF68_B854#, 16#3896_DB35#,    -- 16#A0# .. 16#A7#
         16#12B7_B5E2#, 16#CB48_9029#, 16#9E4F_98A5#, 16#62EB_77A8#, 16#217C_24A2#, 16#9641_52F6#, 16#49B2_080A#, 16#53D2_3EE7#,    -- 16#A8# .. 16#AF#
         16#48FB_6D69#, 16#1903_D190#, 16#9449_E494#, 16#BF6E_7886#, 16#FB35_6CFA#, 16#3A26_1365#, 16#424B_C1EB#, 16#A119_2570#,    -- 16#B0# .. 16#B7#
         16#019C_A782#, 16#9D3F_7E0E#, 16#9C12_7575#, 16#EDF0_2039#, 16#AD57_BCCE#, 16#5C15_3277#, 16#81A8_4540#, 16#BCAA_7356#,    -- 16#B8# .. 16#BF#

         16#CCD5_9B60#, 16#A62A_629B#, 16#A25C_CD10#, 16#2B5B_65CF#, 16#1C53_5832#, 16#55FD_4E3A#, 16#31D9_790D#, 16#F06B_C37D#,    -- 16#C0# .. 16#C7#
         16#4AFC_1D71#, 16#AEED_5533#, 16#BA46_1634#, 16#BB69_4B78#, 16#5F3A_5C73#, 16#6A3C_764A#, 16#8FB0_CCA9#, 16#F725_684C#,    -- 16#C8# .. 16#CF#
         16#4FE5_382F#, 16#1D01_63AF#, 16#5AA0_7A8F#, 16#E205_A8ED#, 16#C30B_AD38#, 16#FF22_CF1F#, 16#7243_2E2E#, 16#32C2_518B#,    -- 16#D0# .. 16#D7#
         16#3487_CE4E#, 16#7AE0_AC02#, 16#709F_A098#, 16#0A3B_395A#, 16#5B40_43F8#, 16#A9E4_8C36#, 16#149A_8521#, 16#D07D_EE6B#,    -- 16#D8# .. 16#DF#

         16#46AC_D2F3#, 16#8958_DFFC#, 16#B3A1_223C#, 16#B11D_31C4#, 16#CD7F_4D3E#, 16#0F28_E3AD#, 16#E5B1_00BE#, 16#AAC5_4824#,    -- 16#E0# .. 16#E7#
         16#E9C9_D7BA#, 16#9BD4_7001#, 16#80F1_49B0#, 16#6602_2F0F#, 16#020C_4048#, 16#6EFA_192A#, 16#6707_3F8D#, 16#13EC_7BF9#,    -- 16#E8# .. 16#EF#
         16#3655_011A#, 16#E6AF_E157#, 16#D984_5F6E#, 16#DECC_4425#, 16#511A_E2CC#, 16#DF81_B4D8#, 16#D780_9E55#, 16#D6D8_83D9#,    -- 16#F0# .. 16#F7#
         16#2CC7_978C#, 16#5E78_7CC5#, 16#DD00_33D1#, 16#A050_C937#, 16#97F7_5DCD#, 16#299D_E580#, 16#41E2_B261#, 16#EA5A_54F1#     -- 16#F8# .. 16#FF#
      ),
      (  -- S_Box:  8
         16#7E67_2590#, 16#BEA5_13BB#, 16#2C90_6FE6#, 16#8602_9C2B#, 16#55DC_4F74#, 16#0553_398E#, 16#63E0_9647#, 16#CAFD_0BAB#,    -- 16#00# .. 16#07#
         16#264C_37DF#, 16#8272_210F#, 16#67AF_A669#, 16#12D9_8A5F#, 16#8CAB_23C4#, 16#75C6_8BD1#, 16#C337_0470#, 16#33F3_7F4E#,    -- 16#08# .. 16#0F#
         16#2839_92FF#, 16#E73A_3A67#, 16#1032_F283#, 16#F5AD_9FC2#, 16#963F_0C5D#, 16#664F_BC45#, 16#202B_A41C#, 16#C7C0_2D80#,    -- 16#10# .. 16#17#
         16#5473_1E84#, 16#8A10_85F5#, 16#601D_80FB#, 16#2F96_8E55#, 16#35E9_6812#, 16#E45A_8F78#, 16#BD7D_E662#, 16#3B6E_6EAD#,    -- 16#18# .. 16#1F#

         16#8097_C5EF#, 16#070B_6781#, 16#B1E5_08F3#, 16#24E4_FAE3#, 16#B81A_7805#, 16#EC0F_C918#, 16#43C8_774B#, 16#9B25_12A9#,    -- 16#20# .. 16#27#
         16#2B05_AD04#, 16#32C2_536F#, 16#EDF2_36E0#, 16#8BC4_B0CF#, 16#BACE_B837#, 16#4535_B289#, 16#0D0E_94C3#, 16#A5A3_71D0#,    -- 16#28# .. 16#2F#
         16#AD69_5A58#, 16#39E3_437D#, 16#9186_BFFC#, 16#2103_8C3B#, 16#0AA9_DFF9#, 16#5D1F_06CE#, 16#62DE_F8A4#, 16#F740_A2B4#,    -- 16#30# .. 16#37#
         16#A257_5868#, 16#6826_83C1#, 16#DBB3_0FAC#, 16#61FE_1928#, 16#468A_6511#, 16#C61C_D5F4#, 16#E54D_9800#, 16#6B98_D7F7#,    -- 16#38# .. 16#3F#

         16#8418_B6A5#, 16#5F09_A5D2#, 16#90B4_E80B#, 16#49B2_C852#, 16#69F1_1C77#, 16#1741_2B7E#, 16#7F6F_C0ED#, 16#5683_8DCC#,    -- 16#40# .. 16#47#
         16#6E95_46A2#, 16#D075_8619#, 16#087B_9B9A#, 16#D231_A01D#, 16#AF46_D415#, 16#0970_60FD#, 16#D920_F657#, 16#882D_3F9F#,    -- 16#48# .. 16#4F#
         16#3AE7_C3C9#, 16#E8A0_0D9B#, 16#4FE6_7EBE#, 16#2EF8_0EB2#, 16#C191_6B0C#, 16#F4DF_FEA0#, 16#B97E_B3EB#, 16#FDFF_84DD#,    -- 16#50# .. 16#57#
         16#FF8B_14F1#, 16#E96B_0572#, 16#F64B_508C#, 16#AE22_0A6E#, 16#4423_AE5A#, 16#C2BE_CE5E#, 16#DE27_567C#, 16#FC93_5C63#,    -- 16#58# .. 16#5F#

         16#4707_5573#, 16#E65B_27F0#, 16#E121_FD22#, 16#F266_8753#, 16#2DEB_F5D7#, 16#8347_E08D#, 16#AC5E_DA03#, 16#2A7C_EBE9#,    -- 16#60# .. 16#67#
         16#3FE8_D92E#, 16#2354_2FE4#, 16#1FA7_BD50#, 16#CF9B_4102#, 16#9D0D_BA39#, 16#9CB8_902A#, 16#A724_9D8B#, 16#0F6D_667A#,    -- 16#68# .. 16#6F#
         16#5EBF_A9EC#, 16#6A59_4DF2#, 16#7960_0938#, 16#023B_7591#, 16#EA2C_79C8#, 16#C99D_07EA#, 16#64CB_5EE1#, 16#1A9C_AB3D#,    -- 16#70# .. 16#77#
         16#76DB_9527#, 16#C08E_012F#, 16#3DFB_481A#, 16#872F_22E7#, 16#2948_D15C#, 16#A478_2C79#, 16#6F50_D232#, 16#78F0_728A#,    -- 16#78# .. 16#7F#

         16#5A87_AAB1#, 16#C4E2_C19C#, 16#EE76_7387#, 16#1B2A_1864#, 16#7B8D_10D3#, 16#D171_3161#, 16#0EEA_C456#, 16#D879_9E06#,    -- 16#80# .. 16#87#
         16#B645_B548#, 16#4043_CB65#, 16#A874_FB29#, 16#4B12_D030#, 16#7D68_7413#, 16#18EF_9A1F#, 16#D763_1D4C#, 16#5829_C7DA#,    -- 16#88# .. 16#8F#
         16#CDFA_30FA#, 16#C508_4BB0#, 16#92CD_20E2#, 16#D4C1_6940#, 16#0328_3EC0#, 16#A917_813F#, 16#9A58_7D01#, 16#7004_1F8F#,    -- 16#90# .. 16#97#
         16#DC6A_B1DC#, 16#DDAE_E3D5#, 16#3182_9742#, 16#198C_022D#, 16#1C9E_AFCB#, 16#5BBC_6C49#, 16#D3D3_293A#, 16#16D5_0007#,    -- 16#98# .. 16#9F#

         16#04BB_8820#, 16#3C5C_2A41#, 16#37EE_7AF8#, 16#8EB0_4025#, 16#9313_ECBA#, 16#BFFC_4799#, 16#8955_A744#, 16#EF85_D633#,    -- 16#A0# .. 16#A7#
         16#5044_99A7#, 16#A6CA_6A86#, 16#BB3D_3297#, 16#B34A_8236#, 16#6DCC_BE4F#, 16#0614_3394#, 16#CE19_FC7B#, 16#CCC3_C6C6#,    -- 16#A8# .. 16#AF#
         16#E362_54AE#, 16#77B7_EDA1#, 16#A133_DD9E#, 16#EBF9_356A#, 16#513C_CF88#, 16#E2A1_B417#, 16#972E_E5BD#, 16#8538_24CD#,    -- 16#B0# .. 16#B7#
         16#5752_F4EE#, 16#6C11_42E8#, 16#3EA4_F309#, 16#B2B5_934A#, 16#DFD6_28AA#, 16#59AC_EA3E#, 16#A01E_B92C#, 16#3899_64BC#,    -- 16#B8# .. 16#BF#

         16#DA30_5DD4#, 16#019A_59B7#, 16#11D2_CA93#, 16#FAA6_D3B9#, 16#4E77_2ECA#, 16#7265_1776#, 16#FB4E_5B0E#, 16#A38F_91A8#,    -- 16#C0# .. 16#C7#
         16#1D06_63B5#, 16#30F4_F192#, 16#B500_51B6#, 16#B716_CCB3#, 16#4ABD_1B59#, 16#146C_5F26#, 16#F134_E2DE#, 16#00F6_7C6C#,    -- 16#C8# .. 16#CF#
         16#B0E1_B795#, 16#98AA_4EC7#, 16#0CC7_3B34#, 16#6542_76A3#, 16#8D1B_A871#, 16#740A_5216#, 16#E0D0_1A23#, 16#9ED1_61D6#,    -- 16#D0# .. 16#D7#
         16#9F36_A324#, 16#993E_BB7F#, 16#FEB9_491B#, 16#365D_DCDB#, 16#810C_FFC5#, 16#71EC_0382#, 16#2249_E7BF#, 16#4881_7046#,    -- 16#D8# .. 16#DF#

         16#F3A2_4A5B#, 16#4288_E4D9#, 16#0BF5_C243#, 16#257F_E151#, 16#95B6_4C0D#, 16#4164_F066#, 16#AAF7_DB08#, 16#73B1_119D#,    -- 16#E0# .. 16#E7#
         16#8F9F_7BB8#, 16#D684_4596#, 16#F07A_34A6#, 16#5394_3D0A#, 16#F9DD_166D#, 16#7A89_57AF#, 16#F8BA_3CE5#, 16#27C9_621E#,    -- 16#E8# .. 16#EF#
         16#5CDA_E910#, 16#C851_8998#, 16#9415_38FE#, 16#1361_15D8#, 16#ABA8_443C#, 16#4D01_F931#, 16#34ED_F760#, 16#B45F_266B#,    -- 16#F0# .. 16#F7#
         16#D5D4_DE14#, 16#52D8_AC35#, 16#15CF_D885#, 16#CBC5_CD21#, 16#4CD7_6D4D#, 16#7C80_EF54#, 16#BC92_EE75#, 16#1E56_A1F6#     -- 16#F8# .. 16#FF#
      ),
      (  -- S_Box:  9
         16#BAA2_0B6C#, 16#9FFB_AD26#, 16#E1F7_D738#, 16#794A_EC8D#, 16#C9E9_CF3C#, 16#8A9A_7846#, 16#C57C_4685#, 16#B9A9_2FED#,    -- 16#00# .. 16#07#
         16#29CB_141F#, 16#52F9_DDB7#, 16#F68B_A6BC#, 16#19CC_C020#, 16#4F58_4AAA#, 16#3BF6_A596#, 16#003B_7CF7#, 16#54F0_CE9A#,    -- 16#08# .. 16#0F#
         16#A7EC_4303#, 16#46CF_0077#, 16#78D3_3AA1#, 16#2152_47D9#, 16#74BC_DF91#, 16#0838_1D30#, 16#DAC4_3E40#, 16#6487_2531#,    -- 16#10# .. 16#17#
         16#0BEF_FE5F#, 16#B317_F457#, 16#AEBB_12DA#, 16#D5D0_D67B#, 16#7D75_C6B4#, 16#42A6_D241#, 16#1502_D0A9#, 16#3FD9_7FFF#,    -- 16#18# .. 16#1F#

         16#C6C3_ED28#, 16#8186_8D0A#, 16#9262_8BC5#, 16#8667_9544#, 16#FD18_67AF#, 16#5CA3_EA61#, 16#568D_5578#, 16#4A2D_71F4#,    -- 16#20# .. 16#27#
         16#43C9_D549#, 16#8D95_DE2B#, 16#6E5C_74A0#, 16#9120_FFC7#, 16#0D05_D14A#, 16#A930_49D3#, 16#BFA8_0E17#, 16#F409_6810#,    -- 16#28# .. 16#2F#
         16#043F_5EF5#, 16#A673_B4F1#, 16#6D78_0298#, 16#A484_7783#, 16#5EE7_26FB#, 16#9934_C281#, 16#220A_588C#, 16#384E_240F#,    -- 16#30# .. 16#37#
         16#933D_5C69#, 16#39E5_EF47#, 16#26E8_B8F3#, 16#4C1C_6212#, 16#8040_F75D#, 16#074B_7093#, 16#6625_A8D7#, 16#3629_8945#,    -- 16#38# .. 16#3F#

         16#7628_5088#, 16#651D_37C3#, 16#24F5_274D#, 16#DBCA_3DAB#, 16#186B_7EE1#, 16#D80F_8182#, 16#1421_0C89#, 16#943A_3075#,    -- 16#40# .. 16#47#
         16#4E6E_11C4#, 16#4D7E_6BAD#, 16#F050_64C8#, 16#025D_CD97#, 16#4BC1_0302#, 16#7CED_E572#, 16#8F90_A970#, 16#AB88_EEBA#,    -- 16#48# .. 16#4F#
         16#B599_8029#, 16#5124_D839#, 16#B0EE_B6A3#, 16#89DD_ABDC#, 16#E807_4D76#, 16#A146_5223#, 16#3251_8CF2#, 16#9D39_D4EB#,    -- 16#50# .. 16#57#
         16#C0D8_4524#, 16#E35E_6EA8#, 16#7ABF_3804#, 16#113E_2348#, 16#9AE6_069D#, 16#B4DF_DABB#, 16#A8C5_313F#, 16#23EA_3F79#,    -- 16#58# .. 16#5F#

         16#530E_36A2#, 16#A5FD_228B#, 16#95D1_D350#, 16#2B14_CC09#, 16#4004_2956#, 16#879D_05CC#, 16#2064_B9CA#, 16#ACAC_A40E#,    -- 16#60# .. 16#67#
         16#B29C_846E#, 16#9676_C9E3#, 16#752B_7B8A#, 16#7BE2_BCC2#, 16#6BD5_8F5E#, 16#D48F_4C32#, 16#6068_35E4#, 16#9CD7_C364#,    -- 16#68# .. 16#6F#
         16#2C26_9B7A#, 16#3A0D_079C#, 16#73B6_83FE#, 16#4537_4F1E#, 16#10AF_A242#, 16#577F_8666#, 16#DDAA_10F6#, 16#F34F_561C#,    -- 16#70# .. 16#77#
         16#3D35_5D6B#, 16#E470_48AE#, 16#AA13_C492#, 16#0503_44FD#, 16#2AAB_5151#, 16#F5B2_6AE5#, 16#ED91_9A59#, 16#5AC6_7900#,    -- 16#78# .. 16#7F#

         16#F1CD_E380#, 16#0C79_A11B#, 16#3515_33FC#, 16#CD4D_8E36#, 16#1F85_6005#, 16#690B_9FDD#, 16#E736_DCCF#, 16#1D47_BF6A#,    -- 16#80# .. 16#87#
         16#7F66_C72A#, 16#85F2_1B7F#, 16#983C_BDB6#, 16#01EB_BEBF#, 16#035F_3B99#, 16#EB11_1F34#, 16#28CE_FDC6#, 16#5BFC_9ECD#,    -- 16#88# .. 16#8F#
         16#F22E_ACB0#, 16#9E41_CBB2#, 16#E0F8_327C#, 16#82E3_E26F#, 16#FC43_FC86#, 16#D0BA_66DF#, 16#489E_F2A7#, 16#D9E0_C81D#,    -- 16#90# .. 16#97#
         16#6869_0D52#, 16#CC45_1367#, 16#C223_2E16#, 16#E95A_7335#, 16#0FDA_E19B#, 16#FF5B_962C#, 16#9759_6527#, 16#C46D_B333#,    -- 16#98# .. 16#9F#

         16#3ED4_C562#, 16#C14C_9D9E#, 16#5D6F_AA21#, 16#638E_940D#, 16#F931_6D58#, 16#47B3_B0EA#, 16#30FF_CAD2#, 16#CE1B_BA7D#,    -- 16#A0# .. 16#A7#
         16#1E61_08E6#, 16#2E1E_A33D#, 16#507B_F05B#, 16#FAFE_F94B#, 16#D17D_E8E2#, 16#5598_B214#, 16#1663_F813#, 16#17D2_5A2D#,    -- 16#A8# .. 16#AF#
         16#EEFA_5FF9#, 16#582F_4E37#, 16#1212_8773#, 16#FEF1_7AB8#, 16#0600_5322#, 16#BB32_BBC9#, 16#8C89_8508#, 16#592C_15F0#,    -- 16#B0# .. 16#B7#
         16#D38A_4054#, 16#4957_B7D6#, 16#D2B8_91DB#, 16#37BD_2D3E#, 16#34AD_20CB#, 16#6222_88E9#, 16#2DC7_345A#, 16#AFB4_16C0#,    -- 16#B8# .. 16#BF#

         16#1CF4_59B1#, 16#DC77_39FA#, 16#0A71_1A25#, 16#13E1_8A0C#, 16#5F72_AF4C#, 16#6AC8_DB11#, 16#BE53_C18E#, 16#1AA5_69B9#,    -- 16#C0# .. 16#C7#
         16#EF55_1EA4#, 16#A02A_429F#, 16#BD16_E790#, 16#7EB9_171A#, 16#77D6_93D8#, 16#8E06_993A#, 16#9BDE_7560#, 16#E580_1987#,    -- 16#C8# .. 16#CF#
         16#C37A_09BE#, 16#B8DB_76AC#, 16#E208_7294#, 16#6C81_616D#, 16#B7F3_0FE7#, 16#BC9B_82BD#, 16#FBA4_E4D4#, 16#C7B1_012F#,    -- 16#D0# .. 16#D7#
         16#A20C_043B#, 16#DE9F_EBD0#, 16#2F92_97CE#, 16#E610_AEF8#, 16#70B0_6F19#, 16#C86A_E00B#, 16#0E01_988F#, 16#4119_2AE0#,    -- 16#D8# .. 16#DF#

         16#448C_1CB5#, 16#ADBE_92EE#, 16#7293_A007#, 16#1B54_B5B3#, 16#D61F_63D1#, 16#EAE4_0A74#, 16#61A7_2B55#, 16#EC83_A7D5#,    -- 16#E0# .. 16#E7#
         16#8894_2806#, 16#90A0_7DA5#, 16#D742_4B95#, 16#6774_5B4E#, 16#A31A_1853#, 16#CA60_21EF#, 16#DFB5_6C4F#, 16#CBC2_D915#,    -- 16#E8# .. 16#EF#
         16#3C48_E918#, 16#8BAE_3C63#, 16#6F65_9C71#, 16#F8B7_54C1#, 16#2782_F3DE#, 16#F796_F168#, 16#7149_2C84#, 16#33C0_F5A6#,    -- 16#F0# .. 16#F7#
         16#3144_F6EC#, 16#25DC_412E#, 16#B16C_5743#, 16#83A1_FA7E#, 16#0997_B101#, 16#B627_E6E8#, 16#CF33_905C#, 16#8456_FB65#     -- 16#F8# .. 16#FF#
      ),
      (  -- S_Box: 10
         16#B29B_EA74#, 16#C35D_A605#, 16#305C_1CA3#, 16#D2E9_F5BC#, 16#6FD5_BFF4#, 16#FF34_7703#, 16#FC45_B163#, 16#F498_E068#,    -- 16#00# .. 16#07#
         16#B712_29FC#, 16#81AC_C3FB#, 16#7853_8A8B#, 16#984E_CF81#, 16#A5DA_47A4#, 16#8F25_9EEF#, 16#6475_DC65#, 16#0818_65B9#,    -- 16#08# .. 16#0F#
         16#49E1_4A3C#, 16#19E6_6079#, 16#D382_E91B#, 16#5B10_9794#, 16#3F9F_81E1#, 16#4470_A388#, 16#4160_1ABE#, 16#AAF9_F407#,    -- 16#10# .. 16#17#
         16#8E17_5EF6#, 16#ED84_2297#, 16#893A_4271#, 16#1790_839A#, 16#D566_A99E#, 16#6B41_7DEE#, 16#75C9_0D23#, 16#715E_DB31#,    -- 16#18# .. 16#1F#

         16#7235_53F7#, 16#9AFB_50C9#, 16#FBC5_F600#, 16#CD3B_6A4E#, 16#97ED_0FBA#, 16#2968_9AEC#, 16#6313_5C8E#, 16#F0E2_6C7E#,    -- 16#20# .. 16#27#
         16#0692_AE7F#, 16#DBB2_08FF#, 16#2EDE_3E9B#, 16#6A65_BEBD#, 16#D408_67E9#, 16#C954_AFC5#, 16#73B0_8201#, 16#7FFD_F809#,    -- 16#28# .. 16#2F#
         16#1195_C24F#, 16#1CA5_ADCA#, 16#74BD_6D1F#, 16#B393_C455#, 16#CADF_D3FA#, 16#99F1_3011#, 16#0EBC_A813#, 16#60E7_91B8#,    -- 16#30# .. 16#37#
         16#6597_AC7A#, 16#18A7_E46B#, 16#09CB_49D3#, 16#0B27_DF6D#, 16#CFE5_2F87#, 16#CEF6_6837#, 16#E632_8035#, 16#FA87_C592#,    -- 16#38# .. 16#3F#

         16#37BA_FF93#, 16#D71F_CC99#, 16#DCAB_205C#, 16#4D7A_5638#, 16#4801_2510#, 16#6279_7558#, 16#B6CF_1FE5#, 16#BC31_1834#,    -- 16#40# .. 16#47#
         16#9C23_73AC#, 16#14EC_6175#, 16#A439_CBDF#, 16#54AF_B0EA#, 16#D686_960B#, 16#FDD0_D47B#, 16#7B06_3902#, 16#8B78_BAC3#,    -- 16#48# .. 16#4F#
         16#26C6_A4D5#, 16#5C00_55B6#, 16#2376_102E#, 16#0411_783E#, 16#2AA3_F1CD#, 16#51FC_6EA8#, 16#701C_E243#, 16#9B2A_0ABB#,    -- 16#50# .. 16#57#
         16#0AD9_3733#, 16#6E80_D03D#, 16#AF62_95D1#, 16#F629_896F#, 16#A30B_0648#, 16#463D_8DD4#, 16#963F_84CB#, 16#01FF_94F8#,    -- 16#58# .. 16#5F#

         16#8D7F_EFDC#, 16#5536_11C0#, 16#A97C_1719#, 16#B96A_F759#, 16#E0E3_C95E#, 16#0528_335B#, 16#21FE_5925#, 16#821A_5245#,    -- 16#60# .. 16#67#
         16#8072_38B1#, 16#67F2_3DB5#, 16#EA6B_4EAB#, 16#0DA6_F985#, 16#AB1B_C85A#, 16#EF8C_90E4#, 16#4526_230E#, 16#38EB_8B1C#,    -- 16#68# .. 16#6F#
         16#1B91_CD91#, 16#9FCE_5F0C#, 16#F72C_C72B#, 16#C64F_2617#, 16#DAF7_857D#, 16#7D37_3CF1#, 16#28EA_EDD7#, 16#2038_87D0#,    -- 16#70# .. 16#77#
         16#C49A_155F#, 16#A251_B3B0#, 16#F2D4_7AE3#, 16#3D9E_F267#, 16#4A94_AB2F#, 16#7755_A222#, 16#0205_E329#, 16#C28F_A7A7#,    -- 16#78# .. 16#7F#

         16#AEC1_FE51#, 16#270F_164C#, 16#8C6D_01BF#, 16#53B5_BC98#, 16#C09D_3FEB#, 16#8349_86CC#, 16#4309_A12C#, 16#578B_2A96#,    -- 16#80# .. 16#87#
         16#3BB7_4B86#, 16#6956_1B4A#, 16#037E_32F3#, 16#DE33_5B08#, 16#C515_6BE0#, 16#E7EF_09AD#, 16#93B8_34C7#, 16#A771_9352#,    -- 16#88# .. 16#8F#
         16#5930_2821#, 16#E352_9D26#, 16#F961_DA76#, 16#CB14_2C44#, 16#A0F3_B98D#, 16#7650_2457#, 16#945A_414B#, 16#078E_EB12#,    -- 16#90# .. 16#97#
         16#DFF8_DE69#, 16#EB6C_8C2D#, 16#BDA9_0C4D#, 16#E9C4_4D16#, 16#168D_FD66#, 16#AD64_763B#, 16#A65F_D764#, 16#95A2_9C06#,    -- 16#98# .. 16#9F#

         16#32D7_713F#, 16#40F0_B277#, 16#224A_F08F#, 16#004C_B5E8#, 16#9257_4814#, 16#8877_D827#, 16#3E5B_2D04#, 16#68C2_D5F2#,    -- 16#A0# .. 16#A7#
         16#8696_6273#, 16#1D43_3ADA#, 16#8774_988A#, 16#3C0E_0BFE#, 16#DDAD_581D#, 16#2FD6_54ED#, 16#0F47_69FD#, 16#C181_EE9D#,    -- 16#A8# .. 16#AF#
         16#5FD8_8F61#, 16#341D_BB3A#, 16#5285_43F9#, 16#D922_35CF#, 16#1EA8_2EB4#, 16#B5CD_790F#, 16#91D2_4F1E#, 16#A869_E6C2#,    -- 16#B0# .. 16#B7#
         16#61F4_74D2#, 16#CC20_5ADD#, 16#0C7B_FBA9#, 16#BF2B_0489#, 16#B02D_72D8#, 16#2B46_ECE6#, 16#E4DC_D90A#, 16#B8A1_1440#,    -- 16#B8# .. 16#BF#

         16#EE8A_63B7#, 16#854D_D1A1#, 16#D1E0_0583#, 16#42B4_0E24#, 16#9E89_64DE#, 16#B4B3_5D78#, 16#BEC7_6F6E#, 16#24B9_C620#,    -- 16#C0# .. 16#C7#
         16#D8D3_99A6#, 16#5ADB_2190#, 16#2DB1_2730#, 16#3A58_66AF#, 16#58C8_FADB#, 16#5D88_44E7#, 16#8A4B_F380#, 16#15A0_1D70#,    -- 16#C8# .. 16#CF#
         16#79F5_C028#, 16#66BE_3B8C#, 16#F3E4_2B53#, 16#5699_0039#, 16#2C0C_3182#, 16#5E16_407C#, 16#ECC0_4515#, 16#6C44_0284#,    -- 16#D0# .. 16#D7#
         16#4CB6_701A#, 16#13BF_C142#, 16#9D03_9F6A#, 16#4F6E_92C8#, 16#A140_7C62#, 16#8483_A095#, 16#C70A_E1C4#, 16#E202_13A2#,    -- 16#D8# .. 16#DF#

         16#BACA_FC41#, 16#4ECC_12B3#, 16#4BEE_3646#, 16#1FE8_07AE#, 16#2521_7F9C#, 16#35DD_E5F5#, 16#7A7D_D6CE#, 16#F89C_CE50#,    -- 16#E0# .. 16#E7#
         16#AC07_B718#, 16#7E73_D2C6#, 16#E563_E76C#, 16#123C_A536#, 16#3948_CA56#, 16#9019_DD49#, 16#10AA_88D9#, 16#C824_51E2#,    -- 16#E8# .. 16#EF#
         16#473E_B6D6#, 16#506F_E854#, 16#E8BB_03A5#, 16#332F_4C32#, 16#FE1E_1E72#, 16#B1AE_572A#, 16#7C0D_7BC1#, 16#E1C3_7EB2#,    -- 16#F0# .. 16#F7#
         16#F542_AA60#, 16#F1A4_8EA0#, 16#D067_B89F#, 16#BBFA_195D#, 16#1A04_9B0D#, 16#3159_46AA#, 16#36D1_B447#, 16#6D2E_BDF0#     -- 16#F8# .. 16#FF#
      ),
      (  -- S_Box: 11
         16#0D18_8A6D#, 16#12CE_A0DB#, 16#7E63_740E#, 16#6A44_4821#, 16#253D_234F#, 16#6FFC_6597#, 16#94A6_BDEF#, 16#33EE_1B2F#,    -- 16#00# .. 16#07#
         16#0A6C_00C0#, 16#3AA3_36B1#, 16#5AF5_5D17#, 16#265F_B3DC#, 16#0E89_CF4D#, 16#0786_B008#, 16#C800_55B8#, 16#6B17_C3CE#,    -- 16#08# .. 16#0F#
         16#72B0_5A74#, 16#D21A_8D78#, 16#A6B7_0840#, 16#FE8E_AE77#, 16#ED69_565C#, 16#55E1_BCF4#, 16#585C_2F60#, 16#E06F_1A62#,    -- 16#10# .. 16#17#
         16#AD67_C0CD#, 16#7712_AF88#, 16#9CC2_6ACA#, 16#1888_053D#, 16#37EB_853E#, 16#9215_ABD7#, 16#DE30_ADFC#, 16#1F10_38E6#,    -- 16#18# .. 16#1F#

         16#70C5_1C8A#, 16#8D58_6C26#, 16#F72B_DD90#, 16#4DC3_CE15#, 16#68EA_EEFA#, 16#D0E9_C8B9#, 16#200F_9C44#, 16#DDD1_41BA#,    -- 16#20# .. 16#27#
         16#024B_F1D3#, 16#0F64_C9D4#, 16#C421_E9E9#, 16#9D11_C14C#, 16#9A0D_D9E4#, 16#5F92_EC19#, 16#1B98_0DF0#, 16#1DCC_4542#,    -- 16#28# .. 16#2F#
         16#B8FE_8C56#, 16#0C9C_9167#, 16#4E81_EB49#, 16#CA36_8F27#, 16#E360_3B37#, 16#EA08_ACCC#, 16#AC51_6992#, 16#C34F_513B#,    -- 16#30# .. 16#37#
         16#804D_100D#, 16#6EDC_A4C4#, 16#FC91_2939#, 16#29D2_19B0#, 16#278A_AA3C#, 16#4868_DA7D#, 16#54E8_90B7#, 16#B46D_735A#,    -- 16#38# .. 16#3F#

         16#5145_89AA#, 16#D6C6_30AF#, 16#4980_DFE8#, 16#BE3C_CC55#, 16#59D4_1202#, 16#650C_078B#, 16#AF3A_9E7B#, 16#3ED9_827A#,    -- 16#40# .. 16#47#
         16#9E79_FC6E#, 16#AADB_FBAE#, 16#C5F7_D803#, 16#3DAF_7F50#, 16#67B4_F465#, 16#7340_6E11#, 16#3931_3F8C#, 16#8A6E_6686#,    -- 16#48# .. 16#4F#
         16#D807_5F1F#, 16#D3CB_FED1#, 16#69C7_E49C#, 16#9305_81E0#, 16#E4B1_A5A8#, 16#BBC4_5472#, 16#09DD_BF58#, 16#C91D_687E#,    -- 16#50# .. 16#57#
         16#BDBF_FDA5#, 16#88C0_8735#, 16#E9E3_6BF9#, 16#DB5E_A9B6#, 16#9555_9404#, 16#08F4_32FB#, 16#E24E_A281#, 16#6466_3579#,    -- 16#58# .. 16#5F#

         16#000B_8010#, 16#7914_E7D5#, 16#32FD_0473#, 16#D1A7_F0A4#, 16#445A_B98E#, 16#EC72_993F#, 16#A29A_4D32#, 16#B773_06D8#,    -- 16#60# .. 16#67#
         16#C7C9_7CF6#, 16#7B6A_B645#, 16#F5EF_7ADF#, 16#FB2E_15F7#, 16#E747_F757#, 16#5E94_4354#, 16#234A_2669#, 16#47E4_6359#,    -- 16#68# .. 16#6F#
         16#9B9D_11A9#, 16#4076_2CED#, 16#56F1_DE98#, 16#1133_4668#, 16#890A_9A70#, 16#1A29_6113#, 16#B3BD_4AF5#, 16#163B_7548#,    -- 16#70# .. 16#77#
         16#D51B_4F84#, 16#B99B_2ABC#, 16#3CC1_DC30#, 16#A9F0_B56C#, 16#8122_72B2#, 16#0B23_3A5F#, 16#B650_DBF2#, 16#F1A0_771B#,    -- 16#78# .. 16#7F#

         16#3656_2B76#, 16#DC03_7B0F#, 16#104C_97FF#, 16#C2EC_98D2#, 16#9059_6F22#, 16#28B6_620B#, 16#DF42_B212#, 16#FDBC_4243#,    -- 16#80# .. 16#87#
         16#F3FB_175E#, 16#4A2D_8B00#, 16#E8F3_869B#, 16#30D6_9BC3#, 16#8537_14C8#, 16#A775_1D2E#, 16#31E5_6DEA#, 16#D484_0B0C#,    -- 16#88# .. 16#8F#
         16#9685_D783#, 16#068C_9333#, 16#8FBA_032C#, 16#76D7_BB47#, 16#6D0E_E22B#, 16#B546_794B#, 16#D971_B894#, 16#8B09_D253#,    -- 16#90# .. 16#97#
         16#A0AD_5761#, 16#EE77_BA06#, 16#4635_9F31#, 16#577C_C7EC#, 16#5282_5EFD#, 16#A4BE_ED95#, 16#9825_C52A#, 16#EB48_029A#,    -- 16#98# .. 16#9F#

         16#BAAE_59F8#, 16#CF49_0EE1#, 16#BC99_0164#, 16#8CA4_9DFE#, 16#4F38_A6E7#, 16#2BA9_8389#, 16#8228_F538#, 16#199F_64AC#,    -- 16#A0# .. 16#A7#
         16#01A1_CAC5#, 16#A8B5_1641#, 16#5CE7_2D01#, 16#8E5D_F26B#, 16#60F2_8E1E#, 16#CD5B_E125#, 16#E5B3_76BF#, 16#1C8D_3116#,    -- 16#A8# .. 16#AF#
         16#7132_CBB3#, 16#CB7A_E320#, 16#C0FA_5366#, 16#D765_3E34#, 16#971C_88C2#, 16#C62C_7DD0#, 16#34D0_A3DA#, 16#868F_6709#,    -- 16#B0# .. 16#B7#
         16#7AE6_FA8F#, 16#22BB_D523#, 16#66CD_3D5B#, 16#1EF9_288D#, 16#F9CF_58C1#, 16#5B78_4E80#, 16#7439_A191#, 16#AE13_4C36#,    -- 16#B8# .. 16#BF#

         16#9116_C463#, 16#2E9E_1396#, 16#F861_1F3A#, 16#2D2F_3307#, 16#247F_37DD#, 16#C1E2_FF9D#, 16#43C8_21E5#, 16#05ED_5CAB#,    -- 16#C0# .. 16#C7#
         16#EF74_E80A#, 16#4CCA_6028#, 16#F0AC_3CBD#, 16#5D87_4B29#, 16#6C62_F6A6#, 16#4B2A_2EF3#, 16#B1AA_2087#, 16#62A5_D0A3#,    -- 16#C8# .. 16#CF#
         16#0327_221C#, 16#B096_B4C6#, 16#417E_C693#, 16#ABA8_40D6#, 16#7897_25EB#, 16#F4B9_E02D#, 16#E6E0_0975#, 16#CC04_961A#,    -- 16#D0# .. 16#D7#
         16#63F6_24BB#, 16#7FA2_1ECB#, 16#2C01_EA7F#, 16#B241_5005#, 16#2A8B_BEB5#, 16#83B2_B14E#, 16#A383_D1A7#, 16#5352_F96A#,    -- 16#D8# .. 16#DF#

         16#043E_CDAD#, 16#CE19_18A1#, 16#FA6B_E6C9#, 16#50DE_F36F#, 16#F6B8_0CE2#, 16#4543_EF7C#, 16#9953_D651#, 16#F257_955D#,    -- 16#E0# .. 16#E7#
         16#8724_4914#, 16#DA1E_0A24#, 16#FFDA_4785#, 16#14D3_27A2#, 16#3B93_C29F#, 16#8406_84B4#, 16#61AB_71A0#, 16#9F7B_784A#,    -- 16#E8# .. 16#EF#
         16#2FD5_70CF#, 16#1595_5BDE#, 16#38F8_D471#, 16#3534_A718#, 16#133F_B71D#, 16#3FD8_0F52#, 16#4290_A8BE#, 16#75FF_44C7#,    -- 16#F0# .. 16#F7#
         16#A554_E546#, 16#E102_3499#, 16#BF26_52E3#, 16#7D20_399E#, 16#A1DF_7E82#, 16#1770_92EE#, 16#217D_D3F1#, 16#7C1F_F8D9#     -- 16#F8# .. 16#FF#
      ),
      (  -- S_Box: 12
         16#1211_3F2E#, 16#BFBD_0785#, 16#F117_93FB#, 16#A5BF_F566#, 16#83C7_B0E5#, 16#72FB_316B#, 16#7552_6A9A#, 16#41E0_E612#,    -- 16#00# .. 16#07#
         16#7156_BA09#, 16#53CE_7DEE#, 16#0AA2_6881#, 16#A43E_0D7D#, 16#3DA7_3CA3#, 16#1827_61ED#, 16#BD50_77FF#, 16#56DB_4AA0#,    -- 16#08# .. 16#0F#
         16#E792_711C#, 16#F0A4_EB1D#, 16#7F87_8237#, 16#EC65_C4E8#, 16#08DC_8D43#, 16#0F8C_E142#, 16#8258_ABDA#, 16#F415_4E16#,    -- 16#10# .. 16#17#
         16#49DE_C2FD#, 16#CD8D_5705#, 16#6C2C_3A0F#, 16#5C12_BB88#, 16#EFF3_CDB6#, 16#2C89_ED8C#, 16#7BEB_A967#, 16#2A14_2157#,    -- 16#18# .. 16#1F#

         16#C6D0_836F#, 16#B4F9_7E96#, 16#6931_E969#, 16#514E_6C7C#, 16#A779_2600#, 16#0BBB_F780#, 16#5967_1BBD#, 16#0707_B676#,    -- 16#20# .. 16#27#
         16#3748_2D93#, 16#80AF_1479#, 16#3805_A60D#, 16#E1F4_CAC1#, 16#580B_3074#, 16#30B8_D6CE#, 16#05A3_04BE#, 16#D176_626D#,    -- 16#28# .. 16#2F#
         16#EBCA_97F3#, 16#BB20_1F11#, 16#6A1A_FE23#, 16#FFAA_86E4#, 16#62B4_DA49#, 16#1B66_29F5#, 16#F5D9_E092#, 16#F37F_3DD1#,    -- 16#30# .. 16#37#
         16#619B_D45B#, 16#A6EC_8E4F#, 16#29C8_0939#, 16#0C7C_0C34#, 16#9CFE_6E48#, 16#E65F_D3AC#, 16#7361_3B65#, 16#B3C6_69F9#,    -- 16#38# .. 16#3F#

         16#BE2E_8A9E#, 16#286F_9678#, 16#5797_FD13#, 16#9980_5D75#, 16#CFB6_41C5#, 16#A910_74BA#, 16#6343_AF47#, 16#6403_CB46#,    -- 16#40# .. 16#47#
         16#8894_C8DB#, 16#2663_034C#, 16#3C40_DC5E#, 16#0099_5231#, 16#9678_9AA2#, 16#2EFD_E4B9#, 16#7DC1_95E1#, 16#547D_ADD5#,    -- 16#48# .. 16#4F#
         16#06A8_EA04#, 16#F234_7A63#, 16#5E0D_C6F7#, 16#8462_DFC2#, 16#1E6B_2C3C#, 16#9BD2_75B3#, 16#91D4_19E2#, 16#BCEF_D17E#,    -- 16#50# .. 16#57#
         16#B900_3924#, 16#D07E_7320#, 16#DEF0_495C#, 16#C36A_D00E#, 16#1785_B1AB#, 16#92E2_0BCF#, 16#B139_F0E9#, 16#675B_B9A1#,    -- 16#58# .. 16#5F#

         16#AECF_A4AF#, 16#1323_76CB#, 16#E845_89D3#, 16#79A0_5456#, 16#A2F8_60BC#, 16#1AE4_F8B5#, 16#20DF_4DB4#, 16#A1E1_428B#,    -- 16#60# .. 16#67#
         16#3BF6_0A1A#, 16#27FF_7BF1#, 16#CB44_C0E7#, 16#F7F5_87C4#, 16#1F3B_9B21#, 16#9436_8F01#, 16#856E_23A4#, 16#6F93_DE3F#,    -- 16#68# .. 16#6F#
         16#773F_5BBF#, 16#8B22_056E#, 16#DF41_F654#, 16#B824_6FF4#, 16#8D57_BFF2#, 16#D571_67EA#, 16#C569_9F22#, 16#4073_4BA7#,    -- 16#70# .. 16#77#
         16#5D5C_2772#, 16#0330_20A8#, 16#E30A_7C4D#, 16#ADC4_0FD6#, 16#7635_3441#, 16#5AA5_229B#, 16#8151_6590#, 16#DA49_F14E#,    -- 16#78# .. 16#7F#

         16#4FA6_72A5#, 16#4D9F_AC5F#, 16#154B_E230#, 16#8A7A_5CC0#, 16#CE3D_2F84#, 16#CCA1_5514#, 16#5221_360C#, 16#AF0F_B81E#,    -- 16#80# .. 16#87#
         16#5BDD_5873#, 16#F682_5F8F#, 16#1113_D228#, 16#70AD_996C#, 16#9332_0051#, 16#6047_1C53#, 16#E9BA_567B#, 16#3A46_2AE3#,    -- 16#88# .. 16#8F#
         16#5F55_E72D#, 16#1D3C_5AD7#, 16#DCFC_45EC#, 16#34D8_12EF#, 16#FA96_EE1B#, 16#369D_1EF8#, 16#C9B1_A189#, 16#7C1D_3555#,    -- 16#90# .. 16#97#
         16#5084_5EDC#, 16#4BB3_1877#, 16#8764_A060#, 16#8C9A_9415#, 16#230E_1A3A#, 16#B05E_9133#, 16#242B_9E03#, 16#A3B9_9DB7#,    -- 16#98# .. 16#9F#

         16#C2D7_FB0A#, 16#3333_849D#, 16#D272_78D4#, 16#B5D3_EFA6#, 16#78AC_28AD#, 16#C7B2_C135#, 16#0926_ECF0#, 16#C137_4C91#,    -- 16#A0# .. 16#A7#
         16#74F1_6D98#, 16#2274_084A#, 16#3F6D_9CFA#, 16#7AC0_A383#, 16#B73A_FF1F#, 16#3909_A23D#, 16#9F16_53AE#, 16#4E2F_3E71#,    -- 16#A8# .. 16#AF#
         16#CA5A_B22A#, 16#E01E_3858#, 16#90C5_A7EB#, 16#3E4A_17DF#, 16#AA98_7FB0#, 16#488B_BD62#, 16#B625_062B#, 16#2D77_6BB8#,    -- 16#B0# .. 16#B7#
         16#43B5_FC08#, 16#1490_D532#, 16#D6D1_2495#, 16#44E8_9845#, 16#2FE6_0118#, 16#9D9E_F950#, 16#AC38_133E#, 16#D386_4329#,    -- 16#B8# .. 16#BF#

         16#017B_255A#, 16#FDC2_DD26#, 16#2568_51E6#, 16#318E_7086#, 16#2BFA_4861#, 16#89EA_C706#, 16#EE59_40C6#, 16#68C3_BC2F#,    -- 16#C0# .. 16#C7#
         16#E260_334B#, 16#98DA_90BB#, 16#F818_F270#, 16#4706_D897#, 16#212D_3799#, 16#4CF7_E5D0#, 16#D9C9_649F#, 16#A85D_B5CD#,    -- 16#C8# .. 16#CF#
         16#35E9_0E82#, 16#6B88_1152#, 16#AB1C_02C7#, 16#4675_2B02#, 16#664F_598E#, 16#45AB_2E64#, 16#C4CD_B4B2#, 16#BA42_107F#,    -- 16#D0# .. 16#D7#
         16#EA2A_808A#, 16#971B_F3DE#, 16#4A54_A836#, 16#4253_AECC#, 16#1029_BE68#, 16#6DCC_9225#, 16#E4BC_A56A#, 16#C0AE_50B1#,    -- 16#D8# .. 16#DF#

         16#7E01_1D94#, 16#E59C_162C#, 16#D8E5_C340#, 16#D470_FA0B#, 16#B2BE_79DD#, 16#D783_889C#, 16#1CED_E8F6#, 16#8F4C_817A#,    -- 16#E0# .. 16#E7#
         16#DDB7_85C9#, 16#8602_32D8#, 16#198A_AAD9#, 16#A081_4738#, 16#3219_CFFC#, 16#1695_46D2#, 16#FC0C_B759#, 16#5591_1510#,    -- 16#E8# .. 16#EF#
         16#04D5_CEC3#, 16#ED08_CC3B#, 16#0D6C_F427#, 16#C8E3_8CCA#, 16#0EEE_E3FE#, 16#9EE7_D7C8#, 16#F9F2_4FA9#, 16#DB04_B35D#,    -- 16#F0# .. 16#F7#
         16#9AB0_C9E0#, 16#651F_4417#, 16#028F_8B07#, 16#6E28_D9AA#, 16#FBA9_6319#, 16#8ED6_6687#, 16#FECB_C58D#, 16#954D_DB44#     -- 16#F8# .. 16#FF#
      ),
      (  -- S_Box: 13
         16#7B0B_DFFE#, 16#865D_16B1#, 16#49A0_58C0#, 16#97AB_AA3F#, 16#CAAC_C75D#, 16#ABA6_C17D#, 16#F874_6F92#, 16#6F48_AEED#,    -- 16#00# .. 16#07#
         16#8841_D4B5#, 16#F36A_146A#, 16#73C3_90AB#, 16#E6FB_558F#, 16#87B1_019E#, 16#2697_0252#, 16#2463_77B2#, 16#CBF6_76AE#,    -- 16#08# .. 16#0F#
         16#F923_DB06#, 16#F738_9116#, 16#14C8_1A90#, 16#8311_4EB4#, 16#8B13_7559#, 16#95A8_6A7A#, 16#D5B8_DA8C#, 16#C4DF_780E#,    -- 16#10# .. 16#17#
         16#5A9C_B3E2#, 16#E44D_4062#, 16#E8DC_8EF6#, 16#9D18_0845#, 16#817A_D18B#, 16#C286_C85B#, 16#251F_20DE#, 16#EE6D_5933#,    -- 16#18# .. 16#1F#

         16#F6ED_EF81#, 16#D4D1_6C1E#, 16#C94A_0C32#, 16#8437_FD22#, 16#3271_EE43#, 16#4257_2AEE#, 16#5F91_962A#, 16#1C52_2D98#,    -- 16#20# .. 16#27#
         16#59B2_3F0C#, 16#D86B_8804#, 16#08C6_3531#, 16#2C0D_7A40#, 16#B97C_4729#, 16#0496_4DF9#, 16#13C7_4A17#, 16#5878_362F#,    -- 16#28# .. 16#2F#
         16#4C80_8CD6#, 16#092C_B1E0#, 16#6DF0_2885#, 16#A0C2_105E#, 16#8ABA_9E68#, 16#64E0_3057#, 16#E5D6_1325#, 16#0E43_A628#,    -- 16#30# .. 16#37#
         16#16DB_D62B#, 16#2733_D90B#, 16#3AE5_7283#, 16#C0C1_052C#, 16#4B6F_B620#, 16#3751_3953#, 16#FC89_8BB3#, 16#471B_179F#,    -- 16#38# .. 16#3F#

         16#DF6E_66B8#, 16#D321_42F5#, 16#9B30_FAFC#, 16#4ED9_2549#, 16#105C_6D99#, 16#4ACD_69FF#, 16#2B1A_27D3#, 16#6BFC_C067#,    -- 16#40# .. 16#47#
         16#6301_A278#, 16#AD36_E6F2#, 16#EF3F_F64E#, 16#56B3_CADB#, 16#0184_BB61#, 16#17BE_B9FD#, 16#FAEC_6109#, 16#A2E1_FFA1#,    -- 16#48# .. 16#4F#
         16#2FD2_24F8#, 16#238F_5BE6#, 16#8F85_70CF#, 16#AEB5_F25A#, 16#4F1D_3E64#, 16#4377_EB24#, 16#1FA4_5346#, 16#B205_6386#,    -- 16#50# .. 16#57#
         16#5209_5E76#, 16#BB7B_5ADC#, 16#3514_E472#, 16#DDE8_1E6E#, 16#7ACE_A9C4#, 16#AC15_CC48#, 16#71C9_7D93#, 16#767F_941C#,    -- 16#58# .. 16#5F#

         16#9110_52A2#, 16#FFEA_09BF#, 16#FE3D_DCF0#, 16#15EB_F3AA#, 16#9235_B8BC#, 16#7540_8615#, 16#9A72_3437#, 16#E1A1_BD38#,    -- 16#60# .. 16#67#
         16#3354_1B7E#, 16#1BDD_6856#, 16#B307_E13E#, 16#9081_4BB0#, 16#51D7_217B#, 16#0BB9_2219#, 16#689F_4500#, 16#C568_B01F#,    -- 16#68# .. 16#6F#
         16#5DF3_D2D7#, 16#3C0E_CD0D#, 16#2A02_44C8#, 16#8525_74E8#, 16#E72F_23A9#, 16#8E26_ED02#, 16#2D92_CBDD#, 16#DABC_0458#,    -- 16#70# .. 16#77#
         16#CDF5_FEB6#, 16#9E4E_8DCC#, 16#F4F1_E344#, 16#0D8C_436D#, 16#4427_603B#, 16#BDD3_7FDA#, 16#8050_5F26#, 16#8C7D_2B8E#,    -- 16#78# .. 16#7F#

         16#B732_73C5#, 16#3973_62EA#, 16#618A_3811#, 16#608B_FB88#, 16#06F7_D714#, 16#212E_4677#, 16#28EF_CEAD#, 16#076C_0371#,    -- 16#80# .. 16#87#
         16#36A3_A4D9#, 16#5487_B455#, 16#3429_A365#, 16#65D4_67AC#, 16#78EE_7EEB#, 16#99BF_12B7#, 16#4D12_9896#, 16#772A_5601#,    -- 16#88# .. 16#8F#
         16#CCE2_84C7#, 16#2ED8_5C21#, 16#D099_E8A4#, 16#A179_158A#, 16#6AC0_AB1A#, 16#299A_4807#, 16#BE67_A58D#, 16#DC19_544A#,    -- 16#90# .. 16#97#
         16#B894_9B54#, 16#8D31_5779#, 16#B6F8_49C1#, 16#53C5_AC34#, 16#66DE_92A5#, 16#F195_DD13#, 16#318D_3A73#, 16#301E_C542#,    -- 16#98# .. 16#9F#

         16#0CC4_0DA6#, 16#F253_ADE4#, 16#467E_E566#, 16#EA55_85EC#, 16#3BAF_19BB#, 16#7DE9_F480#, 16#7900_6E7C#, 16#A9B7_A197#,    -- 16#A0# .. 16#A7#
         16#A44B_D8F1#, 16#FB2B_A739#, 16#EC34_2FD4#, 16#ED4F_D32D#, 16#3D17_89BA#, 16#400F_5D7F#, 16#C798_F594#, 16#4506_A847#,    -- 16#A8# .. 16#AF#
         16#034C_0A95#, 16#E216_2C9D#, 16#55A9_CFD0#, 16#692D_832E#, 16#CF9D_B2CA#, 16#5E22_87E9#, 16#D261_0EF3#, 16#1AE7_ECC2#,    -- 16#B0# .. 16#B7#
         16#4839_9CA0#, 16#A7E4_269B#, 16#6EE3_A0AF#, 16#7065_BFE1#, 16#A6FF_E708#, 16#2256_804C#, 16#7476_E21B#, 16#41B0_796C#,    -- 16#B8# .. 16#BF#

         16#7C24_3B05#, 16#000A_950F#, 16#1858_416B#, 16#F5A5_3C89#, 16#E9FE_F823#, 16#3F44_3275#, 16#E0CB_F091#, 16#0AF2_7B84#,    -- 16#C0# .. 16#C7#
         16#3EBB_0F27#, 16#1DE6_F7F4#, 16#C31C_29F7#, 16#B166_DE3D#, 16#1293_2EC3#, 16#9C0C_0674#, 16#5CDA_81B9#, 16#D1BD_9D12#,    -- 16#C8# .. 16#CF#
         16#AFFD_7C82#, 16#8962_BCA7#, 16#A342_C4A8#, 16#6245_7151#, 16#8208_9F03#, 16#EB49_C670#, 16#5B5F_6530#, 16#7E28_BAD2#,    -- 16#D0# .. 16#D7#
         16#2088_0BA3#, 16#F0FA_AFCD#, 16#CE82_B56F#, 16#0275_335C#, 16#C18E_8AFB#, 16#DE60_1D69#, 16#BA9B_820A#, 16#C8A2_BE4F#,    -- 16#D8# .. 16#DF#

         16#D7CA_C335#, 16#D9A7_3741#, 16#115E_974D#, 16#7F5A_C21D#, 16#383B_F9C6#, 16#BCAE_B75F#, 16#FD03_50CE#, 16#B5D0_6B87#,    -- 16#E0# .. 16#E7#
         16#9820_E03C#, 16#72D5_F163#, 16#E364_4FC9#, 16#A546_4C4B#, 16#5704_8FCB#, 16#9690_C9DF#, 16#DBF9_EAFA#, 16#BFF4_649A#,    -- 16#E8# .. 16#EF#
         16#053C_00E3#, 16#B4B6_1136#, 16#6759_3DD1#, 16#503E_E960#, 16#9FB4_993A#, 16#1983_1810#, 16#C670_D518#, 16#B05B_51D8#,    -- 16#F0# .. 16#F7#
         16#0F3A_1CE5#, 16#6CAA_1F9C#, 16#AACC_31BE#, 16#949E_D050#, 16#1EAD_07E7#, 16#A847_9ABD#, 16#D6CF_FCD5#, 16#9369_93EF#     -- 16#F8# .. 16#FF#
      ),
      (  -- S_Box: 14
         16#472E_91CB#, 16#5444_B5B6#, 16#62BE_5861#, 16#1BE1_02C7#, 16#63E4_B31E#, 16#E81F_71B7#, 16#9E23_17C9#, 16#39A4_08AE#,    -- 16#00# .. 16#07#
         16#5180_24F4#, 16#1731_C66F#, 16#68CB_C918#, 16#71FB_0C9E#, 16#D03B_7FDD#, 16#7D62_22EB#, 16#9057_EDA3#, 16#1A34_A407#,    -- 16#08# .. 16#0F#
         16#8CC2_253D#, 16#B6F6_979D#, 16#8356_75DC#, 16#F319_BE9F#, 16#BE1C_D743#, 16#4D32_FEE4#, 16#77E7_D887#, 16#37E9_EBFD#,    -- 16#10# .. 16#17#
         16#15F8_51E8#, 16#23DC_3706#, 16#19D7_8385#, 16#BD50_6933#, 16#A13A_D4A6#, 16#913F_1A0E#, 16#DDE5_60B9#, 16#9A5F_0996#,    -- 16#18# .. 16#1F#

         16#A65A_0435#, 16#48D3_4C4D#, 16#E908_39A7#, 16#8ABB_A54E#, 16#6FD1_3CE1#, 16#C7EE_BD3C#, 16#0E29_7602#, 16#58B9_BBB4#,    -- 16#20# .. 16#27#
         16#EF79_01E6#, 16#64A2_8A62#, 16#A509_875A#, 16#F883_4442#, 16#2702_C709#, 16#0735_3F31#, 16#3B39_F665#, 16#F5B1_8B49#,    -- 16#28# .. 16#2F#
         16#4010_AE37#, 16#784D_E00B#, 16#7A11_21E9#, 16#DE91_8ED3#, 16#C852_9DCD#, 16#816A_5D05#, 16#02ED_8298#, 16#04E3_DD84#,    -- 16#30# .. 16#37#
         16#FD2B_C3E2#, 16#AF16_7089#, 16#96AF_367E#, 16#A4DA_6232#, 16#18FF_7325#, 16#05F9_A9F1#, 16#4FEF_B9F9#, 16#CD94_EAA5#,    -- 16#38# .. 16#3F#

         16#BFAA_5069#, 16#A0B8_C077#, 16#60D8_6F57#, 16#FE71_C813#, 16#29EB_D2C8#, 16#4CA8_6538#, 16#6BF1_A030#, 16#A237_B88A#,    -- 16#40# .. 16#47#
         16#AA8A_F41D#, 16#E1F7_B6EC#, 16#E214_D953#, 16#3305_7879#, 16#49CA_A736#, 16#FA45_CFF3#, 16#C063_B411#, 16#BA7E_27D0#,    -- 16#48# .. 16#4F#
         16#3153_3819#, 16#2A00_4AC1#, 16#210E_FC3F#, 16#2646_885E#, 16#6672_7DCF#, 16#9D7F_BF54#, 16#A8DD_0EA8#, 16#3447_CACE#,    -- 16#50# .. 16#57#
         16#3F0C_14DB#, 16#B838_2AAC#, 16#4ACE_3539#, 16#0A51_8D51#, 16#9517_8981#, 16#35AE_E2CA#, 16#73F0_F7E3#, 16#9428_1140#,    -- 16#58# .. 16#5F#

         16#59D0_E523#, 16#D292_CB88#, 16#565D_1B27#, 16#7EC8_FBAF#, 16#069A_F08D#, 16#C127_FD24#, 16#0BC7_7B10#, 16#5F03_E7EF#,    -- 16#60# .. 16#67#
         16#453E_99BA#, 16#EED9_FF7F#, 16#87B5_5215#, 16#7915_AB4C#, 16#D389_A358#, 16#5E75_CE6D#, 16#28D6_55C0#, 16#DAD2_6C73#,    -- 16#68# .. 16#6F#
         16#2E25_10FF#, 16#9FA7_EECC#, 16#1D06_29C3#, 16#DC9C_9C46#, 16#2D67_ECD7#, 16#E75E_94BD#, 16#3D64_9E2A#, 16#6C41_3A2B#,    -- 16#70# .. 16#77#
         16#706F_0D7C#, 16#DFB0_127B#, 16#4E36_6B55#, 16#2C82_5650#, 16#2420_5720#, 16#B5C9_98F7#, 16#3E95_462C#, 16#756E_5C72#,    -- 16#78# .. 16#7F#

         16#3259_488F#, 16#11E8_771A#, 16#A7C0_A617#, 16#5776_63E5#, 16#089B_6401#, 16#8EAB_1941#, 16#AE55_EF8C#, 16#3AAC_5460#,    -- 16#80# .. 16#87#
         16#D4E6_262F#, 16#5D97_9A47#, 16#B198_23B0#, 16#7F8D_6A0C#, 16#FFA0_8683#, 16#0170_CD0F#, 16#858C_D5D8#, 16#5396_1C90#,    -- 16#88# .. 16#8F#
         16#C4C6_1556#, 16#41F2_F226#, 16#CFCD_062D#, 16#F24C_03B8#, 16#EA81_DF5B#, 16#7BE2_FA52#, 16#B361_F98B#, 16#C290_1316#,    -- 16#90# .. 16#97#
         16#55BA_4BBC#, 16#93B2_34A9#, 16#0FBC_6603#, 16#80A9_6822#, 16#6D60_491F#, 16#22BD_00F8#, 16#BCAD_5AAD#, 16#52F3_F13B#,    -- 16#98# .. 16#9F#

         16#42FD_2B28#, 16#B41D_D01C#, 16#C52C_93BF#, 16#FC66_3094#, 16#8F58_D100#, 16#43FE_CC08#, 16#C633_1E5D#, 16#E648_0F66#,    -- 16#A0# .. 16#A7#
         16#CA84_7204#, 16#4BDF_1DA0#, 16#30CC_2EFB#, 16#13E0_2DEA#, 16#FB49_AC45#, 16#F9D4_434F#, 16#F47C_5B9C#, 16#1488_79C2#,    -- 16#A8# .. 16#AF#
         16#039F_C234#, 16#A3DB_9BFC#, 16#D1A1_DC5C#, 16#763D_7CD4#, 16#ED6D_2F93#, 16#AB13_AF6E#, 16#1E8E_054A#, 16#D68F_4F9A#,    -- 16#B0# .. 16#B7#
         16#C304_84B3#, 16#D7D5_0AFA#, 16#6930_855F#, 16#CC07_DB95#, 16#CE74_6DB1#, 16#744E_967D#, 16#F16C_F575#, 16#8643_E8B5#,    -- 16#B8# .. 16#BF#

         16#F0EA_E38E#, 16#E52D_E1D1#, 16#6587_DAE0#, 16#0C4B_8121#, 16#1C7A_C567#, 16#AC0D_B20A#, 16#36C3_A812#, 16#5B1A_4514#,    -- 16#C0# .. 16#C7#
         16#A9A3_F868#, 16#B926_3BAA#, 16#CB3C_E9D2#, 16#E44F_B1A4#, 16#9221_BC82#, 16#B293_90FE#, 16#6AB4_1863#, 16#974A_3E2E#,    -- 16#C8# .. 16#CF#
         16#89F5_31C5#, 16#255C_A13E#, 16#8B65_D348#, 16#EC24_8F78#, 16#D8FC_16F0#, 16#50EC_DEEE#, 16#0901_0792#, 16#3C7D_1FB2#,    -- 16#D0# .. 16#D7#
         16#EBA5_426B#, 16#847B_417A#, 16#468B_40D9#, 16#8DC4_E680#, 16#7CC1_F391#, 16#2F1E_B086#, 16#6E5B_AA6A#, 16#E0B3_95DA#,    -- 16#D8# .. 16#DF#

         16#E31B_2CF6#, 16#D969_0B0D#, 16#729E_C464#, 16#3840_3DDE#, 16#610B_80A2#, 16#5CF4_33AB#, 16#B078_5FC4#, 16#D512_E4C6#,    -- 16#E0# .. 16#E7#
         16#BBB7_D699#, 16#5A86_591B#, 16#10CF_5376#, 16#12BF_9F4B#, 16#980F_BAA1#, 16#992A_4E70#, 16#20FA_7AE7#, 16#F799_6EBB#,    -- 16#E8# .. 16#EF#
         16#C918_A2BE#, 16#82DE_74F2#, 16#AD54_209B#, 16#F66B_4D74#, 16#1FC5_B771#, 16#169D_9229#, 16#8877_61DF#, 16#00B6_67D5#,    -- 16#F0# .. 16#F7#
         16#DB42_5E59#, 16#B72F_2844#, 16#9B0A_C1F5#, 16#9C73_7E3A#, 16#2B85_476C#, 16#6722_ADD6#, 16#44A6_3297#, 16#0D68_8CED#     -- 16#F8# .. 16#FF#
      ),
      (  -- S_Box: 15
         16#ABC5_9484#, 16#4107_778A#, 16#8AD9_4C6F#, 16#FE83_DF90#, 16#0F64_053F#, 16#D129_2E9D#, 16#C574_4356#, 16#8DD1_ABB4#,    -- 16#00# .. 16#07#
         16#4C4E_7667#, 16#FB4A_7FC1#, 16#74F4_02CB#, 16#70F0_6AFD#, 16#A822_86F2#, 16#918D_D076#, 16#7A97_C5CE#, 16#48F7_BDE3#,    -- 16#08# .. 16#0F#
         16#6A04_D11D#, 16#AC24_3EF7#, 16#33AC_10CA#, 16#2F7A_341E#, 16#5F75_157A#, 16#F477_3381#, 16#591C_870E#, 16#78DF_8CC8#,    -- 16#10# .. 16#17#
         16#22F3_ADB0#, 16#251A_5993#, 16#09FB_EF66#, 16#7969_42A8#, 16#9754_1D2E#, 16#2373_DAA9#, 16#1BD2_F142#, 16#B57E_8EB2#,    -- 16#18# .. 16#1F#

         16#E1A5_BFDB#, 16#7D0E_FA92#, 16#B344_2C94#, 16#D2CB_6447#, 16#386A_C97E#, 16#66D6_1805#, 16#BDAD_A15E#, 16#11BC_1AA7#,    -- 16#20# .. 16#27#
         16#14E9_F6EA#, 16#E533_A0C0#, 16#F935_EE0A#, 16#8FEE_8A04#, 16#810D_6D85#, 16#7C68_B6D6#, 16#4EDC_9AA2#, 16#956E_897D#,    -- 16#28# .. 16#2F#
         16#ED87_581A#, 16#264B_E9D7#, 16#FF4D_DB29#, 16#8238_57C2#, 16#E005_A9A0#, 16#F1CC_2450#, 16#6F99_51E1#, 16#AADE_2310#,    -- 16#30# .. 16#37#
         16#E70C_75F5#, 16#83E1_A31F#, 16#4F7D_DE8E#, 16#F723_B563#, 16#368E_0928#, 16#8636_2B71#, 16#21E8_982D#, 16#DFB3_F92B#,    -- 16#38# .. 16#3F#

         16#4467_6352#, 16#99EF_BA31#, 16#2EAB_4E1C#, 16#FC6C_A5E7#, 16#0EBE_5D4E#, 16#A071_7D0C#, 16#B64F_8199#, 16#946B_31A1#,    -- 16#40# .. 16#47#
         16#5656_CBC6#, 16#CFFE_C3EF#, 16#6227_66C9#, 16#FA21_1E35#, 16#52F9_8B89#, 16#6D01_674B#, 16#4978_A802#, 16#F651_F701#,    -- 16#48# .. 16#4F#
         16#15B0_D43D#, 16#D6FF_4683#, 16#3463_855F#, 16#672B_A29C#, 16#BC12_8312#, 16#4626_A70D#, 16#C892_7A5A#, 16#B848_1CF9#,    -- 16#50# .. 16#57#
         16#1C96_2262#, 16#A211_96BA#, 16#BABA_5EE9#, 16#5BB1_62D0#, 16#6994_3BD1#, 16#0C47_E35C#, 16#8CC9_619A#, 16#E284_D948#,    -- 16#58# .. 16#5F#

         16#271B_F264#, 16#C27F_B398#, 16#4BC7_0897#, 16#60CF_202C#, 16#7F42_D6AA#, 16#A5A1_3506#, 16#5D3E_8860#, 16#CEA6_3D3C#,    -- 16#60# .. 16#67#
         16#63BF_0A8F#, 16#F02E_9EFA#, 16#B17B_0674#, 16#B072_B1D3#, 16#06E5_723B#, 16#3737_E436#, 16#24AA_49C7#, 16#0DED_0D18#,    -- 16#68# .. 16#6F#
         16#DB25_6B14#, 16#58B2_7877#, 16#ECB4_9F54#, 16#6C40_256A#, 16#6EA9_2FFB#, 16#3906_AA4C#, 16#C986_6FD5#, 16#4549_323E#,    -- 16#70# .. 16#77#
         16#A7B8_5FAB#, 16#1918_CC27#, 16#7308_D7B5#, 16#1E16_C7AD#, 16#7185_0B37#, 16#3095_FD78#, 16#A63B_70E6#, 16#D880_E2AE#,    -- 16#78# .. 16#7F#

         16#3E28_2769#, 16#A39B_A6BC#, 16#9870_0FA3#, 16#F34C_53E8#, 16#288A_F426#, 16#B99D_930F#, 16#F5B9_9DF1#, 16#E9D0_C8CF#,    -- 16#80# .. 16#87#
         16#5AC8_405D#, 16#50E7_217B#, 16#511F_BBBE#, 16#2CA2_E639#, 16#C020_301B#, 16#356D_BC00#, 16#8E43_DDB9#, 16#4D32_7B4A#,    -- 16#88# .. 16#8F#
         16#F20F_F3ED#, 16#1DBB_29BD#, 16#43D4_4779#, 16#A1B6_8F70#, 16#6114_455B#, 16#E63D_280B#, 16#6BF6_FF65#, 16#10FC_39E5#,    -- 16#90# .. 16#97#
         16#3DAE_126E#, 16#C1D7_CF11#, 16#CB60_B795#, 16#1789_D5B3#, 16#9BCA_36B7#, 16#0830_6075#, 16#8461_5608#, 16#8B3A_0186#,    -- 16#98# .. 16#9F#

         16#E88F_BECD#, 16#7BA4_7C4D#, 16#2DE4_4DAC#, 16#653F_E58D#, 16#CCA0_B968#, 16#D7FA_0E72#, 16#9390_1780#, 16#1F2C_26CC#,    -- 16#A0# .. 16#A7#
         16#AE59_5B6B#, 16#A9EC_EA9B#, 16#E3DB_F8C4#, 16#319C_C130#, 16#1298_1196#, 16#01A3_A4DE#, 16#32C4_54B6#, 16#755B_D817#,    -- 16#A8# .. 16#AF#
         16#3CD8_71E4#, 16#A48B_B8DA#, 16#02FD_EC09#, 16#FD2D_C2E2#, 16#9E57_8088#, 16#9A9F_916D#, 16#4065_FE6C#, 16#1853_999E#,    -- 16#B0# .. 16#B7#
         16#C779_3F23#, 16#DC10_16BB#, 16#9693_55FF#, 16#7EF2_92F6#, 16#CDCE_4ADC#, 16#05E2_4416#, 16#85C1_6C46#, 16#D441_D37F#,    -- 16#B8# .. 16#BF#

         16#57BD_6855#, 16#8746_F54F#, 16#9CA7_73DF#, 16#770B_AE22#, 16#5482_8413#, 16#B75E_4B19#, 16#04C3_5C03#, 16#BF7C_CA07#,    -- 16#C0# .. 16#C7#
         16#2955_C4DD#, 16#721D_B041#, 16#B239_4F33#, 16#03F5_1387#, 16#89B7_3C9F#, 16#0B17_37F3#, 16#07E6_9024#, 16#9231_D245#,    -- 16#C8# .. 16#CF#
         16#7619_3861#, 16#8815_9C15#, 16#DEB5_52D9#, 16#D976_7E40#, 16#20C6_C0C3#, 16#4281_977C#, 16#F8AF_E1E0#, 16#D32A_0751#,    -- 16#D0# .. 16#D7#
         16#3FC2_7432#, 16#DDF1_DCC5#, 16#6858_1F34#, 16#3BCD_5025#, 16#0091_B2EE#, 16#4AEB_6944#, 16#1602_E743#, 16#EA09_EB58#,    -- 16#D8# .. 16#DF#

         16#EF0A_2A8B#, 16#641E_03A5#, 16#EB50_E021#, 16#5C8C_CEF8#, 16#802F_F0B8#, 16#D5E3_EDFE#, 16#C4DD_1B49#, 16#5334_CD2A#,    -- 16#E0# .. 16#E7#
         16#13F8_2D2F#, 16#4745_0C20#, 16#55DA_FBD2#, 16#BEC0_C6F4#, 16#B45D_7959#, 16#3AD3_6E8C#, 16#0AA8_AC57#, 16#1A3C_8D73#,    -- 16#E8# .. 16#EF#
         16#E45A_AFB1#, 16#9F66_4838#, 16#C688_0053#, 16#D003_9BBF#, 16#EE5F_19EB#, 16#CA00_41D8#, 16#BBEA_3AAF#, 16#DA62_8291#,    -- 16#F0# .. 16#F7#
         16#9D5C_95D4#, 16#ADD5_04A6#, 16#C39A_B482#, 16#5E9E_14A4#, 16#2BE0_65F0#, 16#2A13_FC3A#, 16#9052_E8EC#, 16#AF6F_5AFC#     -- 16#F8# .. 16#FF#
      ),
      (  -- S_Box: 16
         16#519A_A8B5#, 16#BB30_3DA9#, 16#E00E_2B10#, 16#DFA6_C1DB#, 16#2E6B_952E#, 16#EE10_DC23#, 16#3793_6D09#, 16#1FC4_2E92#,    -- 16#00# .. 16#07#
         16#39B2_5A9F#, 16#13FF_89F4#, 16#C8F5_3FEA#, 16#1850_0BC7#, 16#95A0_379D#, 16#98F7_51C2#, 16#2289_C42F#, 16#A21E_4098#,    -- 16#08# .. 16#0F#
         16#6F39_1F41#, 16#F27E_7E58#, 16#0D0D_F887#, 16#4B79_D540#, 16#8E84_09AA#, 16#71FE_46F8#, 16#688A_9B29#, 16#3F08_B548#,    -- 16#10# .. 16#17#
         16#84AB_E03A#, 16#5E91_B6C1#, 16#FDE4_C2AE#, 16#251D_0E72#, 16#92D4_FEE5#, 16#F937_1967#, 16#9175_108F#, 16#E6E8_1835#,    -- 16#18# .. 16#1F#

         16#8C8C_B8EE#, 16#B55A_67B3#, 16#CEF1_38CC#, 16#8B25_6268#, 16#00D8_15F5#, 16#E881_0812#, 16#7782_6189#, 16#EA73_267D#,    -- 16#20# .. 16#27#
         16#19B9_0F8D#, 16#45C3_3BB4#, 16#8247_7056#, 16#E177_0075#, 16#0946_7AA6#, 16#A7C6_F54A#, 16#7976_8742#, 16#61B8_6BCA#,    -- 16#28# .. 16#2F#
         16#D664_4A44#, 16#E33F_0171#, 16#C229_FBCD#, 16#41B0_8FEB#, 16#D190_3E30#, 16#65EC_9080#, 16#563D_6FBD#, 16#F56D_A488#,    -- 16#30# .. 16#37#
         16#EBF6_4CD8#, 16#4934_426B#, 16#7C85_92FC#, 16#6ACA_8CF2#, 16#1CEA_111B#, 16#3A57_EE7A#, 16#ACE1_1C0D#, 16#9942_D85E#,    -- 16#38# .. 16#3F#

         16#C461_3407#, 16#FA8E_643B#, 16#327F_C701#, 16#4CA9_BE82#, 16#3352_526D#, 16#2C04_7F63#, 16#F3A8_F7DD#, 16#1A4A_98A8#,    -- 16#40# .. 16#47#
         16#762E_D4D1#, 16#27C7_5008#, 16#BDF4_97C0#, 16#7A7B_84DF#, 16#315C_28AB#, 16#801F_93E3#, 16#F19B_0CA1#, 16#8F14_E46A#,    -- 16#48# .. 16#4F#
         16#E48B_A333#, 16#9605_E625#, 16#F03E_CB60#, 16#6038_5F2D#, 16#9028_45BA#, 16#7F96_D66F#, 16#24BF_F05C#, 16#2820_730B#,    -- 16#50# .. 16#57#
         16#9471_33CB#, 16#D444_828A#, 16#B343_F6F1#, 16#0BEF_4705#, 16#8DA5_74F9#, 16#01E2_5D6C#, 16#1732_793E#, 16#4F0F_7B27#,    -- 16#58# .. 16#5F#

         16#364B_7117#, 16#B2D1_DA77#, 16#A6C5_F1E9#, 16#574C_A5B1#, 16#386A_3076#, 16#AD68_94D6#, 16#1156_D7FA#, 16#A48D_1D9A#,    -- 16#60# .. 16#67#
         16#4794_C0AF#, 16#150C_0AA0#, 16#26D3_48AC#, 16#29FD_EABE#, 16#A5DE_DE53#, 16#8167_1E8E#, 16#594E_E3BF#, 16#A96C_56E6#,    -- 16#68# .. 16#6F#
         16#3426_A726#, 16#C597_6579#, 16#BC22_E5E4#, 16#C100_6319#, 16#DAAF_DD2A#, 16#A1A1_AA83#, 16#3BAD_D0E7#, 16#C3B1_4981#,    -- 16#70# .. 16#77#
         16#D770_B155#, 16#CCD7_C693#, 16#42E9_44C5#, 16#03E0_064F#, 16#CA95_B4EF#, 16#3DEE_81C3#, 16#FBBC_D98C#, 16#1E07_E15B#,    -- 16#78# .. 16#7F#

         16#667C_E949#, 16#E7D6_773F#, 16#21B6_124B#, 16#6B2A_6EF7#, 16#D327_8A9C#, 16#9A98_8304#, 16#75D2_AE9B#, 16#FE49_E2FF#,    -- 16#80# .. 16#87#
         16#9BC2_4F46#, 16#74CC_2CF6#, 16#A313_9F36#, 16#6C9E_F35A#, 16#9FC1_DFFE#, 16#9E5F_ACDC#, 16#AADC_8BBB#, 16#5ABD_BC5F#,    -- 16#88# .. 16#8F#
         16#44B3_B390#, 16#F754_EFA7#, 16#5FE3_BDB7#, 16#4E59_C886#, 16#06A4_C984#, 16#A033_8878#, 16#CD51_3CD7#, 16#63EB_D27E#,    -- 16#90# .. 16#97#
         16#8ABA_80AD#, 16#50DA_144E#, 16#5D9F_4E97#, 16#025B_751C#, 16#2D58_0200#, 16#B6C0_5837#, 16#580A_A15D#, 16#5402_2A6E#,    -- 16#98# .. 16#9F#

         16#B41A_5415#, 16#4863_FAB6#, 16#B0B7_9957#, 16#46D0_D159#, 16#DC2B_8650#, 16#20A7_BB0C#, 16#4A03_2974#, 16#EC86_36A2#,    -- 16#A0# .. 16#A7#
         16#8548_F24C#, 16#F6A2_BF16#, 16#1088_F4B0#, 16#0C2F_3A94#, 16#525D_C396#, 16#1406_5785#, 16#2B4D_CA52#, 16#08AE_ED39#,    -- 16#A8# .. 16#AF#
         16#ABED_FC99#, 16#B1DB_CF18#, 16#87F8_5BBC#, 16#AE3A_FF61#, 16#433C_CD70#, 16#5B23_CC64#, 16#7B45_3213#, 16#5355_C545#,    -- 16#B0# .. 16#B7#
         16#9318_EC0A#, 16#7869_2D31#, 16#0A21_693D#, 16#D566_6814#, 16#05FB_59D9#, 16#C719_85B2#, 16#2ABB_8E0E#, 16#CF6E_6C91#,    -- 16#B8# .. 16#BF#

         16#D9CF_E7C6#, 16#EFE7_132C#, 16#9711_AB28#, 16#3CE5_2732#, 16#12D5_16D2#, 16#7209_A0D0#, 16#D278_D306#, 16#70FA_4B7B#,    -- 16#C0# .. 16#C7#
         16#1D40_7DD3#, 16#DB0B_EBA4#, 16#BFD9_7621#, 16#A8BE_21E1#, 16#1B6F_1B66#, 16#3065_0DDA#, 16#BA7D_DBB9#, 16#7DF9_53FB#,    -- 16#C8# .. 16#CF#
         16#9D1C_3902#, 16#EDF0_E8D5#, 16#B874_1AE0#, 16#0F24_0565#, 16#62CD_438B#, 16#C616_A924#, 16#AF7A_96A3#, 16#3536_5538#,    -- 16#D0# .. 16#D7#
         16#E583_AF4D#, 16#7341_5EB8#, 16#2317_6A47#, 16#FC9C_CEE8#, 16#7EFC_9DE2#, 16#695E_03CF#, 16#F8CE_66D4#, 16#88B4_781D#,    -- 16#D8# .. 16#DF#

         16#67DD_9C03#, 16#3E8F_9E73#, 16#C0C9_5C51#, 16#BE31_4D22#, 16#55AA_0795#, 16#CB1B_B011#, 16#E980_FDC8#, 16#9C62_B7CE#,    -- 16#E0# .. 16#E7#
         16#DE2D_239E#, 16#042C_ADF3#, 16#FFDF_04DE#, 16#5CE6_A60F#, 16#D8C8_31ED#, 16#B7B5_B9EC#, 16#B9CB_F962#, 16#E253_B254#,    -- 16#E8# .. 16#EF#
         16#0735_BA1F#, 16#16AC_917F#, 16#DD60_7C2B#, 16#64A3_35C4#, 16#4015_9A7C#, 16#8692_22F0#, 16#6EF2_1769#, 16#839D_20A5#,    -- 16#F0# .. 16#F7#
         16#D03B_24C9#, 16#F412_601E#, 16#6D72_A243#, 16#0E01_8DFD#, 16#89F3_721A#, 16#C94F_4134#, 16#2F99_2F20#, 16#4D87_253C#     -- 16#F8# .. 16#FF#
      )
   );

   -----------------------------------------------------------------------------
   --[Types]--------------------------------------------------------------------
   -----------------------------------------------------------------------------

   --[Snefru_Unpacked_State]----------------------------------------------------
   -- Snefru unpacked state. As with the block, state size is variable depending
   -- on the requested hash size, this type is set to cope with the longest
   -- state (256 bit hashes).
   -----------------------------------------------------------------------------

   subtype Snefru_Unpacked_State is Byte_Array(1 .. Snefru_Max_State_Bytes);

   -----------------------------------------------------------------------------
   --[Body Declared Subprogram Specifications]----------------------------------
   -----------------------------------------------------------------------------

   --[Getting Parameters]-------------------------------------------------------

   --[Get_Security_Level]-------------------------------------------------------

   function    Get_Security_Level(
                  From_List      : in     List)
      return   Snefru_Security_Level;

   --[Get_Hash_Size_Id]---------------------------------------------------------

   function    Get_Hash_Size_Id(
                  From_List      : in     List)
      return   Snefru_Hash_Size;

   --[Get_Parameters]-----------------------------------------------------------

   procedure   Get_Parameters(
                  From_List      : in     List;
                  Security_Level :    out Snefru_Security_Level;
                  Hash_Size_Id   :    out Snefru_Hash_Size);

   --[Object Initialization]----------------------------------------------------

   --[Initialize_Object]--------------------------------------------------------

   procedure   Initialize_Object(
                  Object         : access Snefru_Digest);
   pragma Inline(Initialize_Object);

   --[Pack & Unpack]------------------------------------------------------------

   --[Pack_Block]---------------------------------------------------------------

   function    Pack_Block(
                  The_Block      : in     Byte_Array;
                  Hash_Size      : in     Snefru_Hash_Size)
      return   Four_Bytes_Array;
   pragma Inline(Pack_Block);

   --[Unpack_State]-------------------------------------------------------------

   function    Unpack_State(
                  The_State      : in     Snefru_State)
      return   Snefru_Unpacked_State;
   pragma Inline(Unpack_State);

   --[Round]--------------------------------------------------------------------

   procedure   Round(
                  C              : in     Four_Bytes;
                  SB             : in     Positive;
                  P              : in out Four_Bytes;
                  N              : in out Four_Bytes);
   pragma Inline(Round);

   --[Transform]----------------------------------------------------------------

   procedure   Transform(
                  State          : in out Snefru_State;
                  Security_Level : in     Snefru_Security_Level;
                  Hash_Size      : in     Snefru_Hash_Size;
                  Block          : in     Byte_Array);
   pragma Inline(Transform);

   -----------------------------------------------------------------------------
   --[Body Declared Subprogram Bodies]------------------------------------------
   -----------------------------------------------------------------------------

   --[Getting Parameters]-------------------------------------------------------

   --[Get_Security_Level]-------------------------------------------------------

   function    Get_Security_Level(
                  From_List      : in     List)
      return   Snefru_Security_Level
   is
      SL             : constant Positive := Get_Value(From_List, Security_Level_Name);
   begin
      for I in Snefru_Security_Levels'Range loop
         if SL = Snefru_Security_Levels(I) then
            return I;
         end if;
      end loop;

      Raise_Exception(
         CryptAda_Bad_Argument_Error'Identity,
         "Invalid Snefru 'Security_Level' parameter value: " & Positive'Image(SL));
   exception
      when CryptAda_Bad_Argument_Error =>
         raise;
      when X: others =>
         Raise_Exception(
            CryptAda_Bad_Argument_Error'Identity,
            "Caught exception: " &
               Exception_Name(X) &
               ", with message: """ &
               Exception_Message(X) &
               """. When obtaining Snefru 'Security_Level' parameter");
   end Get_Security_Level;

   --[Get_Hash_Size_Id]---------------------------------------------------------

   function    Get_Hash_Size_Id(
                  From_List      : in     List)
      return   Snefru_Hash_Size
   is
      HB             : constant Positive := Get_Value(From_List, Hash_Bytes_Name);
   begin
      for I in Snefru_Hash_Bytes'Range loop
         if HB = Snefru_Hash_Bytes(I) then
            return I;
         end if;
      end loop;

      Raise_Exception(
         CryptAda_Bad_Argument_Error'Identity,
         "Invalid Snefru 'Hash_Bytes' parameter value: " & Positive'Image(HB));
   exception
      when CryptAda_Bad_Argument_Error =>
         raise;
      when X: others =>
         Raise_Exception(
            CryptAda_Bad_Argument_Error'Identity,
            "Caught exception: " &
               Exception_Name(X) &
               ", with message: """ &
               Exception_Message(X) &
               """. When obtaining Snefru 'Hash_Bytes' parameter");
   end Get_Hash_Size_Id;

   --[Get_Parameters]-----------------------------------------------------------

   procedure   Get_Parameters(
                  From_List      : in     List;
                  Security_Level :    out Snefru_Security_Level;
                  Hash_Size_Id   :    out Snefru_Hash_Size)
   is
   begin
      -- Check list kind.

      if Get_List_Kind(From_List) = Empty then
         -- Parameter list is empty: set defaults and return.

         Security_Level    := Snefru_Default_Security_Level;
         Hash_Size_Id      := Snefru_Default_Hash_Size;

         return;
      elsif Get_List_Kind(From_List) = Unnamed then
         Raise_Exception(
            CryptAda_Bad_Argument_Error'Identity,
            "Parameter list is unnamed");
      end if;

      -- Get Security_Level.

      if Contains_Item(From_List, Security_Level_Name) then
         Security_Level := Get_Security_Level(From_List);
      else
         Raise_Exception(
            CryptAda_Bad_Argument_Error'Identity,
            "Parameter list does not contain mandatory 'Security_Level' item");
      end if;

      -- Get Hash_Size_Id

      if Contains_Item(From_List, Hash_Bytes_Name) then
         Hash_Size_Id := Get_Hash_Size_Id(From_List);
      else
         Raise_Exception(
            CryptAda_Bad_Argument_Error'Identity,
            "Parameter list does not contain mandatory 'Hash_Bytes' item");
      end if;

   exception
      when CryptAda_Bad_Argument_Error =>
         raise;

      when X: others =>
         Raise_Exception(
            CryptAda_Bad_Argument_Error'Identity,
            "Caught exception: " &
               Exception_Name(X) &
               ", with message: """ &
               Exception_Message(X) &
               """. When parsing Snefru parameter list");
   end Get_Parameters;

   --[Object Initialization]----------------------------------------------------

   --[Initialize_Object]--------------------------------------------------------

   procedure   Initialize_Object(
                  Object         : access Snefru_Digest)
   is
   begin
      -- Set to initial value any attribute which is modified in this package
      -- except the bit counter.

      -- Modified parent attributes.

      Private_Set_Hash_Size(Object, Snefru_Hash_Bytes(Snefru_Default_Hash_Size));
      Private_Set_Block_Size(Object, Snefru_Block_Sizes(Snefru_Default_Hash_Size));

      -- Extension attributes.

      Object.all.Security_Level  := Snefru_Default_Security_Level;
      Object.all.Hash_Size_Id    := Snefru_Default_Hash_Size;
      Object.all.State           := (others => 16#00000000#);
      Object.all.BIB             := 0;
      Object.all.Buffer          := (others => 16#00#);
   end Initialize_Object;

   --[Pack_Block]---------------------------------------------------------------

   function    Pack_Block(
                  The_Block      : in     Byte_Array;
                  Hash_Size      : in     Snefru_Hash_Size)
      return   Four_Bytes_Array
   is
      PBL            : constant Natural := Snefru_Block_Sizes(Hash_Size) / Snefru_Word_Bytes;
      PB             : Four_Bytes_Array(1 .. PBL) := (others => 0);
      J              : Positive := The_Block'First;
   begin
      for I in PB'Range loop
         PB(I) := Pack(The_Block(J .. J + 3), Big_Endian);
         J := J + 4;
      end loop;

      return PB;
   end Pack_Block;

   --[Unpack_State]-------------------------------------------------------------

   function    Unpack_State(
                  The_State      : in     Snefru_State)
      return   Snefru_Unpacked_State
   is
      US             : Snefru_Unpacked_State;
      J              : Positive := US'First;
   begin
      for I in The_State'Range loop
         US(J .. J + 3) := Unpack(The_State(I), Big_Endian);
         J := J + 4;
      end loop;

      return US;
   end Unpack_State;

   --[Round]--------------------------------------------------------------------

   procedure   Round(
                  C              : in     Four_Bytes;
                  SB             : in     Positive;
                  P              : in out Four_Bytes;
                  N              : in out Four_Bytes)
   is
      T              : constant Four_Bytes := S_Boxes(SB, Byte(C and 16#000000FF#));
   begin
      P := P xor T;
      N := N xor T;
   end Round;

   --[Transform]----------------------------------------------------------------

   procedure   Transform(
                  State          : in out Snefru_State;
                  Security_Level : in     Snefru_Security_Level;
                  Hash_Size      : in     Snefru_Hash_Size;
                  Block          : in     Byte_Array)
   is
      B              : Four_Bytes_Array(1 .. 16) := (others => 0);
      X              : constant Four_Bytes_Array := Pack_Block(Block, Hash_Size);
      Rot            : constant array(1 .. 4) of Natural := (16, 8, 16, 24);
      SB1            : Positive;
      SB2            : Positive;
   begin

      -- Initialize block.

      B(1 .. 4) := State(1 .. 4);

      if Hash_Size = Snefru_128 then
         B(5 .. 16)  := X(1 .. 12);
      else
         B(5 .. 8)   := State(5 .. 8);
         B(9 .. 16)  := X(1 .. 8);
      end if;

      -- Rounds

      for I in 1 .. Snefru_Security_Levels(Security_Level) loop
         SB1 := 2 * I - 1;
         SB2 := 2 * I;

         for J in 1 .. 4 loop
            Round(B( 1), SB1, B(16), B( 2));
            Round(B( 2), SB1, B( 1), B( 3));
            Round(B( 3), SB2, B( 2), B( 4));
            Round(B( 4), SB2, B( 3), B( 5));
            Round(B( 5), SB1, B( 4), B( 6));
            Round(B( 6), SB1, B( 5), B( 7));
            Round(B( 7), SB2, B( 6), B( 8));
            Round(B( 8), SB2, B( 7), B( 9));
            Round(B( 9), SB1, B( 8), B(10));
            Round(B(10), SB1, B( 9), B(11));
            Round(B(11), SB2, B(10), B(12));
            Round(B(12), SB2, B(11), B(13));
            Round(B(13), SB1, B(12), B(14));
            Round(B(14), SB1, B(13), B(15));
            Round(B(15), SB2, B(14), B(16));
            Round(B(16), SB2, B(15), B( 1));

            B( 1) := Rotate_Right(B( 1), Rot(J));
            B( 2) := Rotate_Right(B( 2), Rot(J));
            B( 3) := Rotate_Right(B( 3), Rot(J));
            B( 4) := Rotate_Right(B( 4), Rot(J));
            B( 5) := Rotate_Right(B( 5), Rot(J));
            B( 6) := Rotate_Right(B( 6), Rot(J));
            B( 7) := Rotate_Right(B( 7), Rot(J));
            B( 8) := Rotate_Right(B( 8), Rot(J));
            B( 9) := Rotate_Right(B( 9), Rot(J));
            B(10) := Rotate_Right(B(10), Rot(J));
            B(11) := Rotate_Right(B(11), Rot(J));
            B(12) := Rotate_Right(B(12), Rot(J));
            B(13) := Rotate_Right(B(13), Rot(J));
            B(14) := Rotate_Right(B(14), Rot(J));
            B(15) := Rotate_Right(B(15), Rot(J));
            B(16) := Rotate_Right(B(16), Rot(J));
         end loop;
      end loop;

      -- Update State

      State( 1) := State( 1) xor B(16);
      State( 2) := State( 2) xor B(15);
      State( 3) := State( 3) xor B(14);
      State( 4) := State( 4) xor B(13);

      if Hash_Size = Snefru_256 then
         State( 5) := State( 5) xor B(12);
         State( 6) := State( 6) xor B(11);
         State( 7) := State( 7) xor B(10);
         State( 8) := State( 8) xor B( 9);
      end if;
   end Transform;

   -----------------------------------------------------------------------------
   --[Getting a handle]---------------------------------------------------------
   -----------------------------------------------------------------------------

   --[Get_Message_Digest_Handle]------------------------------------------------

   function    Get_Message_Digest_Handle
      return   Message_Digest_Handle
   is
      P           : Snefru_Digest_Ptr;
   begin
      P := new Snefru_Digest'(Message_Digest with
                                    Id             => MD_Snefru,
                                    Security_Level => Snefru_Default_Security_Level,
                                    Hash_Size_Id   => Snefru_Default_Hash_Size,
                                    State          => (others => 16#00000000#),
                                    BIB            => 0,
                                    Buffer         => (others => 16#00#));

      Private_Initialize_Digest(
         P.all,
         Snefru_Hash_Bytes(Snefru_Default_Hash_Size),    -- State is same size as hash.
         Snefru_Block_Sizes(Snefru_Default_Hash_Size),
         Snefru_Hash_Bytes(Snefru_Default_Hash_Size));

      return Ref(Message_Digest_Ptr(P));
   exception
      when others =>
         Raise_Exception(
            CryptAda_Storage_Error'Identity,
            "Error when allocating Snefru_Digest object");
   end Get_Message_Digest_Handle;

   -----------------------------------------------------------------------------
   --[Ada.Finalizatrion Operations]---------------------------------------------
   -----------------------------------------------------------------------------

   --[Initialize]---------------------------------------------------------------

   overriding
   procedure   Initialize(
                  The_Digest     : in out Snefru_Digest)
   is
   begin
      Private_Initialize_Digest(
         The_Digest,
         Snefru_Hash_Bytes(Snefru_Default_Hash_Size),    -- State is same size as hash.
         Snefru_Block_Sizes(Snefru_Default_Hash_Size),
         Snefru_Hash_Bytes(Snefru_Default_Hash_Size));

      The_Digest.Security_Level  := Snefru_Default_Security_Level;
      The_Digest.Hash_Size_Id    := Snefru_Default_Hash_Size;
      The_Digest.State           := (others => 16#00000000#);
      The_Digest.BIB             := 0;
      The_Digest.Buffer          := (others => 16#00#);
   end Initialize;

   --[Finalize]-----------------------------------------------------------------

   overriding
   procedure   Finalize(
                  The_Digest     : in out Snefru_Digest)
   is
   begin
      Private_Initialize_Digest(
         The_Digest,
         Snefru_Hash_Bytes(Snefru_Default_Hash_Size),    -- State is same size as hash.
         Snefru_Block_Sizes(Snefru_Default_Hash_Size),
         Snefru_Hash_Bytes(Snefru_Default_Hash_Size));

      The_Digest.Security_Level  := Snefru_Default_Security_Level;
      The_Digest.Hash_Size_Id    := Snefru_Default_Hash_Size;
      The_Digest.State           := (others => 16#00000000#);
      The_Digest.BIB             := 0;
      The_Digest.Buffer          := (others => 16#00#);
   end Finalize;

   -----------------------------------------------------------------------------
   --[Dispatching Operations]---------------------------------------------------
   -----------------------------------------------------------------------------

   --[Digest_Start]-------------------------------------------------------------

   overriding
   procedure   Digest_Start(
                  The_Digest     : access Snefru_Digest)
   is
   begin
      Digest_Start(
         The_Digest,
         Snefru_Default_Security_Level,
         Snefru_Default_Hash_Size);
   end Digest_Start;

   --[Digest_Start]-------------------------------------------------------------

   overriding
   procedure   Digest_Start(
                  The_Digest     : access Snefru_Digest;
                  Parameters     : in     List)
   is
      SL             : Snefru_Security_Level;
      HS             : Snefru_Hash_Size;
   begin
      Get_Parameters(Parameters, SL, HS);
      Digest_Start(The_Digest, SL, HS);
   end Digest_Start;

   --[Digest_Update]------------------------------------------------------------

   overriding
   procedure   Digest_Update(
                  The_Digest     : access Snefru_Digest;
                  The_Bytes      : in     Byte_Array)
   is
      BS             : constant Positive  := Snefru_Block_Sizes(The_Digest.all.Hash_Size_Id);
      TB             : constant Natural   := The_Digest.all.BIB + The_Bytes'Length;
      Chunks         : Natural            := TB / BS;
      New_BIB        : constant Natural   := TB mod BS;
      I              : Natural            := The_Bytes'First;
      To_Copy        : Natural            := 0;
   begin
      -- Data is processed in chunks of BS bytes.

      if Chunks > 0 then
         -- If the object already has buffered data, fill the internal buffer
         -- with bytes from input and transform from internal buffer.

         if The_Digest.all.BIB > 0 then
            To_Copy := BS - The_Digest.all.BIB;
            The_Digest.all.Buffer(The_Digest.all.BIB + 1 .. BS) := The_Bytes(I .. I + To_Copy - 1);
            Transform(
               The_Digest.all.State,
               The_Digest.all.Security_Level,
               The_Digest.all.Hash_Size_Id,
               The_Digest.all.Buffer);

            -- Now there are not any bytes in internal buffer.

            The_Digest.all.BIB      := 0;
            The_Digest.all.Buffer   := (others => 16#00#);

            -- Update index over The_Bytes, decrease number of chunks.

            I := I + To_Copy;
            Chunks := Chunks - 1;
         end if;

         -- Remaining chunks are processed from The_Bytes.

         while Chunks > 0 loop
            Transform(
               The_Digest.all.State,
               The_Digest.all.Security_Level,
               The_Digest.all.Hash_Size_Id,
               The_Bytes(I .. I + BS - 1));

            -- Update index over The_Bytes, decrease number of chunks.

            I := I + BS;
            Chunks := Chunks - 1;
         end loop;
      end if;

      -- Copy remaining bytes (if any, to internal buffer).

      if New_BIB > The_Digest.BIB then
         The_Digest.all.Buffer(The_Digest.all.BIB + 1 .. New_BIB) := The_Bytes(I .. The_Bytes'Last);
      end if;

      The_Digest.all.BIB := New_BIB;

      -- Increase processed bit counter.

      Increment(The_Digest.all.Bit_Count, 8 * The_Bytes'Length);
   end Digest_Update;

   --[Digest_End]---------------------------------------------------------------

   overriding
   procedure   Digest_End(
                  The_Digest     : access Snefru_Digest;
                  The_Hash       :    out Hash)
   is
      BS             : constant Positive := Snefru_Block_Sizes(The_Digest.all.Hash_Size_Id);
      Counter_Offset : constant Positive := 1 + BS - 8;
      UC             : constant Unpacked_Counter := Unpack(The_Digest.all.Bit_Count, Big_Endian);
      Hash_Bytes     : Byte_Array(1 .. Snefru_Max_State_Bytes) := (others => 16#00#);
   begin
      -- Pad message so that length is an integral multiple of Block_Size.

      if The_Digest.BIB > 0 then
         The_Digest.all.Buffer(The_Digest.all.BIB + 1 .. BS) := (others => 16#00#);
         Transform(
            The_Digest.all.State,
            The_Digest.all.Security_Level,
            The_Digest.all.Hash_Size_Id,
            The_Digest.all.Buffer);
      end if;

      -- Copy counter (just the low order 8 bytes) to Buffer and transform.

      The_Digest.all.Buffer := (others => 16#00#);
      The_Digest.all.Buffer(Counter_Offset .. BS) := UC(9 .. 16);
      Transform(
         The_Digest.all.State,
         The_Digest.all.Security_Level,
         The_Digest.all.Hash_Size_Id,
         The_Digest.all.Buffer);

      -- Get hash.

      Hash_Bytes := Unpack_State(The_Digest.all.State);
      Set_Hash(Hash_Bytes(1 .. Snefru_Hash_Bytes(The_Digest.all.Hash_Size_Id)), The_Hash);

      -- Zeroize state.

      Initialize_Object(The_Digest);
   end Digest_End;

   -----------------------------------------------------------------------------
   --[Non Dispatching Operations]-----------------------------------------------
   -----------------------------------------------------------------------------

   --[Digest_Start]-------------------------------------------------------------

   procedure   Digest_Start(
                  The_Digest     : access Snefru_Digest'Class;
                  Security_Level : in     Snefru_Security_Level;
                  Hash_Size_Id   : in     Snefru_Hash_Size)
   is
   begin
      Initialize(The_Digest.all);
      Private_Reset_Bit_Counter(The_Digest);
      Private_Set_Block_Size(The_Digest, Snefru_Block_Sizes(Hash_Size_Id));
      Private_Set_Hash_Size(The_Digest, Snefru_Hash_Bytes(Hash_Size_Id));

      The_Digest.all.Security_Level := Security_Level;
      The_Digest.all.Hash_Size_Id   := Hash_Size_Id;
   end Digest_Start;

   --[Get_Security_Level]-------------------------------------------------------

   function    Get_Security_Level(
                  From_Digest    : access Snefru_Digest'Class)
      return   Snefru_Security_Level
   is
   begin
      return From_Digest.all.Security_Level;
   end Get_Security_Level;

   --[Get_Hash_Size_Id]---------------------------------------------------------

   function    Get_Hash_Size_Id(
                  From_Digest    : access Snefru_Digest'Class)
      return   Snefru_Hash_Size
   is
   begin
      return From_Digest.all.Hash_Size_Id;
   end Get_Hash_Size_Id;

end CryptAda.Digests.Message_Digests.Snefru;
