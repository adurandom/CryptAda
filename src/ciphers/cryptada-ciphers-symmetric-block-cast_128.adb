--------------------------------------------------------------------------------
--                      (c) 2017, TCantos Software                            --
--                           aduran@tcantos.com                               --
--------------------------------------------------------------------------------
--  This program is free software: you can redistribute it and/or modify  it  --
--  under the terms of  the GNU General Public  License as published by  the  --
--  Free Software Foundation, either version  3 of the License, or  (at your  --
--  option) any later version.                                                --
--                                                                            --
--  This program  is distributed  in the  hope that  it will  be useful, but  --
--  WITHOUT   ANY   WARRANTY;   without  even   the   implied   warranty  of  --
--  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General  --
--  Public License for more details.                                          --
--                                                                            --
--  You should have received a copy of the GNU General Public License  along  --
--  with this program. If not, see <http://www.gnu.org/licenses/>.            --
--------------------------------------------------------------------------------
-- 1. Identification
--    Filename          :  cryptada-ciphers-symmetric-block-cast_128.adb
--    File kind         :  Ada package body
--    Author            :  A. Duran
--    Creation date     :  April 4th, 2017
--    Current version   :  2.0
--------------------------------------------------------------------------------
-- 2. Purpose:
--    Implements the CAST-128 block cupher.
--------------------------------------------------------------------------------
-- 3. Revision history
--    Ver   When     Who   Why
--    ----- -------- ----- -----------------------------------------------------
--    1.0   20170404 ADD   Initial implementation.
--    2.0   20170529 ADD   Changed types.
--------------------------------------------------------------------------------

with Ada.Exceptions;                         use Ada.Exceptions;

with CryptAda.Pragmatics;                    use CryptAda.Pragmatics;
with CryptAda.Lists;                         use CryptAda.Lists;
with CryptAda.Names;                         use CryptAda.Names;
with CryptAda.Exceptions;                    use CryptAda.Exceptions;
with CryptAda.Ciphers.Keys;                  use CryptAda.Ciphers.Keys;

package body CryptAda.Ciphers.Symmetric.Block.CAST_128 is

   -----------------------------------------------------------------------------
   --[Constants]----------------------------------------------------------------
   -----------------------------------------------------------------------------

   --[S_Boxes]------------------------------------------------------------------
   -- CAST-128 S-Boxes.
   -----------------------------------------------------------------------------

   S_Boxes                       : constant array(Positive range 1 .. 8, Byte) of Four_Bytes :=
      (
         (
            16#30FB40D4#, 16#9FA0FF0B#, 16#6BECCD2F#, 16#3F258C7A#, 16#1E213F2F#, 16#9C004DD3#, 16#6003E540#, 16#CF9FC949#,
            16#BFD4AF27#, 16#88BBBDB5#, 16#E2034090#, 16#98D09675#, 16#6E63A0E0#, 16#15C361D2#, 16#C2E7661D#, 16#22D4FF8E#,
            16#28683B6F#, 16#C07FD059#, 16#FF2379C8#, 16#775F50E2#, 16#43C340D3#, 16#DF2F8656#, 16#887CA41A#, 16#A2D2BD2D#,
            16#A1C9E0D6#, 16#346C4819#, 16#61B76D87#, 16#22540F2F#, 16#2ABE32E1#, 16#AA54166B#, 16#22568E3A#, 16#A2D341D0#,
            16#66DB40C8#, 16#A784392F#, 16#004DFF2F#, 16#2DB9D2DE#, 16#97943FAC#, 16#4A97C1D8#, 16#527644B7#, 16#B5F437A7#,
            16#B82CBAEF#, 16#D751D159#, 16#6FF7F0ED#, 16#5A097A1F#, 16#827B68D0#, 16#90ECF52E#, 16#22B0C054#, 16#BC8E5935#,
            16#4B6D2F7F#, 16#50BB64A2#, 16#D2664910#, 16#BEE5812D#, 16#B7332290#, 16#E93B159F#, 16#B48EE411#, 16#4BFF345D#,
            16#FD45C240#, 16#AD31973F#, 16#C4F6D02E#, 16#55FC8165#, 16#D5B1CAAD#, 16#A1AC2DAE#, 16#A2D4B76D#, 16#C19B0C50#,
            16#882240F2#, 16#0C6E4F38#, 16#A4E4BFD7#, 16#4F5BA272#, 16#564C1D2F#, 16#C59C5319#, 16#B949E354#, 16#B04669FE#,
            16#B1B6AB8A#, 16#C71358DD#, 16#6385C545#, 16#110F935D#, 16#57538AD5#, 16#6A390493#, 16#E63D37E0#, 16#2A54F6B3#,
            16#3A787D5F#, 16#6276A0B5#, 16#19A6FCDF#, 16#7A42206A#, 16#29F9D4D5#, 16#F61B1891#, 16#BB72275E#, 16#AA508167#,
            16#38901091#, 16#C6B505EB#, 16#84C7CB8C#, 16#2AD75A0F#, 16#874A1427#, 16#A2D1936B#, 16#2AD286AF#, 16#AA56D291#,
            16#D7894360#, 16#425C750D#, 16#93B39E26#, 16#187184C9#, 16#6C00B32D#, 16#73E2BB14#, 16#A0BEBC3C#, 16#54623779#,
            16#64459EAB#, 16#3F328B82#, 16#7718CF82#, 16#59A2CEA6#, 16#04EE002E#, 16#89FE78E6#, 16#3FAB0950#, 16#325FF6C2#,
            16#81383F05#, 16#6963C5C8#, 16#76CB5AD6#, 16#D49974C9#, 16#CA180DCF#, 16#380782D5#, 16#C7FA5CF6#, 16#8AC31511#,
            16#35E79E13#, 16#47DA91D0#, 16#F40F9086#, 16#A7E2419E#, 16#31366241#, 16#051EF495#, 16#AA573B04#, 16#4A805D8D#,
            16#548300D0#, 16#00322A3C#, 16#BF64CDDF#, 16#BA57A68E#, 16#75C6372B#, 16#50AFD341#, 16#A7C13275#, 16#915A0BF5#,
            16#6B54BFAB#, 16#2B0B1426#, 16#AB4CC9D7#, 16#449CCD82#, 16#F7FBF265#, 16#AB85C5F3#, 16#1B55DB94#, 16#AAD4E324#,
            16#CFA4BD3F#, 16#2DEAA3E2#, 16#9E204D02#, 16#C8BD25AC#, 16#EADF55B3#, 16#D5BD9E98#, 16#E31231B2#, 16#2AD5AD6C#,
            16#954329DE#, 16#ADBE4528#, 16#D8710F69#, 16#AA51C90F#, 16#AA786BF6#, 16#22513F1E#, 16#AA51A79B#, 16#2AD344CC#,
            16#7B5A41F0#, 16#D37CFBAD#, 16#1B069505#, 16#41ECE491#, 16#B4C332E6#, 16#032268D4#, 16#C9600ACC#, 16#CE387E6D#,
            16#BF6BB16C#, 16#6A70FB78#, 16#0D03D9C9#, 16#D4DF39DE#, 16#E01063DA#, 16#4736F464#, 16#5AD328D8#, 16#B347CC96#,
            16#75BB0FC3#, 16#98511BFB#, 16#4FFBCC35#, 16#B58BCF6A#, 16#E11F0ABC#, 16#BFC5FE4A#, 16#A70AEC10#, 16#AC39570A#,
            16#3F04442F#, 16#6188B153#, 16#E0397A2E#, 16#5727CB79#, 16#9CEB418F#, 16#1CACD68D#, 16#2AD37C96#, 16#0175CB9D#,
            16#C69DFF09#, 16#C75B65F0#, 16#D9DB40D8#, 16#EC0E7779#, 16#4744EAD4#, 16#B11C3274#, 16#DD24CB9E#, 16#7E1C54BD#,
            16#F01144F9#, 16#D2240EB1#, 16#9675B3FD#, 16#A3AC3755#, 16#D47C27AF#, 16#51C85F4D#, 16#56907596#, 16#A5BB15E6#,
            16#580304F0#, 16#CA042CF1#, 16#011A37EA#, 16#8DBFAADB#, 16#35BA3E4A#, 16#3526FFA0#, 16#C37B4D09#, 16#BC306ED9#,
            16#98A52666#, 16#5648F725#, 16#FF5E569D#, 16#0CED63D0#, 16#7C63B2CF#, 16#700B45E1#, 16#D5EA50F1#, 16#85A92872#,
            16#AF1FBDA7#, 16#D4234870#, 16#A7870BF3#, 16#2D3B4D79#, 16#42E04198#, 16#0CD0EDE7#, 16#26470DB8#, 16#F881814C#,
            16#474D6AD7#, 16#7C0C5E5C#, 16#D1231959#, 16#381B7298#, 16#F5D2F4DB#, 16#AB838653#, 16#6E2F1E23#, 16#83719C9E#,
            16#BD91E046#, 16#9A56456E#, 16#DC39200C#, 16#20C8C571#, 16#962BDA1C#, 16#E1E696FF#, 16#B141AB08#, 16#7CCA89B9#,
            16#1A69E783#, 16#02CC4843#, 16#A2F7C579#, 16#429EF47D#, 16#427B169C#, 16#5AC9F049#, 16#DD8F0F00#, 16#5C8165BF#
         ),
         (
            16#1F201094#, 16#EF0BA75B#, 16#69E3CF7E#, 16#393F4380#, 16#FE61CF7A#, 16#EEC5207A#, 16#55889C94#, 16#72FC0651#,
            16#ADA7EF79#, 16#4E1D7235#, 16#D55A63CE#, 16#DE0436BA#, 16#99C430EF#, 16#5F0C0794#, 16#18DCDB7D#, 16#A1D6EFF3#,
            16#A0B52F7B#, 16#59E83605#, 16#EE15B094#, 16#E9FFD909#, 16#DC440086#, 16#EF944459#, 16#BA83CCB3#, 16#E0C3CDFB#,
            16#D1DA4181#, 16#3B092AB1#, 16#F997F1C1#, 16#A5E6CF7B#, 16#01420DDB#, 16#E4E7EF5B#, 16#25A1FF41#, 16#E180F806#,
            16#1FC41080#, 16#179BEE7A#, 16#D37AC6A9#, 16#FE5830A4#, 16#98DE8B7F#, 16#77E83F4E#, 16#79929269#, 16#24FA9F7B#,
            16#E113C85B#, 16#ACC40083#, 16#D7503525#, 16#F7EA615F#, 16#62143154#, 16#0D554B63#, 16#5D681121#, 16#C866C359#,
            16#3D63CF73#, 16#CEE234C0#, 16#D4D87E87#, 16#5C672B21#, 16#071F6181#, 16#39F7627F#, 16#361E3084#, 16#E4EB573B#,
            16#602F64A4#, 16#D63ACD9C#, 16#1BBC4635#, 16#9E81032D#, 16#2701F50C#, 16#99847AB4#, 16#A0E3DF79#, 16#BA6CF38C#,
            16#10843094#, 16#2537A95E#, 16#F46F6FFE#, 16#A1FF3B1F#, 16#208CFB6A#, 16#8F458C74#, 16#D9E0A227#, 16#4EC73A34#,
            16#FC884F69#, 16#3E4DE8DF#, 16#EF0E0088#, 16#3559648D#, 16#8A45388C#, 16#1D804366#, 16#721D9BFD#, 16#A58684BB#,
            16#E8256333#, 16#844E8212#, 16#128D8098#, 16#FED33FB4#, 16#CE280AE1#, 16#27E19BA5#, 16#D5A6C252#, 16#E49754BD#,
            16#C5D655DD#, 16#EB667064#, 16#77840B4D#, 16#A1B6A801#, 16#84DB26A9#, 16#E0B56714#, 16#21F043B7#, 16#E5D05860#,
            16#54F03084#, 16#066FF472#, 16#A31AA153#, 16#DADC4755#, 16#B5625DBF#, 16#68561BE6#, 16#83CA6B94#, 16#2D6ED23B#,
            16#ECCF01DB#, 16#A6D3D0BA#, 16#B6803D5C#, 16#AF77A709#, 16#33B4A34C#, 16#397BC8D6#, 16#5EE22B95#, 16#5F0E5304#,
            16#81ED6F61#, 16#20E74364#, 16#B45E1378#, 16#DE18639B#, 16#881CA122#, 16#B96726D1#, 16#8049A7E8#, 16#22B7DA7B#,
            16#5E552D25#, 16#5272D237#, 16#79D2951C#, 16#C60D894C#, 16#488CB402#, 16#1BA4FE5B#, 16#A4B09F6B#, 16#1CA815CF#,
            16#A20C3005#, 16#8871DF63#, 16#B9DE2FCB#, 16#0CC6C9E9#, 16#0BEEFF53#, 16#E3214517#, 16#B4542835#, 16#9F63293C#,
            16#EE41E729#, 16#6E1D2D7C#, 16#50045286#, 16#1E6685F3#, 16#F33401C6#, 16#30A22C95#, 16#31A70850#, 16#60930F13#,
            16#73F98417#, 16#A1269859#, 16#EC645C44#, 16#52C877A9#, 16#CDFF33A6#, 16#A02B1741#, 16#7CBAD9A2#, 16#2180036F#,
            16#50D99C08#, 16#CB3F4861#, 16#C26BD765#, 16#64A3F6AB#, 16#80342676#, 16#25A75E7B#, 16#E4E6D1FC#, 16#20C710E6#,
            16#CDF0B680#, 16#17844D3B#, 16#31EEF84D#, 16#7E0824E4#, 16#2CCB49EB#, 16#846A3BAE#, 16#8FF77888#, 16#EE5D60F6#,
            16#7AF75673#, 16#2FDD5CDB#, 16#A11631C1#, 16#30F66F43#, 16#B3FAEC54#, 16#157FD7FA#, 16#EF8579CC#, 16#D152DE58#,
            16#DB2FFD5E#, 16#8F32CE19#, 16#306AF97A#, 16#02F03EF8#, 16#99319AD5#, 16#C242FA0F#, 16#A7E3EBB0#, 16#C68E4906#,
            16#B8DA230C#, 16#80823028#, 16#DCDEF3C8#, 16#D35FB171#, 16#088A1BC8#, 16#BEC0C560#, 16#61A3C9E8#, 16#BCA8F54D#,
            16#C72FEFFA#, 16#22822E99#, 16#82C570B4#, 16#D8D94E89#, 16#8B1C34BC#, 16#301E16E6#, 16#273BE979#, 16#B0FFEAA6#,
            16#61D9B8C6#, 16#00B24869#, 16#B7FFCE3F#, 16#08DC283B#, 16#43DAF65A#, 16#F7E19798#, 16#7619B72F#, 16#8F1C9BA4#,
            16#DC8637A0#, 16#16A7D3B1#, 16#9FC393B7#, 16#A7136EEB#, 16#C6BCC63E#, 16#1A513742#, 16#EF6828BC#, 16#520365D6#,
            16#2D6A77AB#, 16#3527ED4B#, 16#821FD216#, 16#095C6E2E#, 16#DB92F2FB#, 16#5EEA29CB#, 16#145892F5#, 16#91584F7F#,
            16#5483697B#, 16#2667A8CC#, 16#85196048#, 16#8C4BACEA#, 16#833860D4#, 16#0D23E0F9#, 16#6C387E8A#, 16#0AE6D249#,
            16#B284600C#, 16#D835731D#, 16#DCB1C647#, 16#AC4C56EA#, 16#3EBD81B3#, 16#230EABB0#, 16#6438BC87#, 16#F0B5B1FA#,
            16#8F5EA2B3#, 16#FC184642#, 16#0A036B7A#, 16#4FB089BD#, 16#649DA589#, 16#A345415E#, 16#5C038323#, 16#3E5D3BB9#,
            16#43D79572#, 16#7E6DD07C#, 16#06DFDF1E#, 16#6C6CC4EF#, 16#7160A539#, 16#73BFBE70#, 16#83877605#, 16#4523ECF1#
         ),
         (
            16#8DEFC240#, 16#25FA5D9F#, 16#EB903DBF#, 16#E810C907#, 16#47607FFF#, 16#369FE44B#, 16#8C1FC644#, 16#AECECA90#,
            16#BEB1F9BF#, 16#EEFBCAEA#, 16#E8CF1950#, 16#51DF07AE#, 16#920E8806#, 16#F0AD0548#, 16#E13C8D83#, 16#927010D5#,
            16#11107D9F#, 16#07647DB9#, 16#B2E3E4D4#, 16#3D4F285E#, 16#B9AFA820#, 16#FADE82E0#, 16#A067268B#, 16#8272792E#,
            16#553FB2C0#, 16#489AE22B#, 16#D4EF9794#, 16#125E3FBC#, 16#21FFFCEE#, 16#825B1BFD#, 16#9255C5ED#, 16#1257A240#,
            16#4E1A8302#, 16#BAE07FFF#, 16#528246E7#, 16#8E57140E#, 16#3373F7BF#, 16#8C9F8188#, 16#A6FC4EE8#, 16#C982B5A5#,
            16#A8C01DB7#, 16#579FC264#, 16#67094F31#, 16#F2BD3F5F#, 16#40FFF7C1#, 16#1FB78DFC#, 16#8E6BD2C1#, 16#437BE59B#,
            16#99B03DBF#, 16#B5DBC64B#, 16#638DC0E6#, 16#55819D99#, 16#A197C81C#, 16#4A012D6E#, 16#C5884A28#, 16#CCC36F71#,
            16#B843C213#, 16#6C0743F1#, 16#8309893C#, 16#0FEDDD5F#, 16#2F7FE850#, 16#D7C07F7E#, 16#02507FBF#, 16#5AFB9A04#,
            16#A747D2D0#, 16#1651192E#, 16#AF70BF3E#, 16#58C31380#, 16#5F98302E#, 16#727CC3C4#, 16#0A0FB402#, 16#0F7FEF82#,
            16#8C96FDAD#, 16#5D2C2AAE#, 16#8EE99A49#, 16#50DA88B8#, 16#8427F4A0#, 16#1EAC5790#, 16#796FB449#, 16#8252DC15#,
            16#EFBD7D9B#, 16#A672597D#, 16#ADA840D8#, 16#45F54504#, 16#FA5D7403#, 16#E83EC305#, 16#4F91751A#, 16#925669C2#,
            16#23EFE941#, 16#A903F12E#, 16#60270DF2#, 16#0276E4B6#, 16#94FD6574#, 16#927985B2#, 16#8276DBCB#, 16#02778176#,
            16#F8AF918D#, 16#4E48F79E#, 16#8F616DDF#, 16#E29D840E#, 16#842F7D83#, 16#340CE5C8#, 16#96BBB682#, 16#93B4B148#,
            16#EF303CAB#, 16#984FAF28#, 16#779FAF9B#, 16#92DC560D#, 16#224D1E20#, 16#8437AA88#, 16#7D29DC96#, 16#2756D3DC#,
            16#8B907CEE#, 16#B51FD240#, 16#E7C07CE3#, 16#E566B4A1#, 16#C3E9615E#, 16#3CF8209D#, 16#6094D1E3#, 16#CD9CA341#,
            16#5C76460E#, 16#00EA983B#, 16#D4D67881#, 16#FD47572C#, 16#F76CEDD9#, 16#BDA8229C#, 16#127DADAA#, 16#438A074E#,
            16#1F97C090#, 16#081BDB8A#, 16#93A07EBE#, 16#B938CA15#, 16#97B03CFF#, 16#3DC2C0F8#, 16#8D1AB2EC#, 16#64380E51#,
            16#68CC7BFB#, 16#D90F2788#, 16#12490181#, 16#5DE5FFD4#, 16#DD7EF86A#, 16#76A2E214#, 16#B9A40368#, 16#925D958F#,
            16#4B39FFFA#, 16#BA39AEE9#, 16#A4FFD30B#, 16#FAF7933B#, 16#6D498623#, 16#193CBCFA#, 16#27627545#, 16#825CF47A#,
            16#61BD8BA0#, 16#D11E42D1#, 16#CEAD04F4#, 16#127EA392#, 16#10428DB7#, 16#8272A972#, 16#9270C4A8#, 16#127DE50B#,
            16#285BA1C8#, 16#3C62F44F#, 16#35C0EAA5#, 16#E805D231#, 16#428929FB#, 16#B4FCDF82#, 16#4FB66A53#, 16#0E7DC15B#,
            16#1F081FAB#, 16#108618AE#, 16#FCFD086D#, 16#F9FF2889#, 16#694BCC11#, 16#236A5CAE#, 16#12DECA4D#, 16#2C3F8CC5#,
            16#D2D02DFE#, 16#F8EF5896#, 16#E4CF52DA#, 16#95155B67#, 16#494A488C#, 16#B9B6A80C#, 16#5C8F82BC#, 16#89D36B45#,
            16#3A609437#, 16#EC00C9A9#, 16#44715253#, 16#0A874B49#, 16#D773BC40#, 16#7C34671C#, 16#02717EF6#, 16#4FEB5536#,
            16#A2D02FFF#, 16#D2BF60C4#, 16#D43F03C0#, 16#50B4EF6D#, 16#07478CD1#, 16#006E1888#, 16#A2E53F55#, 16#B9E6D4BC#,
            16#A2048016#, 16#97573833#, 16#D7207D67#, 16#DE0F8F3D#, 16#72F87B33#, 16#ABCC4F33#, 16#7688C55D#, 16#7B00A6B0#,
            16#947B0001#, 16#570075D2#, 16#F9BB88F8#, 16#8942019E#, 16#4264A5FF#, 16#856302E0#, 16#72DBD92B#, 16#EE971B69#,
            16#6EA22FDE#, 16#5F08AE2B#, 16#AF7A616D#, 16#E5C98767#, 16#CF1FEBD2#, 16#61EFC8C2#, 16#F1AC2571#, 16#CC8239C2#,
            16#67214CB8#, 16#B1E583D1#, 16#B7DC3E62#, 16#7F10BDCE#, 16#F90A5C38#, 16#0FF0443D#, 16#606E6DC6#, 16#60543A49#,
            16#5727C148#, 16#2BE98A1D#, 16#8AB41738#, 16#20E1BE24#, 16#AF96DA0F#, 16#68458425#, 16#99833BE5#, 16#600D457D#,
            16#282F9350#, 16#8334B362#, 16#D91D1120#, 16#2B6D8DA0#, 16#642B1E31#, 16#9C305A00#, 16#52BCE688#, 16#1B03588A#,
            16#F7BAEFD5#, 16#4142ED9C#, 16#A4315C11#, 16#83323EC5#, 16#DFEF4636#, 16#A133C501#, 16#E9D3531C#, 16#EE353783#
         ),
         (
            16#9DB30420#, 16#1FB6E9DE#, 16#A7BE7BEF#, 16#D273A298#, 16#4A4F7BDB#, 16#64AD8C57#, 16#85510443#, 16#FA020ED1#,
            16#7E287AFF#, 16#E60FB663#, 16#095F35A1#, 16#79EBF120#, 16#FD059D43#, 16#6497B7B1#, 16#F3641F63#, 16#241E4ADF#,
            16#28147F5F#, 16#4FA2B8CD#, 16#C9430040#, 16#0CC32220#, 16#FDD30B30#, 16#C0A5374F#, 16#1D2D00D9#, 16#24147B15#,
            16#EE4D111A#, 16#0FCA5167#, 16#71FF904C#, 16#2D195FFE#, 16#1A05645F#, 16#0C13FEFE#, 16#081B08CA#, 16#05170121#,
            16#80530100#, 16#E83E5EFE#, 16#AC9AF4F8#, 16#7FE72701#, 16#D2B8EE5F#, 16#06DF4261#, 16#BB9E9B8A#, 16#7293EA25#,
            16#CE84FFDF#, 16#F5718801#, 16#3DD64B04#, 16#A26F263B#, 16#7ED48400#, 16#547EEBE6#, 16#446D4CA0#, 16#6CF3D6F5#,
            16#2649ABDF#, 16#AEA0C7F5#, 16#36338CC1#, 16#503F7E93#, 16#D3772061#, 16#11B638E1#, 16#72500E03#, 16#F80EB2BB#,
            16#ABE0502E#, 16#EC8D77DE#, 16#57971E81#, 16#E14F6746#, 16#C9335400#, 16#6920318F#, 16#081DBB99#, 16#FFC304A5#,
            16#4D351805#, 16#7F3D5CE3#, 16#A6C866C6#, 16#5D5BCCA9#, 16#DAEC6FEA#, 16#9F926F91#, 16#9F46222F#, 16#3991467D#,
            16#A5BF6D8E#, 16#1143C44F#, 16#43958302#, 16#D0214EEB#, 16#022083B8#, 16#3FB6180C#, 16#18F8931E#, 16#281658E6#,
            16#26486E3E#, 16#8BD78A70#, 16#7477E4C1#, 16#B506E07C#, 16#F32D0A25#, 16#79098B02#, 16#E4EABB81#, 16#28123B23#,
            16#69DEAD38#, 16#1574CA16#, 16#DF871B62#, 16#211C40B7#, 16#A51A9EF9#, 16#0014377B#, 16#041E8AC8#, 16#09114003#,
            16#BD59E4D2#, 16#E3D156D5#, 16#4FE876D5#, 16#2F91A340#, 16#557BE8DE#, 16#00EAE4A7#, 16#0CE5C2EC#, 16#4DB4BBA6#,
            16#E756BDFF#, 16#DD3369AC#, 16#EC17B035#, 16#06572327#, 16#99AFC8B0#, 16#56C8C391#, 16#6B65811C#, 16#5E146119#,
            16#6E85CB75#, 16#BE07C002#, 16#C2325577#, 16#893FF4EC#, 16#5BBFC92D#, 16#D0EC3B25#, 16#B7801AB7#, 16#8D6D3B24#,
            16#20C763EF#, 16#C366A5FC#, 16#9C382880#, 16#0ACE3205#, 16#AAC9548A#, 16#ECA1D7C7#, 16#041AFA32#, 16#1D16625A#,
            16#6701902C#, 16#9B757A54#, 16#31D477F7#, 16#9126B031#, 16#36CC6FDB#, 16#C70B8B46#, 16#D9E66A48#, 16#56E55A79#,
            16#026A4CEB#, 16#52437EFF#, 16#2F8F76B4#, 16#0DF980A5#, 16#8674CDE3#, 16#EDDA04EB#, 16#17A9BE04#, 16#2C18F4DF#,
            16#B7747F9D#, 16#AB2AF7B4#, 16#EFC34D20#, 16#2E096B7C#, 16#1741A254#, 16#E5B6A035#, 16#213D42F6#, 16#2C1C7C26#,
            16#61C2F50F#, 16#6552DAF9#, 16#D2C231F8#, 16#25130F69#, 16#D8167FA2#, 16#0418F2C8#, 16#001A96A6#, 16#0D1526AB#,
            16#63315C21#, 16#5E0A72EC#, 16#49BAFEFD#, 16#187908D9#, 16#8D0DBD86#, 16#311170A7#, 16#3E9B640C#, 16#CC3E10D7#,
            16#D5CAD3B6#, 16#0CAEC388#, 16#F73001E1#, 16#6C728AFF#, 16#71EAE2A1#, 16#1F9AF36E#, 16#CFCBD12F#, 16#C1DE8417#,
            16#AC07BE6B#, 16#CB44A1D8#, 16#8B9B0F56#, 16#013988C3#, 16#B1C52FCA#, 16#B4BE31CD#, 16#D8782806#, 16#12A3A4E2#,
            16#6F7DE532#, 16#58FD7EB6#, 16#D01EE900#, 16#24ADFFC2#, 16#F4990FC5#, 16#9711AAC5#, 16#001D7B95#, 16#82E5E7D2#,
            16#109873F6#, 16#00613096#, 16#C32D9521#, 16#ADA121FF#, 16#29908415#, 16#7FBB977F#, 16#AF9EB3DB#, 16#29C9ED2A#,
            16#5CE2A465#, 16#A730F32C#, 16#D0AA3FE8#, 16#8A5CC091#, 16#D49E2CE7#, 16#0CE454A9#, 16#D60ACD86#, 16#015F1919#,
            16#77079103#, 16#DEA03AF6#, 16#78A8565E#, 16#DEE356DF#, 16#21F05CBE#, 16#8B75E387#, 16#B3C50651#, 16#B8A5C3EF#,
            16#D8EEB6D2#, 16#E523BE77#, 16#C2154529#, 16#2F69EFDF#, 16#AFE67AFB#, 16#F470C4B2#, 16#F3E0EB5B#, 16#D6CC9876#,
            16#39E4460C#, 16#1FDA8538#, 16#1987832F#, 16#CA007367#, 16#A99144F8#, 16#296B299E#, 16#492FC295#, 16#9266BEAB#,
            16#B5676E69#, 16#9BD3DDDA#, 16#DF7E052F#, 16#DB25701C#, 16#1B5E51EE#, 16#F65324E6#, 16#6AFCE36C#, 16#0316CC04#,
            16#8644213E#, 16#B7DC59D0#, 16#7965291F#, 16#CCD6FD43#, 16#41823979#, 16#932BCDF6#, 16#B657C34D#, 16#4EDFD282#,
            16#7AE5290C#, 16#3CB9536B#, 16#851E20FE#, 16#9833557E#, 16#13ECF0B0#, 16#D3FFB372#, 16#3F85C5C1#, 16#0AEF7ED2#
         ),
         (
            16#7EC90C04#, 16#2C6E74B9#, 16#9B0E66DF#, 16#A6337911#, 16#B86A7FFF#, 16#1DD358F5#, 16#44DD9D44#, 16#1731167F#,
            16#08FBF1FA#, 16#E7F511CC#, 16#D2051B00#, 16#735ABA00#, 16#2AB722D8#, 16#386381CB#, 16#ACF6243A#, 16#69BEFD7A#,
            16#E6A2E77F#, 16#F0C720CD#, 16#C4494816#, 16#CCF5C180#, 16#38851640#, 16#15B0A848#, 16#E68B18CB#, 16#4CAADEFF#,
            16#5F480A01#, 16#0412B2AA#, 16#259814FC#, 16#41D0EFE2#, 16#4E40B48D#, 16#248EB6FB#, 16#8DBA1CFE#, 16#41A99B02#,
            16#1A550A04#, 16#BA8F65CB#, 16#7251F4E7#, 16#95A51725#, 16#C106ECD7#, 16#97A5980A#, 16#C539B9AA#, 16#4D79FE6A#,
            16#F2F3F763#, 16#68AF8040#, 16#ED0C9E56#, 16#11B4958B#, 16#E1EB5A88#, 16#8709E6B0#, 16#D7E07156#, 16#4E29FEA7#,
            16#6366E52D#, 16#02D1C000#, 16#C4AC8E05#, 16#9377F571#, 16#0C05372A#, 16#578535F2#, 16#2261BE02#, 16#D642A0C9#,
            16#DF13A280#, 16#74B55BD2#, 16#682199C0#, 16#D421E5EC#, 16#53FB3CE8#, 16#C8ADEDB3#, 16#28A87FC9#, 16#3D959981#,
            16#5C1FF900#, 16#FE38D399#, 16#0C4EFF0B#, 16#062407EA#, 16#AA2F4FB1#, 16#4FB96976#, 16#90C79505#, 16#B0A8A774#,
            16#EF55A1FF#, 16#E59CA2C2#, 16#A6B62D27#, 16#E66A4263#, 16#DF65001F#, 16#0EC50966#, 16#DFDD55BC#, 16#29DE0655#,
            16#911E739A#, 16#17AF8975#, 16#32C7911C#, 16#89F89468#, 16#0D01E980#, 16#524755F4#, 16#03B63CC9#, 16#0CC844B2#,
            16#BCF3F0AA#, 16#87AC36E9#, 16#E53A7426#, 16#01B3D82B#, 16#1A9E7449#, 16#64EE2D7E#, 16#CDDBB1DA#, 16#01C94910#,
            16#B868BF80#, 16#0D26F3FD#, 16#9342EDE7#, 16#04A5C284#, 16#636737B6#, 16#50F5B616#, 16#F24766E3#, 16#8ECA36C1#,
            16#136E05DB#, 16#FEF18391#, 16#FB887A37#, 16#D6E7F7D4#, 16#C7FB7DC9#, 16#3063FCDF#, 16#B6F589DE#, 16#EC2941DA#,
            16#26E46695#, 16#B7566419#, 16#F654EFC5#, 16#D08D58B7#, 16#48925401#, 16#C1BACB7F#, 16#E5FF550F#, 16#B6083049#,
            16#5BB5D0E8#, 16#87D72E5A#, 16#AB6A6EE1#, 16#223A66CE#, 16#C62BF3CD#, 16#9E0885F9#, 16#68CB3E47#, 16#086C010F#,
            16#A21DE820#, 16#D18B69DE#, 16#F3F65777#, 16#FA02C3F6#, 16#407EDAC3#, 16#CBB3D550#, 16#1793084D#, 16#B0D70EBA#,
            16#0AB378D5#, 16#D951FB0C#, 16#DED7DA56#, 16#4124BBE4#, 16#94CA0B56#, 16#0F5755D1#, 16#E0E1E56E#, 16#6184B5BE#,
            16#580A249F#, 16#94F74BC0#, 16#E327888E#, 16#9F7B5561#, 16#C3DC0280#, 16#05687715#, 16#646C6BD7#, 16#44904DB3#,
            16#66B4F0A3#, 16#C0F1648A#, 16#697ED5AF#, 16#49E92FF6#, 16#309E374F#, 16#2CB6356A#, 16#85808573#, 16#4991F840#,
            16#76F0AE02#, 16#083BE84D#, 16#28421C9A#, 16#44489406#, 16#736E4CB8#, 16#C1092910#, 16#8BC95FC6#, 16#7D869CF4#,
            16#134F616F#, 16#2E77118D#, 16#B31B2BE1#, 16#AA90B472#, 16#3CA5D717#, 16#7D161BBA#, 16#9CAD9010#, 16#AF462BA2#,
            16#9FE459D2#, 16#45D34559#, 16#D9F2DA13#, 16#DBC65487#, 16#F3E4F94E#, 16#176D486F#, 16#097C13EA#, 16#631DA5C7#,
            16#445F7382#, 16#175683F4#, 16#CDC66A97#, 16#70BE0288#, 16#B3CDCF72#, 16#6E5DD2F3#, 16#20936079#, 16#459B80A5#,
            16#BE60E2DB#, 16#A9C23101#, 16#EBA5315C#, 16#224E42F2#, 16#1C5C1572#, 16#F6721B2C#, 16#1AD2FFF3#, 16#8C25404E#,
            16#324ED72F#, 16#4067B7FD#, 16#0523138E#, 16#5CA3BC78#, 16#DC0FD66E#, 16#75922283#, 16#784D6B17#, 16#58EBB16E#,
            16#44094F85#, 16#3F481D87#, 16#FCFEAE7B#, 16#77B5FF76#, 16#8C2302BF#, 16#AAF47556#, 16#5F46B02A#, 16#2B092801#,
            16#3D38F5F7#, 16#0CA81F36#, 16#52AF4A8A#, 16#66D5E7C0#, 16#DF3B0874#, 16#95055110#, 16#1B5AD7A8#, 16#F61ED5AD#,
            16#6CF6E479#, 16#20758184#, 16#D0CEFA65#, 16#88F7BE58#, 16#4A046826#, 16#0FF6F8F3#, 16#A09C7F70#, 16#5346ABA0#,
            16#5CE96C28#, 16#E176EDA3#, 16#6BAC307F#, 16#376829D2#, 16#85360FA9#, 16#17E3FE2A#, 16#24B79767#, 16#F5A96B20#,
            16#D6CD2595#, 16#68FF1EBF#, 16#7555442C#, 16#F19F06BE#, 16#F9E0659A#, 16#EEB9491D#, 16#34010718#, 16#BB30CAB8#,
            16#E822FE15#, 16#88570983#, 16#750E6249#, 16#DA627E55#, 16#5E76FFA8#, 16#B1534546#, 16#6D47DE08#, 16#EFE9E7D4#
         ),
         (
            16#F6FA8F9D#, 16#2CAC6CE1#, 16#4CA34867#, 16#E2337F7C#, 16#95DB08E7#, 16#016843B4#, 16#ECED5CBC#, 16#325553AC#,
            16#BF9F0960#, 16#DFA1E2ED#, 16#83F0579D#, 16#63ED86B9#, 16#1AB6A6B8#, 16#DE5EBE39#, 16#F38FF732#, 16#8989B138#,
            16#33F14961#, 16#C01937BD#, 16#F506C6DA#, 16#E4625E7E#, 16#A308EA99#, 16#4E23E33C#, 16#79CBD7CC#, 16#48A14367#,
            16#A3149619#, 16#FEC94BD5#, 16#A114174A#, 16#EAA01866#, 16#A084DB2D#, 16#09A8486F#, 16#A888614A#, 16#2900AF98#,
            16#01665991#, 16#E1992863#, 16#C8F30C60#, 16#2E78EF3C#, 16#D0D51932#, 16#CF0FEC14#, 16#F7CA07D2#, 16#D0A82072#,
            16#FD41197E#, 16#9305A6B0#, 16#E86BE3DA#, 16#74BED3CD#, 16#372DA53C#, 16#4C7F4448#, 16#DAB5D440#, 16#6DBA0EC3#,
            16#083919A7#, 16#9FBAEED9#, 16#49DBCFB0#, 16#4E670C53#, 16#5C3D9C01#, 16#64BDB941#, 16#2C0E636A#, 16#BA7DD9CD#,
            16#EA6F7388#, 16#E70BC762#, 16#35F29ADB#, 16#5C4CDD8D#, 16#F0D48D8C#, 16#B88153E2#, 16#08A19866#, 16#1AE2EAC8#,
            16#284CAF89#, 16#AA928223#, 16#9334BE53#, 16#3B3A21BF#, 16#16434BE3#, 16#9AEA3906#, 16#EFE8C36E#, 16#F890CDD9#,
            16#80226DAE#, 16#C340A4A3#, 16#DF7E9C09#, 16#A694A807#, 16#5B7C5ECC#, 16#221DB3A6#, 16#9A69A02F#, 16#68818A54#,
            16#CEB2296F#, 16#53C0843A#, 16#FE893655#, 16#25BFE68A#, 16#B4628ABC#, 16#CF222EBF#, 16#25AC6F48#, 16#A9A99387#,
            16#53BDDB65#, 16#E76FFBE7#, 16#E967FD78#, 16#0BA93563#, 16#8E342BC1#, 16#E8A11BE9#, 16#4980740D#, 16#C8087DFC#,
            16#8DE4BF99#, 16#A11101A0#, 16#7FD37975#, 16#DA5A26C0#, 16#E81F994F#, 16#9528CD89#, 16#FD339FED#, 16#B87834BF#,
            16#5F04456D#, 16#22258698#, 16#C9C4C83B#, 16#2DC156BE#, 16#4F628DAA#, 16#57F55EC5#, 16#E2220ABE#, 16#D2916EBF#,
            16#4EC75B95#, 16#24F2C3C0#, 16#42D15D99#, 16#CD0D7FA0#, 16#7B6E27FF#, 16#A8DC8AF0#, 16#7345C106#, 16#F41E232F#,
            16#35162386#, 16#E6EA8926#, 16#3333B094#, 16#157EC6F2#, 16#372B74AF#, 16#692573E4#, 16#E9A9D848#, 16#F3160289#,
            16#3A62EF1D#, 16#A787E238#, 16#F3A5F676#, 16#74364853#, 16#20951063#, 16#4576698D#, 16#B6FAD407#, 16#592AF950#,
            16#36F73523#, 16#4CFB6E87#, 16#7DA4CEC0#, 16#6C152DAA#, 16#CB0396A8#, 16#C50DFE5D#, 16#FCD707AB#, 16#0921C42F#,
            16#89DFF0BB#, 16#5FE2BE78#, 16#448F4F33#, 16#754613C9#, 16#2B05D08D#, 16#48B9D585#, 16#DC049441#, 16#C8098F9B#,
            16#7DEDE786#, 16#C39A3373#, 16#42410005#, 16#6A091751#, 16#0EF3C8A6#, 16#890072D6#, 16#28207682#, 16#A9A9F7BE#,
            16#BF32679D#, 16#D45B5B75#, 16#B353FD00#, 16#CBB0E358#, 16#830F220A#, 16#1F8FB214#, 16#D372CF08#, 16#CC3C4A13#,
            16#8CF63166#, 16#061C87BE#, 16#88C98F88#, 16#6062E397#, 16#47CF8E7A#, 16#B6C85283#, 16#3CC2ACFB#, 16#3FC06976#,
            16#4E8F0252#, 16#64D8314D#, 16#DA3870E3#, 16#1E665459#, 16#C10908F0#, 16#513021A5#, 16#6C5B68B7#, 16#822F8AA0#,
            16#3007CD3E#, 16#74719EEF#, 16#DC872681#, 16#073340D4#, 16#7E432FD9#, 16#0C5EC241#, 16#8809286C#, 16#F592D891#,
            16#08A930F6#, 16#957EF305#, 16#B7FBFFBD#, 16#C266E96F#, 16#6FE4AC98#, 16#B173ECC0#, 16#BC60B42A#, 16#953498DA#,
            16#FBA1AE12#, 16#2D4BD736#, 16#0F25FAAB#, 16#A4F3FCEB#, 16#E2969123#, 16#257F0C3D#, 16#9348AF49#, 16#361400BC#,
            16#E8816F4A#, 16#3814F200#, 16#A3F94043#, 16#9C7A54C2#, 16#BC704F57#, 16#DA41E7F9#, 16#C25AD33A#, 16#54F4A084#,
            16#B17F5505#, 16#59357CBE#, 16#EDBD15C8#, 16#7F97C5AB#, 16#BA5AC7B5#, 16#B6F6DEAF#, 16#3A479C3A#, 16#5302DA25#,
            16#653D7E6A#, 16#54268D49#, 16#51A477EA#, 16#5017D55B#, 16#D7D25D88#, 16#44136C76#, 16#0404A8C8#, 16#B8E5A121#,
            16#B81A928A#, 16#60ED5869#, 16#97C55B96#, 16#EAEC991B#, 16#29935913#, 16#01FDB7F1#, 16#088E8DFA#, 16#9AB6F6F5#,
            16#3B4CBF9F#, 16#4A5DE3AB#, 16#E6051D35#, 16#A0E1D855#, 16#D36B4CF1#, 16#F544EDEB#, 16#B0E93524#, 16#BEBB8FBD#,
            16#A2D762CF#, 16#49C92F54#, 16#38B5F331#, 16#7128A454#, 16#48392905#, 16#A65B1DB8#, 16#851C97BD#, 16#D675CF2F#
         ),
         (
            16#85E04019#, 16#332BF567#, 16#662DBFFF#, 16#CFC65693#, 16#2A8D7F6F#, 16#AB9BC912#, 16#DE6008A1#, 16#2028DA1F#,
            16#0227BCE7#, 16#4D642916#, 16#18FAC300#, 16#50F18B82#, 16#2CB2CB11#, 16#B232E75C#, 16#4B3695F2#, 16#B28707DE#,
            16#A05FBCF6#, 16#CD4181E9#, 16#E150210C#, 16#E24EF1BD#, 16#B168C381#, 16#FDE4E789#, 16#5C79B0D8#, 16#1E8BFD43#,
            16#4D495001#, 16#38BE4341#, 16#913CEE1D#, 16#92A79C3F#, 16#089766BE#, 16#BAEEADF4#, 16#1286BECF#, 16#B6EACB19#,
            16#2660C200#, 16#7565BDE4#, 16#64241F7A#, 16#8248DCA9#, 16#C3B3AD66#, 16#28136086#, 16#0BD8DFA8#, 16#356D1CF2#,
            16#107789BE#, 16#B3B2E9CE#, 16#0502AA8F#, 16#0BC0351E#, 16#166BF52A#, 16#EB12FF82#, 16#E3486911#, 16#D34D7516#,
            16#4E7B3AFF#, 16#5F43671B#, 16#9CF6E037#, 16#4981AC83#, 16#334266CE#, 16#8C9341B7#, 16#D0D854C0#, 16#CB3A6C88#,
            16#47BC2829#, 16#4725BA37#, 16#A66AD22B#, 16#7AD61F1E#, 16#0C5CBAFA#, 16#4437F107#, 16#B6E79962#, 16#42D2D816#,
            16#0A961288#, 16#E1A5C06E#, 16#13749E67#, 16#72FC081A#, 16#B1D139F7#, 16#F9583745#, 16#CF19DF58#, 16#BEC3F756#,
            16#C06EBA30#, 16#07211B24#, 16#45C28829#, 16#C95E317F#, 16#BC8EC511#, 16#38BC46E9#, 16#C6E6FA14#, 16#BAE8584A#,
            16#AD4EBC46#, 16#468F508B#, 16#7829435F#, 16#F124183B#, 16#821DBA9F#, 16#AFF60FF4#, 16#EA2C4E6D#, 16#16E39264#,
            16#92544A8B#, 16#009B4FC3#, 16#ABA68CED#, 16#9AC96F78#, 16#06A5B79A#, 16#B2856E6E#, 16#1AEC3CA9#, 16#BE838688#,
            16#0E0804E9#, 16#55F1BE56#, 16#E7E5363B#, 16#B3A1F25D#, 16#F7DEBB85#, 16#61FE033C#, 16#16746233#, 16#3C034C28#,
            16#DA6D0C74#, 16#79AAC56C#, 16#3CE4E1AD#, 16#51F0C802#, 16#98F8F35A#, 16#1626A49F#, 16#EED82B29#, 16#1D382FE3#,
            16#0C4FB99A#, 16#BB325778#, 16#3EC6D97B#, 16#6E77A6A9#, 16#CB658B5C#, 16#D45230C7#, 16#2BD1408B#, 16#60C03EB7#,
            16#B9068D78#, 16#A33754F4#, 16#F430C87D#, 16#C8A71302#, 16#B96D8C32#, 16#EBD4E7BE#, 16#BE8B9D2D#, 16#7979FB06#,
            16#E7225308#, 16#8B75CF77#, 16#11EF8DA4#, 16#E083C858#, 16#8D6B786F#, 16#5A6317A6#, 16#FA5CF7A0#, 16#5DDA0033#,
            16#F28EBFB0#, 16#F5B9C310#, 16#A0EAC280#, 16#08B9767A#, 16#A3D9D2B0#, 16#79D34217#, 16#021A718D#, 16#9AC6336A#,
            16#2711FD60#, 16#438050E3#, 16#069908A8#, 16#3D7FEDC4#, 16#826D2BEF#, 16#4EEB8476#, 16#488DCF25#, 16#36C9D566#,
            16#28E74E41#, 16#C2610ACA#, 16#3D49A9CF#, 16#BAE3B9DF#, 16#B65F8DE6#, 16#92AEAF64#, 16#3AC7D5E6#, 16#9EA80509#,
            16#F22B017D#, 16#A4173F70#, 16#DD1E16C3#, 16#15E0D7F9#, 16#50B1B887#, 16#2B9F4FD5#, 16#625ABA82#, 16#6A017962#,
            16#2EC01B9C#, 16#15488AA9#, 16#D716E740#, 16#40055A2C#, 16#93D29A22#, 16#E32DBF9A#, 16#058745B9#, 16#3453DC1E#,
            16#D699296E#, 16#496CFF6F#, 16#1C9F4986#, 16#DFE2ED07#, 16#B87242D1#, 16#19DE7EAE#, 16#053E561A#, 16#15AD6F8C#,
            16#66626C1C#, 16#7154C24C#, 16#EA082B2A#, 16#93EB2939#, 16#17DCB0F0#, 16#58D4F2AE#, 16#9EA294FB#, 16#52CF564C#,
            16#9883FE66#, 16#2EC40581#, 16#763953C3#, 16#01D6692E#, 16#D3A0C108#, 16#A1E7160E#, 16#E4F2DFA6#, 16#693ED285#,
            16#74904698#, 16#4C2B0EDD#, 16#4F757656#, 16#5D393378#, 16#A132234F#, 16#3D321C5D#, 16#C3F5E194#, 16#4B269301#,
            16#C79F022F#, 16#3C997E7E#, 16#5E4F9504#, 16#3FFAFBBD#, 16#76F7AD0E#, 16#296693F4#, 16#3D1FCE6F#, 16#C61E45BE#,
            16#D3B5AB34#, 16#F72BF9B7#, 16#1B0434C0#, 16#4E72B567#, 16#5592A33D#, 16#B5229301#, 16#CFD2A87F#, 16#60AEB767#,
            16#1814386B#, 16#30BCC33D#, 16#38A0C07D#, 16#FD1606F2#, 16#C363519B#, 16#589DD390#, 16#5479F8E6#, 16#1CB8D647#,
            16#97FD61A9#, 16#EA7759F4#, 16#2D57539D#, 16#569A58CF#, 16#E84E63AD#, 16#462E1B78#, 16#6580F87E#, 16#F3817914#,
            16#91DA55F4#, 16#40A230F3#, 16#D1988F35#, 16#B6E318D2#, 16#3FFA50BC#, 16#3D40F021#, 16#C3C0BDAE#, 16#4958C24C#,
            16#518F36B2#, 16#84B1D370#, 16#0FEDCE83#, 16#878DDADA#, 16#F2A279C7#, 16#94E01BE8#, 16#90716F4B#, 16#954B8AA3#
         ),
         (
            16#E216300D#, 16#BBDDFFFC#, 16#A7EBDABD#, 16#35648095#, 16#7789F8B7#, 16#E6C1121B#, 16#0E241600#, 16#052CE8B5#,
            16#11A9CFB0#, 16#E5952F11#, 16#ECE7990A#, 16#9386D174#, 16#2A42931C#, 16#76E38111#, 16#B12DEF3A#, 16#37DDDDFC#,
            16#DE9ADEB1#, 16#0A0CC32C#, 16#BE197029#, 16#84A00940#, 16#BB243A0F#, 16#B4D137CF#, 16#B44E79F0#, 16#049EEDFD#,
            16#0B15A15D#, 16#480D3168#, 16#8BBBDE5A#, 16#669DED42#, 16#C7ECE831#, 16#3F8F95E7#, 16#72DF191B#, 16#7580330D#,
            16#94074251#, 16#5C7DCDFA#, 16#ABBE6D63#, 16#AA402164#, 16#B301D40A#, 16#02E7D1CA#, 16#53571DAE#, 16#7A3182A2#,
            16#12A8DDEC#, 16#FDAA335D#, 16#176F43E8#, 16#71FB46D4#, 16#38129022#, 16#CE949AD4#, 16#B84769AD#, 16#965BD862#,
            16#82F3D055#, 16#66FB9767#, 16#15B80B4E#, 16#1D5B47A0#, 16#4CFDE06F#, 16#C28EC4B8#, 16#57E8726E#, 16#647A78FC#,
            16#99865D44#, 16#608BD593#, 16#6C200E03#, 16#39DC5FF6#, 16#5D0B00A3#, 16#AE63AFF2#, 16#7E8BD632#, 16#70108C0C#,
            16#BBD35049#, 16#2998DF04#, 16#980CF42A#, 16#9B6DF491#, 16#9E7EDD53#, 16#06918548#, 16#58CB7E07#, 16#3B74EF2E#,
            16#522FFFB1#, 16#D24708CC#, 16#1C7E27CD#, 16#A4EB215B#, 16#3CF1D2E2#, 16#19B47A38#, 16#424F7618#, 16#35856039#,
            16#9D17DEE7#, 16#27EB35E6#, 16#C9AFF67B#, 16#36BAF5B8#, 16#09C467CD#, 16#C18910B1#, 16#E11DBF7B#, 16#06CD1AF8#,
            16#7170C608#, 16#2D5E3354#, 16#D4DE495A#, 16#64C6D006#, 16#BCC0C62C#, 16#3DD00DB3#, 16#708F8F34#, 16#77D51B42#,
            16#264F620F#, 16#24B8D2BF#, 16#15C1B79E#, 16#46A52564#, 16#F8D7E54E#, 16#3E378160#, 16#7895CDA5#, 16#859C15A5#,
            16#E6459788#, 16#C37BC75F#, 16#DB07BA0C#, 16#0676A3AB#, 16#7F229B1E#, 16#31842E7B#, 16#24259FD7#, 16#F8BEF472#,
            16#835FFCB8#, 16#6DF4C1F2#, 16#96F5B195#, 16#FD0AF0FC#, 16#B0FE134C#, 16#E2506D3D#, 16#4F9B12EA#, 16#F215F225#,
            16#A223736F#, 16#9FB4C428#, 16#25D04979#, 16#34C713F8#, 16#C4618187#, 16#EA7A6E98#, 16#7CD16EFC#, 16#1436876C#,
            16#F1544107#, 16#BEDEEE14#, 16#56E9AF27#, 16#A04AA441#, 16#3CF7C899#, 16#92ECBAE6#, 16#DD67016D#, 16#151682EB#,
            16#A842EEDF#, 16#FDBA60B4#, 16#F1907B75#, 16#20E3030F#, 16#24D8C29E#, 16#E139673B#, 16#EFA63FB8#, 16#71873054#,
            16#B6F2CF3B#, 16#9F326442#, 16#CB15A4CC#, 16#B01A4504#, 16#F1E47D8D#, 16#844A1BE5#, 16#BAE7DFDC#, 16#42CBDA70#,
            16#CD7DAE0A#, 16#57E85B7A#, 16#D53F5AF6#, 16#20CF4D8C#, 16#CEA4D428#, 16#79D130A4#, 16#3486EBFB#, 16#33D3CDDC#,
            16#77853B53#, 16#37EFFCB5#, 16#C5068778#, 16#E580B3E6#, 16#4E68B8F4#, 16#C5C8B37E#, 16#0D809EA2#, 16#398FEB7C#,
            16#132A4F94#, 16#43B7950E#, 16#2FEE7D1C#, 16#223613BD#, 16#DD06CAA2#, 16#37DF932B#, 16#C4248289#, 16#ACF3EBC3#,
            16#5715F6B7#, 16#EF3478DD#, 16#F267616F#, 16#C148CBE4#, 16#9052815E#, 16#5E410FAB#, 16#B48A2465#, 16#2EDA7FA4#,
            16#E87B40E4#, 16#E98EA084#, 16#5889E9E1#, 16#EFD390FC#, 16#DD07D35B#, 16#DB485694#, 16#38D7E5B2#, 16#57720101#,
            16#730EDEBC#, 16#5B643113#, 16#94917E4F#, 16#503C2FBA#, 16#646F1282#, 16#7523D24A#, 16#E0779695#, 16#F9C17A8F#,
            16#7A5B2121#, 16#D187B896#, 16#29263A4D#, 16#BA510CDF#, 16#81F47C9F#, 16#AD1163ED#, 16#EA7B5965#, 16#1A00726E#,
            16#11403092#, 16#00DA6D77#, 16#4A0CDD61#, 16#AD1F4603#, 16#605BDFB0#, 16#9EEDC364#, 16#22EBE6A8#, 16#CEE7D28A#,
            16#A0E736A0#, 16#5564A6B9#, 16#10853209#, 16#C7EB8F37#, 16#2DE705CA#, 16#8951570F#, 16#DF09822B#, 16#BD691A6C#,
            16#AA12E4F2#, 16#87451C0F#, 16#E0F6A27A#, 16#3ADA4819#, 16#4CF1764F#, 16#0D771C2B#, 16#67CDB156#, 16#350D8384#,
            16#5938FA0F#, 16#42399EF3#, 16#36997B07#, 16#0E84093D#, 16#4AA93E61#, 16#8360D87B#, 16#1FA98B0C#, 16#1149382C#,
            16#E97625A5#, 16#0614D1B7#, 16#0E25244B#, 16#0C768347#, 16#589E8D82#, 16#0D2059D1#, 16#A466BB1E#, 16#F8DA0A82#,
            16#04F19130#, 16#BA6E4EC0#, 16#99265164#, 16#1EE7230D#, 16#50B2AD80#, 16#EAEE6801#, 16#8DB2A283#, 16#EA8BF59E#
         )
      );

   -----------------------------------------------------------------------------
   --[Type Definitions]---------------------------------------------------------
   -----------------------------------------------------------------------------

   -----------------------------------------------------------------------------
   --[Subprogram Specification]-------------------------------------------------
   -----------------------------------------------------------------------------

   --[Initialize_Object]--------------------------------------------------------

   procedure   Initialize_Object(
                  Object         : access CAST_128_Cipher);
   pragma Inline(Initialize_Object);
   
   --[HHB]----------------------------------------------------------------------

   function    HHB(
                  F              : in     Four_Bytes)
      return   Byte;
   pragma Inline(HHB);

   --[LHB]----------------------------------------------------------------------

   function    LHB(
                  F              : in     Four_Bytes)
      return   Byte;
   pragma Inline(LHB);

   --[HLB]----------------------------------------------------------------------

   function    HLB(
                  F              : in     Four_Bytes)
      return   Byte;
   pragma Inline(HLB);

   --[LLB]----------------------------------------------------------------------

   function    LLB(
                  F              : in     Four_Bytes)
      return   Byte;
   pragma Inline(LLB);

   --[F1]-----------------------------------------------------------------------

   procedure   F1(
                  L              : in out Four_Bytes;
                  R              : in     Four_Bytes;
                  EK             : in     CAST_128_Expanded_Key;
                  N              : in     Positive);
   pragma Inline(F1);

   --[F2]-----------------------------------------------------------------------

   procedure   F2(
                  L              : in out Four_Bytes;
                  R              : in     Four_Bytes;
                  EK             : in     CAST_128_Expanded_Key;
                  N              : in     Positive);
   pragma Inline(F2);

   --[F3]-----------------------------------------------------------------------

   procedure   F3(
                  L              : in out Four_Bytes;
                  R              : in     Four_Bytes;
                  EK             : in     CAST_128_Expanded_Key;
                  N              : in     Positive);
   pragma Inline(F3);

   --[Make_Key]-----------------------------------------------------------------

   procedure   Make_Key(
                  EK             : in out CAST_128_Expanded_Key;
                  KB             : in     Byte_Array;
                  R              :    out Positive);

   --[Encrypt_Block]------------------------------------------------------------

   procedure   Encrypt_Block(
                  EK             : in     CAST_128_Expanded_Key;
                  Rounds         : in     Positive;
                  Input          : in     CAST_128_Block;
                  Output         :    out CAST_128_Block);

   --[Decrypt_Block]------------------------------------------------------------

   procedure   Decrypt_Block(
                  EK             : in     CAST_128_Expanded_Key;
                  Rounds         : in     Positive;
                  Input          : in     CAST_128_Block;
                  Output         :    out CAST_128_Block);

   -----------------------------------------------------------------------------
   --[Body declared subprogram bodies]------------------------------------------
   -----------------------------------------------------------------------------

   --[Initialize_Object]--------------------------------------------------------

   procedure   Initialize_Object(
                  Object         : access CAST_128_Cipher)
   is
   begin
      -- Set to initial value any attribute which is modified in this package

      Object.all.State        := Idle;
      Object.all.Rounds       := CAST_128_Min_Rounds;
      Object.all.Expanded_Key := (others => 16#00000000#);
   end Initialize_Object;
   
   --[HHB]----------------------------------------------------------------------

   function    HHB(
                  F              : in     Four_Bytes)
      return   Byte
   is
   begin
      return Byte(Shift_Right(F, 24) and 16#0000_00FF#);
   end HHB;

   --[LHB]----------------------------------------------------------------------

   function    LHB(
                  F              : in     Four_Bytes)
      return   Byte
   is
   begin
      return Byte(Shift_Right(F, 16) and 16#0000_00FF#);
   end LHB;

   --[HLB]----------------------------------------------------------------------

   function    HLB(
                  F              : in     Four_Bytes)
      return   Byte
   is
   begin
      return Byte(Shift_Right(F, 8) and 16#0000_00FF#);
   end HLB;

   --[LLB]----------------------------------------------------------------------

   function    LLB(
                  F              : in     Four_Bytes)
      return   Byte
   is
   begin
      return Byte(F and 16#0000_00FF#);
   end LLB;

   --[F1]-----------------------------------------------------------------------

   procedure   F1(
                  L              : in out Four_Bytes;
                  R              : in     Four_Bytes;
                  EK             : in     CAST_128_Expanded_Key;
                  N              : in     Positive)
   is
      T              : constant Four_Bytes := Rotate_Left((EK(N) + R), Natural(EK(N + 16)));
      UT             : constant Unpacked_Four_Bytes := Unpack(T, Big_Endian);
   begin
      L := L xor (((S_Boxes(1, UT(1)) xor S_Boxes(2, UT(2))) - S_Boxes(3, UT(3))) + S_Boxes(4, UT(4)));
   end F1;

   --[F2]-----------------------------------------------------------------------

   procedure   F2(
                  L              : in out Four_Bytes;
                  R              : in     Four_Bytes;
                  EK             : in     CAST_128_Expanded_Key;
                  N              : in     Positive)
   is
      T              : constant Four_Bytes := Rotate_Left((EK(N) xor R), Natural(EK(N + 16)));
      UT             : constant Unpacked_Four_Bytes := Unpack(T, Big_Endian);
   begin
      L := L xor (((S_Boxes(1, UT(1)) - S_Boxes(2, UT(2))) + S_Boxes(3, UT(3))) xor S_Boxes(4, UT(4)));
   end F2;

   --[F3]-----------------------------------------------------------------------

   procedure   F3(
                  L              : in out Four_Bytes;
                  R              : in     Four_Bytes;
                  EK             : in     CAST_128_Expanded_Key;
                  N              : in     Positive)
   is
      T              : constant Four_Bytes := Rotate_Left((EK(N) - R), Natural(EK(N + 16)));
      UT             : constant Unpacked_Four_Bytes := Unpack(T, Big_Endian);
   begin
      L := L xor (((S_Boxes(1, UT(1)) + S_Boxes(2, UT(2))) xor S_Boxes(3, UT(3))) - S_Boxes(4, UT(4)));
   end F3;

   --[Make_Key]-----------------------------------------------------------------

   procedure   Make_Key(
                  EK             : in out CAST_128_Expanded_Key;
                  KB             : in     Byte_Array;
                  R              :    out Positive)
   is
      T              : Four_Bytes_Array(1 .. 4) := (others => 0);
      Z              : Four_Bytes_Array(1 .. 4) := (others => 0);
      X              : Four_Bytes_Array(1 .. 4) := (others => 0);
      S              : Natural := 24;
      J              : Positive;
   begin

      -- Set the number of rounds depending on key length.

      if KB'Length <= 10 then
         R := CAST_128_Min_Rounds;
      else
         R := CAST_128_Max_Rounds;
      end if;

      -- Copy key to workspace X.

      J := X'First;

      for I in KB'Range loop
         X(J) := X(J) or Shift_Left(Four_Bytes(KB(I)), S);

         if S = 0 then
            J := J + 1;
            S := 24;
         else
            S := S - 8;
         end if;
      end loop;

      -- Generate the 32 subkeys.

      EK := (others => 0);
      J := 1;

      while J < 32 loop

         case (Byte(J - 1) and 16#04#) is
            when 16#00# =>
   			   Z(1) := X(1) xor S_Boxes(5, LHB(X(4))) xor
   			                    S_Boxes(6, LLB(X(4))) xor
   			                    S_Boxes(7, HHB(X(4))) xor
   			                    S_Boxes(8, HLB(X(4))) xor
   			                    S_Boxes(7, HHB(X(3)));
   			   Z(2) := X(3) xor S_Boxes(5, HHB(Z(1))) xor
   			                    S_Boxes(6, HLB(Z(1))) xor
   			                    S_Boxes(7, LHB(Z(1))) xor
   			                    S_Boxes(8, LLB(Z(1))) xor
   			                    S_Boxes(8, HLB(X(3)));
   			   Z(3) := X(4) xor S_Boxes(5, LLB(Z(2))) xor
   			                    S_Boxes(6, HLB(Z(2))) xor
   			                    S_Boxes(7, LHB(Z(2))) xor
   			                    S_Boxes(8, HHB(Z(2))) xor
   			                    S_Boxes(5, LHB(X(3)));
   			   Z(4) := X(2) xor S_Boxes(5, HLB(Z(3))) xor
   			                    S_Boxes(6, LHB(Z(3))) xor
   			                    S_Boxes(7, LLB(Z(3))) xor
   			                    S_Boxes(8, HHB(Z(3))) xor
   			                    S_Boxes(6, LLB(X(3)));
               T := Z;
            when 16#04# =>
   			   X(1) := Z(3) xor S_Boxes(5, LHB(Z(2))) xor
   			                    S_Boxes(6, LLB(Z(2))) xor
   			                    S_Boxes(7, HHB(Z(2))) xor
   			                    S_Boxes(8, HLB(Z(2))) xor
   			                    S_Boxes(7, HHB(Z(1)));
   			   X(2) := Z(1) xor S_Boxes(5, HHB(X(1))) xor
   			                    S_Boxes(6, HLB(X(1))) xor
   			                    S_Boxes(7, LHB(X(1))) xor
   			                    S_Boxes(8, LLB(X(1))) xor
   			                    S_Boxes(8, HLB(Z(1)));
   			   X(3) := Z(2) xor S_Boxes(5, LLB(X(2))) xor
   			                    S_Boxes(6, HLB(X(2))) xor
   			                    S_Boxes(7, LHB(X(2))) xor
   			                    S_Boxes(8, HHB(X(2))) xor
   			                    S_Boxes(5, LHB(Z(1)));
   			   X(4) := Z(4) xor S_Boxes(5, HLB(X(3))) xor
   			                    S_Boxes(6, LHB(X(3))) xor
   			                    S_Boxes(7, LLB(X(3))) xor
   			                    S_Boxes(8, HHB(X(3))) xor
   			                    S_Boxes(6, LLB(Z(1)));
               T := X;
            when others =>
               null;
         end case;

         case (Byte(J - 1) and 16#0C#) is
            when 16#00# |
                 16#0C# =>
               EK(J)       := S_Boxes(5, HHB(T(3))) xor
                              S_Boxes(6, LHB(T(3))) xor
			                     S_Boxes(7, LLB(T(2))) xor
			                     S_Boxes(8, HLB(T(2)));
			      EK(J + 1)   := S_Boxes(5, HLB(T(3))) xor
			                     S_Boxes(6, LLB(T(3))) xor
			                     S_Boxes(7, LHB(T(2))) xor
			                     S_Boxes(8, HHB(T(2)));
			      EK(J + 2)   := S_Boxes(5, HHB(T(4))) xor
			                     S_Boxes(6, LHB(T(4))) xor
			                     S_Boxes(7, LLB(T(1))) xor
			                     S_Boxes(8, HLB(T(1)));
			      EK(J + 3)   := S_Boxes(5, HLB(T(4))) xor
			                     S_Boxes(6, LLB(T(4))) xor
			                     S_Boxes(7, LHB(T(1))) xor
			                     S_Boxes(8, HHB(T(1)));
            when 16#04# |
                 16#08# =>
               EK(J)       := S_Boxes(5, LLB(T(1))) xor
                              S_Boxes(6, HLB(T(1))) xor
			                     S_Boxes(7, HHB(T(4))) xor
			                     S_Boxes(8, LHB(T(4)));
			      EK(J + 1)   := S_Boxes(5, LHB(T(1))) xor
			                     S_Boxes(6, HHB(T(1))) xor
			                     S_Boxes(7, HLB(T(4))) xor
			                     S_Boxes(8, LLB(T(4)));
			      EK(J + 2)   := S_Boxes(5, LLB(T(2))) xor
			                     S_Boxes(6, HLB(T(2))) xor
			                     S_Boxes(7, HHB(T(3))) xor
			                     S_Boxes(8, LHB(T(3)));
			      EK(J + 3)   := S_Boxes(5, LHB(T(2))) xor
			                     S_Boxes(6, HHB(T(2))) xor
			                     S_Boxes(7, HLB(T(3))) xor
			                     S_Boxes(8, LLB(T(3)));
            when others =>
               null;
         end case;

         case (Byte(J - 1) and 16#0C#) is
            when 16#00# =>
               EK(J)       := EK(J) xor S_Boxes(5, HLB(Z(1)));
               EK(J + 1)   := EK(J + 1) xor S_Boxes(6, HLB(Z(2)));
               EK(J + 2)   := EK(J + 2) xor S_Boxes(7, LHB(Z(3)));
               EK(J + 3)   := EK(J + 3) xor S_Boxes(8, HHB(Z(4)));
            when 16#04# =>
               EK(J)       := EK(J) xor S_Boxes(5, HHB(X(3)));
               EK(J + 1)   := EK(J + 1) xor S_Boxes(6, LHB(X(4)));
               EK(J + 2)   := EK(J + 2) xor S_Boxes(7, LLB(X(1)));
               EK(J + 3)   := EK(J + 3) xor S_Boxes(8, LLB(X(2)));
            when 16#08# =>
               EK(J)       := EK(J) xor S_Boxes(5, LHB(Z(3)));
               EK(J + 1)   := EK(J + 1) xor S_Boxes(6, HHB(Z(4)));
               EK(J + 2)   := EK(J + 2) xor S_Boxes(7, HLB(Z(1)));
               EK(J + 3)   := EK(J + 3) xor S_Boxes(8, HLB(Z(2)));
            when 16#0C# =>
               EK(J)       := EK(J) xor S_Boxes(5, LLB(X(1)));
               EK(J + 1)   := EK(J + 1) xor S_Boxes(6, LLB(X(2)));
               EK(J + 2)   := EK(J + 2) xor S_Boxes(7, HHB(X(3)));
               EK(J + 3)   := EK(J + 3) xor S_Boxes(8, LHB(X(4)));
            when others =>
               null;
         end case;

         if J >= 17 then
            EK(J)       := EK(J) and 16#0000_001F#;
            EK(J + 1)   := EK(J + 1) and 16#0000_001F#;
            EK(J + 2)   := EK(J + 2) and 16#0000_001F#;
            EK(J + 3)   := EK(J + 3) and 16#0000_001F#;
         end if;

         J := J + 4;
      end loop;
   end Make_Key;

   --[Encrypt_Block]------------------------------------------------------------

   procedure   Encrypt_Block(
                  EK             : in     CAST_128_Expanded_Key;
                  Rounds         : in     Positive;
                  Input          : in     CAST_128_Block;
                  Output         :    out CAST_128_Block)
   is
      L              : Four_Bytes := Pack(Input(1 .. 4), Big_Endian);
      R              : Four_Bytes := Pack(Input(5 .. 8), Big_Endian);
   begin
      F1(L, R, EK,  1);
      F2(R, L, EK,  2);
      F3(L, R, EK,  3);
      F1(R, L, EK,  4);
      F2(L, R, EK,  5);
      F3(R, L, EK,  6);
      F1(L, R, EK,  7);
      F2(R, L, EK,  8);
      F3(L, R, EK,  9);
      F1(R, L, EK, 10);
      F2(L, R, EK, 11);
      F3(R, L, EK, 12);

      if Rounds = CAST_128_Max_Rounds then
         F1(L, R, EK, 13);
         F2(R, L, EK, 14);
         F3(L, R, EK, 15);
         F1(R, L, EK, 16);
      end if;

      -- Put L, R into output block.

      Output(1 .. 4) := Unpack(R, Big_Endian);
      Output(5 .. 8) := Unpack(L, Big_Endian);
   end Encrypt_Block;

   --[Decrypt_Block]------------------------------------------------------------

   procedure   Decrypt_Block(
                  EK             : in     CAST_128_Expanded_Key;
                  Rounds         : in     Positive;
                  Input          : in     CAST_128_Block;
                  Output         :    out CAST_128_Block)
   is
      R              : Four_Bytes := Pack(Input(1 .. 4), Big_Endian);
      L              : Four_Bytes := Pack(Input(5 .. 8), Big_Endian);
   begin

      if Rounds = CAST_128_Max_Rounds then
         F1(R, L, EK, 16);
         F3(L, R, EK, 15);
         F2(R, L, EK, 14);
         F1(L, R, EK, 13);
      end if;

      F3(R, L, EK, 12);
      F2(L, R, EK, 11);
      F1(R, L, EK, 10);
      F3(L, R, EK,  9);
      F2(R, L, EK,  8);
      F1(L, R, EK,  7);
      F3(R, L, EK,  6);
      F2(L, R, EK,  5);
      F1(R, L, EK,  4);
      F3(L, R, EK,  3);
      F2(R, L, EK,  2);
      F1(L, R, EK,  1);

      Output(1 .. 4) := Unpack(L, Big_Endian);
      Output(5 .. 8) := Unpack(R, Big_Endian);
   end Decrypt_Block;

   -----------------------------------------------------------------------------
   --[Getting a handle]---------------------------------------------------------
   -----------------------------------------------------------------------------

   --[Get_Symmetric_Cipher_Handle]----------------------------------------------

   function    Get_Symmetric_Cipher_Handle
      return   Symmetric_Cipher_Handle
   is
      P           : CAST_128_Cipher_Ptr;
   begin
      P := new CAST_128_Cipher'(Block_Cipher with
                                    Id             => SC_CAST_128,
                                    Rounds         => CAST_128_Min_Rounds,
                                    Expanded_Key   => (others => 16#00000000#));
                                 
      P.all.Ciph_Type   := CryptAda.Ciphers.Block_Cipher;
      P.all.Key_Info    := CAST_128_Key_Info;
      P.all.State       := Idle;
      P.all.Block_Size  := CAST_128_Block_Size;

      return Ref(Symmetric_Cipher_Ptr(P));
   exception
      when X: others =>
         Raise_Exception(
            CryptAda_Storage_Error'Identity,
            "Caught exception: '" &
               Exception_Name(X) &
               "' with message: '" &
               Exception_Message(X) &
               "', when allocating CAST_128_Cipher object");
   end Get_Symmetric_Cipher_Handle;

   -----------------------------------------------------------------------------
   --[Ada.Finalization Operations]----------------------------------------------
   -----------------------------------------------------------------------------

   --[Initialize]---------------------------------------------------------------

   overriding
   procedure   Initialize(
                  Object         : in out CAST_128_Cipher)
   is
   begin
      Object.Ciph_Type     := CryptAda.Ciphers.Block_Cipher;
      Object.Key_Info      := CAST_128_Key_Info;
      Object.State         := Idle;
      Object.Block_Size    := CAST_128_Block_Size;
      Object.Rounds        := CAST_128_Min_Rounds;
      Object.Expanded_Key  := (others => 16#00000000#);
   end Initialize;

   --[Finalize]-----------------------------------------------------------------

   overriding
   procedure   Finalize(
                  Object         : in out CAST_128_Cipher)
   is
   begin
      Object.State         := Idle;
      Object.Rounds        := CAST_128_Min_Rounds;
      Object.Expanded_Key  := (others => 16#00000000#);
   end Finalize;

   -----------------------------------------------------------------------------
   --[Dispatching operations]---------------------------------------------------
   -----------------------------------------------------------------------------
   
   --[Start_Cipher]-------------------------------------------------------------

   overriding
   procedure   Start_Cipher(
                  The_Cipher     : access CAST_128_Cipher;
                  For_Operation  : in     Cipher_Operation;
                  With_Key       : in     Key)
   is
   begin
      -- Verify that With_Key is a valid key.

      if not Is_Valid_CAST_128_Key(With_Key) then
         Raise_Exception(
            CryptAda_Invalid_Key_Error'Identity,
            "Invalid CAST_128 key");
      end if;

      -- Make internal key.

      Make_Key(The_Cipher.all.Expanded_Key, Get_Key_Bytes(With_Key), The_Cipher.all.Rounds);

      if For_Operation = Encrypt then
         The_Cipher.all.State := Encrypting;
      else
         The_Cipher.all.State := Decrypting;
      end if;
   end Start_Cipher;

   --[Start_Cipher]-------------------------------------------------------------

   overriding
   procedure   Start_Cipher(
                  The_Cipher     : access CAST_128_Cipher;
                  Parameters     : in     List)
   is
      O              : Cipher_Operation;
      K              : Key;
   begin
      Get_Parameters(Parameters, O, K);
      Start_Cipher(The_Cipher, O, K);
   end Start_Cipher;
   
   --[Do_Process]---------------------------------------------------------------

   overriding
   procedure   Do_Process(
                  With_Cipher    : access CAST_128_Cipher;
                  Input          : in     Byte_Array;
                  Output         :    out Byte_Array)
   is
   begin
      -- Check state.

      if With_Cipher.all.State = Idle then
         Raise_Exception(
            CryptAda_Uninitialized_Cipher_Error'Identity,
            "CAST_128 cipher is in Idle state");
      end if;

      -- Check blocks.

      if Input'Length /= CAST_128_Block_Size or
         Output'Length /= CAST_128_Block_Size then
         Raise_Exception(
            CryptAda_Invalid_Block_Length_Error'Identity,
            "Invalid block length");               
      end if;

      -- Process block.
      
      if With_Cipher.all.State = Encrypting then
         Encrypt_Block(With_Cipher.all.Expanded_Key, With_Cipher.all.Rounds, Input, Output);
      else
         Decrypt_Block(With_Cipher.all.Expanded_Key, With_Cipher.all.Rounds, Input, Output);
      end if;
   end Do_Process;

   --[Stop_Cipher]--------------------------------------------------------------

   overriding
   procedure   Stop_Cipher(
                  The_Cipher     : access CAST_128_Cipher)
   is
   begin
      Initialize_Object(The_Cipher);
   end Stop_Cipher;

   --[Is_Valid_Key]-------------------------------------------------------------

   pragma Warnings (Off, "formal parameter ""For_Cipher"" is not referenced");
   overriding
   function    Is_Valid_Key(
                  For_Cipher     : access CAST_128_Cipher;
                  The_Key        : in     CryptAda.Ciphers.Keys.Key)
      return Boolean
   is
   pragma Warnings (On, "formal parameter ""For_Cipher"" is not referenced");
   begin
      return Is_Valid_CAST_128_Key(The_Key);
   end Is_Valid_Key;
   
   -----------------------------------------------------------------------------
   --[Non-Dispatching operations]-----------------------------------------------
   -----------------------------------------------------------------------------

   --[Is_Valid_CAST_128_Key]----------------------------------------------------

   function    Is_Valid_CAST_128_Key(
                  The_Key        : in     Key)
      return   Boolean
   is
   begin
      if Is_Null(The_Key) then
         return False;
      else
         return (Get_Key_Length(The_Key) in CAST_128_Key_Length);
      end if;
   end Is_Valid_CAST_128_Key;

end CryptAda.Ciphers.Symmetric.Block.CAST_128;
