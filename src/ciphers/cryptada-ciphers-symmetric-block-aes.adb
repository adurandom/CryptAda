--------------------------------------------------------------------------------
--                      (c) 2017, TCantos Software                            --
--                           aduran@tcantos.com                               --
--------------------------------------------------------------------------------
--  This program is free software: you can redistribute it and/or modify  it  --
--  under the terms of  the GNU General Public  License as published by  the  --
--  Free Software Foundation, either version  3 of the License, or  (at your  --
--  option) any later version.                                                --
--                                                                            --
--  This program  is distributed  in the  hope that  it will  be useful, but  --
--  WITHOUT   ANY   WARRANTY;   without  even   the   implied   warranty  of  --
--  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General  --
--  Public License for more details.                                          --
--                                                                            --
--  You should have received a copy of the GNU General Public License  along  --
--  with this program. If not, see <http://www.gnu.org/licenses/>.            --
--------------------------------------------------------------------------------
-- 1. Identification
--    Filename          :  cryptada-ciphers-symmetric-block-aes.adb
--    File kind         :  Ada package body
--    Author            :  A. Duran
--    Creation date     :  March 25th, 2017
--    Current version   :  2.0
--------------------------------------------------------------------------------
-- 2. Purpose:
--    Implements the AES block cipher.
--------------------------------------------------------------------------------
-- 3. Revision history
--    Ver   When     Who   Why
--    ----- -------- ----- -----------------------------------------------------
--    1.0   20170325 ADD   Initial implementation.
--    1.1   20170330 ADD   Removed key generation subprogram.
--    1.2   20170403 ADD   Changed symmetric ciphers hierarchy.
--    2.0   20170529 ADD   Changed types.
--------------------------------------------------------------------------------

with Ada.Exceptions;                      use Ada.Exceptions;
with Ada.Unchecked_Deallocation;

with CryptAda.Pragmatics;                 use CryptAda.Pragmatics;
with CryptAda.Lists;                      use CryptAda.Lists;
with CryptAda.Names;                      use CryptAda.Names;
with CryptAda.Exceptions;                 use CryptAda.Exceptions;
with CryptAda.Ciphers.Keys;               use CryptAda.Ciphers.Keys;

package body CryptAda.Ciphers.Symmetric.Block.AES is

   -----------------------------------------------------------------------------
   --[Generic Instantiation]----------------------------------------------------
   -----------------------------------------------------------------------------
   
   procedure Free is new Ada.Unchecked_Deallocation(Four_Bytes_Array, AES_Round_Keys);

   -----------------------------------------------------------------------------
   --[Constants]----------------------------------------------------------------
   -----------------------------------------------------------------------------

   --[AES_Block_Words]----------------------------------------------------------
   -- Size in words of AES blocks.
   -----------------------------------------------------------------------------
   
   AES_Block_Words               : constant Positive := AES_Block_Size / AES_Word_Size;
   
   --[Forward (encrypt) AES tables]---------------------------------------------
   -- Next tables are used in encryption.
   -----------------------------------------------------------------------------

   Te_0                          : constant array(Byte) of Four_Bytes :=
      (
         16#C66363A5#, 16#F87C7C84#, 16#EE777799#, 16#F67B7B8D#, 16#FFF2F20D#, 16#D66B6BBD#, 16#DE6F6FB1#, 16#91C5C554#,
         16#60303050#, 16#02010103#, 16#CE6767A9#, 16#562B2B7D#, 16#E7FEFE19#, 16#B5D7D762#, 16#4DABABE6#, 16#EC76769A#,
         16#8FCACA45#, 16#1F82829D#, 16#89C9C940#, 16#FA7D7D87#, 16#EFFAFA15#, 16#B25959EB#, 16#8E4747C9#, 16#FBF0F00B#,
         16#41ADADEC#, 16#B3D4D467#, 16#5FA2A2FD#, 16#45AFAFEA#, 16#239C9CBF#, 16#53A4A4F7#, 16#E4727296#, 16#9BC0C05B#,
         16#75B7B7C2#, 16#E1FDFD1C#, 16#3D9393AE#, 16#4C26266A#, 16#6C36365A#, 16#7E3F3F41#, 16#F5F7F702#, 16#83CCCC4F#,
         16#6834345C#, 16#51A5A5F4#, 16#D1E5E534#, 16#F9F1F108#, 16#E2717193#, 16#ABD8D873#, 16#62313153#, 16#2A15153F#,
         16#0804040C#, 16#95C7C752#, 16#46232365#, 16#9DC3C35E#, 16#30181828#, 16#379696A1#, 16#0A05050F#, 16#2F9A9AB5#,
         16#0E070709#, 16#24121236#, 16#1B80809B#, 16#DFE2E23D#, 16#CDEBEB26#, 16#4E272769#, 16#7FB2B2CD#, 16#EA75759F#,
         16#1209091B#, 16#1D83839E#, 16#582C2C74#, 16#341A1A2E#, 16#361B1B2D#, 16#DC6E6EB2#, 16#B45A5AEE#, 16#5BA0A0FB#,
         16#A45252F6#, 16#763B3B4D#, 16#B7D6D661#, 16#7DB3B3CE#, 16#5229297B#, 16#DDE3E33E#, 16#5E2F2F71#, 16#13848497#,
         16#A65353F5#, 16#B9D1D168#, 16#00000000#, 16#C1EDED2C#, 16#40202060#, 16#E3FCFC1F#, 16#79B1B1C8#, 16#B65B5BED#,
         16#D46A6ABE#, 16#8DCBCB46#, 16#67BEBED9#, 16#7239394B#, 16#944A4ADE#, 16#984C4CD4#, 16#B05858E8#, 16#85CFCF4A#,
         16#BBD0D06B#, 16#C5EFEF2A#, 16#4FAAAAE5#, 16#EDFBFB16#, 16#864343C5#, 16#9A4D4DD7#, 16#66333355#, 16#11858594#,
         16#8A4545CF#, 16#E9F9F910#, 16#04020206#, 16#FE7F7F81#, 16#A05050F0#, 16#783C3C44#, 16#259F9FBA#, 16#4BA8A8E3#,
         16#A25151F3#, 16#5DA3A3FE#, 16#804040C0#, 16#058F8F8A#, 16#3F9292AD#, 16#219D9DBC#, 16#70383848#, 16#F1F5F504#,
         16#63BCBCDF#, 16#77B6B6C1#, 16#AFDADA75#, 16#42212163#, 16#20101030#, 16#E5FFFF1A#, 16#FDF3F30E#, 16#BFD2D26D#,
         16#81CDCD4C#, 16#180C0C14#, 16#26131335#, 16#C3ECEC2F#, 16#BE5F5FE1#, 16#359797A2#, 16#884444CC#, 16#2E171739#,
         16#93C4C457#, 16#55A7A7F2#, 16#FC7E7E82#, 16#7A3D3D47#, 16#C86464AC#, 16#BA5D5DE7#, 16#3219192B#, 16#E6737395#,
         16#C06060A0#, 16#19818198#, 16#9E4F4FD1#, 16#A3DCDC7F#, 16#44222266#, 16#542A2A7E#, 16#3B9090AB#, 16#0B888883#,
         16#8C4646CA#, 16#C7EEEE29#, 16#6BB8B8D3#, 16#2814143C#, 16#A7DEDE79#, 16#BC5E5EE2#, 16#160B0B1D#, 16#ADDBDB76#,
         16#DBE0E03B#, 16#64323256#, 16#743A3A4E#, 16#140A0A1E#, 16#924949DB#, 16#0C06060A#, 16#4824246C#, 16#B85C5CE4#,
         16#9FC2C25D#, 16#BDD3D36E#, 16#43ACACEF#, 16#C46262A6#, 16#399191A8#, 16#319595A4#, 16#D3E4E437#, 16#F279798B#,
         16#D5E7E732#, 16#8BC8C843#, 16#6E373759#, 16#DA6D6DB7#, 16#018D8D8C#, 16#B1D5D564#, 16#9C4E4ED2#, 16#49A9A9E0#,
         16#D86C6CB4#, 16#AC5656FA#, 16#F3F4F407#, 16#CFEAEA25#, 16#CA6565AF#, 16#F47A7A8E#, 16#47AEAEE9#, 16#10080818#,
         16#6FBABAD5#, 16#F0787888#, 16#4A25256F#, 16#5C2E2E72#, 16#381C1C24#, 16#57A6A6F1#, 16#73B4B4C7#, 16#97C6C651#,
         16#CBE8E823#, 16#A1DDDD7C#, 16#E874749C#, 16#3E1F1F21#, 16#964B4BDD#, 16#61BDBDDC#, 16#0D8B8B86#, 16#0F8A8A85#,
         16#E0707090#, 16#7C3E3E42#, 16#71B5B5C4#, 16#CC6666AA#, 16#904848D8#, 16#06030305#, 16#F7F6F601#, 16#1C0E0E12#,
         16#C26161A3#, 16#6A35355F#, 16#AE5757F9#, 16#69B9B9D0#, 16#17868691#, 16#99C1C158#, 16#3A1D1D27#, 16#279E9EB9#,
         16#D9E1E138#, 16#EBF8F813#, 16#2B9898B3#, 16#22111133#, 16#D26969BB#, 16#A9D9D970#, 16#078E8E89#, 16#339494A7#,
         16#2D9B9BB6#, 16#3C1E1E22#, 16#15878792#, 16#C9E9E920#, 16#87CECE49#, 16#AA5555FF#, 16#50282878#, 16#A5DFDF7A#,
         16#038C8C8F#, 16#59A1A1F8#, 16#09898980#, 16#1A0D0D17#, 16#65BFBFDA#, 16#D7E6E631#, 16#844242C6#, 16#D06868B8#,
         16#824141C3#, 16#299999B0#, 16#5A2D2D77#, 16#1E0F0F11#, 16#7BB0B0CB#, 16#A85454FC#, 16#6DBBBBD6#, 16#2C16163A#
      );
   
   Te_1                          : constant array(Byte) of Four_Bytes :=
      (
         16#A5C66363#, 16#84F87C7C#, 16#99EE7777#, 16#8DF67B7B#, 16#0DFFF2F2#, 16#BDD66B6B#, 16#B1DE6F6F#, 16#5491C5C5#,
         16#50603030#, 16#03020101#, 16#A9CE6767#, 16#7D562B2B#, 16#19E7FEFE#, 16#62B5D7D7#, 16#E64DABAB#, 16#9AEC7676#,
         16#458FCACA#, 16#9D1F8282#, 16#4089C9C9#, 16#87FA7D7D#, 16#15EFFAFA#, 16#EBB25959#, 16#C98E4747#, 16#0BFBF0F0#,
         16#EC41ADAD#, 16#67B3D4D4#, 16#FD5FA2A2#, 16#EA45AFAF#, 16#BF239C9C#, 16#F753A4A4#, 16#96E47272#, 16#5B9BC0C0#,
         16#C275B7B7#, 16#1CE1FDFD#, 16#AE3D9393#, 16#6A4C2626#, 16#5A6C3636#, 16#417E3F3F#, 16#02F5F7F7#, 16#4F83CCCC#,
         16#5C683434#, 16#F451A5A5#, 16#34D1E5E5#, 16#08F9F1F1#, 16#93E27171#, 16#73ABD8D8#, 16#53623131#, 16#3F2A1515#,
         16#0C080404#, 16#5295C7C7#, 16#65462323#, 16#5E9DC3C3#, 16#28301818#, 16#A1379696#, 16#0F0A0505#, 16#B52F9A9A#,
         16#090E0707#, 16#36241212#, 16#9B1B8080#, 16#3DDFE2E2#, 16#26CDEBEB#, 16#694E2727#, 16#CD7FB2B2#, 16#9FEA7575#,
         16#1B120909#, 16#9E1D8383#, 16#74582C2C#, 16#2E341A1A#, 16#2D361B1B#, 16#B2DC6E6E#, 16#EEB45A5A#, 16#FB5BA0A0#,
         16#F6A45252#, 16#4D763B3B#, 16#61B7D6D6#, 16#CE7DB3B3#, 16#7B522929#, 16#3EDDE3E3#, 16#715E2F2F#, 16#97138484#,
         16#F5A65353#, 16#68B9D1D1#, 16#00000000#, 16#2CC1EDED#, 16#60402020#, 16#1FE3FCFC#, 16#C879B1B1#, 16#EDB65B5B#,
         16#BED46A6A#, 16#468DCBCB#, 16#D967BEBE#, 16#4B723939#, 16#DE944A4A#, 16#D4984C4C#, 16#E8B05858#, 16#4A85CFCF#,
         16#6BBBD0D0#, 16#2AC5EFEF#, 16#E54FAAAA#, 16#16EDFBFB#, 16#C5864343#, 16#D79A4D4D#, 16#55663333#, 16#94118585#,
         16#CF8A4545#, 16#10E9F9F9#, 16#06040202#, 16#81FE7F7F#, 16#F0A05050#, 16#44783C3C#, 16#BA259F9F#, 16#E34BA8A8#,
         16#F3A25151#, 16#FE5DA3A3#, 16#C0804040#, 16#8A058F8F#, 16#AD3F9292#, 16#BC219D9D#, 16#48703838#, 16#04F1F5F5#,
         16#DF63BCBC#, 16#C177B6B6#, 16#75AFDADA#, 16#63422121#, 16#30201010#, 16#1AE5FFFF#, 16#0EFDF3F3#, 16#6DBFD2D2#,
         16#4C81CDCD#, 16#14180C0C#, 16#35261313#, 16#2FC3ECEC#, 16#E1BE5F5F#, 16#A2359797#, 16#CC884444#, 16#392E1717#,
         16#5793C4C4#, 16#F255A7A7#, 16#82FC7E7E#, 16#477A3D3D#, 16#ACC86464#, 16#E7BA5D5D#, 16#2B321919#, 16#95E67373#,
         16#A0C06060#, 16#98198181#, 16#D19E4F4F#, 16#7FA3DCDC#, 16#66442222#, 16#7E542A2A#, 16#AB3B9090#, 16#830B8888#,
         16#CA8C4646#, 16#29C7EEEE#, 16#D36BB8B8#, 16#3C281414#, 16#79A7DEDE#, 16#E2BC5E5E#, 16#1D160B0B#, 16#76ADDBDB#,
         16#3BDBE0E0#, 16#56643232#, 16#4E743A3A#, 16#1E140A0A#, 16#DB924949#, 16#0A0C0606#, 16#6C482424#, 16#E4B85C5C#,
         16#5D9FC2C2#, 16#6EBDD3D3#, 16#EF43ACAC#, 16#A6C46262#, 16#A8399191#, 16#A4319595#, 16#37D3E4E4#, 16#8BF27979#,
         16#32D5E7E7#, 16#438BC8C8#, 16#596E3737#, 16#B7DA6D6D#, 16#8C018D8D#, 16#64B1D5D5#, 16#D29C4E4E#, 16#E049A9A9#,
         16#B4D86C6C#, 16#FAAC5656#, 16#07F3F4F4#, 16#25CFEAEA#, 16#AFCA6565#, 16#8EF47A7A#, 16#E947AEAE#, 16#18100808#,
         16#D56FBABA#, 16#88F07878#, 16#6F4A2525#, 16#725C2E2E#, 16#24381C1C#, 16#F157A6A6#, 16#C773B4B4#, 16#5197C6C6#,
         16#23CBE8E8#, 16#7CA1DDDD#, 16#9CE87474#, 16#213E1F1F#, 16#DD964B4B#, 16#DC61BDBD#, 16#860D8B8B#, 16#850F8A8A#,
         16#90E07070#, 16#427C3E3E#, 16#C471B5B5#, 16#AACC6666#, 16#D8904848#, 16#05060303#, 16#01F7F6F6#, 16#121C0E0E#,
         16#A3C26161#, 16#5F6A3535#, 16#F9AE5757#, 16#D069B9B9#, 16#91178686#, 16#5899C1C1#, 16#273A1D1D#, 16#B9279E9E#,
         16#38D9E1E1#, 16#13EBF8F8#, 16#B32B9898#, 16#33221111#, 16#BBD26969#, 16#70A9D9D9#, 16#89078E8E#, 16#A7339494#,
         16#B62D9B9B#, 16#223C1E1E#, 16#92158787#, 16#20C9E9E9#, 16#4987CECE#, 16#FFAA5555#, 16#78502828#, 16#7AA5DFDF#,
         16#8F038C8C#, 16#F859A1A1#, 16#80098989#, 16#171A0D0D#, 16#DA65BFBF#, 16#31D7E6E6#, 16#C6844242#, 16#B8D06868#,
         16#C3824141#, 16#B0299999#, 16#775A2D2D#, 16#111E0F0F#, 16#CB7BB0B0#, 16#FCA85454#, 16#D66DBBBB#, 16#3A2C1616#
      );

   Te_2                          : constant array(Byte) of Four_Bytes :=
      (
         16#63A5C663#, 16#7C84F87C#, 16#7799EE77#, 16#7B8DF67B#, 16#F20DFFF2#, 16#6BBDD66B#, 16#6FB1DE6F#, 16#C55491C5#,
         16#30506030#, 16#01030201#, 16#67A9CE67#, 16#2B7D562B#, 16#FE19E7FE#, 16#D762B5D7#, 16#ABE64DAB#, 16#769AEC76#,
         16#CA458FCA#, 16#829D1F82#, 16#C94089C9#, 16#7D87FA7D#, 16#FA15EFFA#, 16#59EBB259#, 16#47C98E47#, 16#F00BFBF0#,
         16#ADEC41AD#, 16#D467B3D4#, 16#A2FD5FA2#, 16#AFEA45AF#, 16#9CBF239C#, 16#A4F753A4#, 16#7296E472#, 16#C05B9BC0#,
         16#B7C275B7#, 16#FD1CE1FD#, 16#93AE3D93#, 16#266A4C26#, 16#365A6C36#, 16#3F417E3F#, 16#F702F5F7#, 16#CC4F83CC#,
         16#345C6834#, 16#A5F451A5#, 16#E534D1E5#, 16#F108F9F1#, 16#7193E271#, 16#D873ABD8#, 16#31536231#, 16#153F2A15#,
         16#040C0804#, 16#C75295C7#, 16#23654623#, 16#C35E9DC3#, 16#18283018#, 16#96A13796#, 16#050F0A05#, 16#9AB52F9A#,
         16#07090E07#, 16#12362412#, 16#809B1B80#, 16#E23DDFE2#, 16#EB26CDEB#, 16#27694E27#, 16#B2CD7FB2#, 16#759FEA75#,
         16#091B1209#, 16#839E1D83#, 16#2C74582C#, 16#1A2E341A#, 16#1B2D361B#, 16#6EB2DC6E#, 16#5AEEB45A#, 16#A0FB5BA0#,
         16#52F6A452#, 16#3B4D763B#, 16#D661B7D6#, 16#B3CE7DB3#, 16#297B5229#, 16#E33EDDE3#, 16#2F715E2F#, 16#84971384#,
         16#53F5A653#, 16#D168B9D1#, 16#00000000#, 16#ED2CC1ED#, 16#20604020#, 16#FC1FE3FC#, 16#B1C879B1#, 16#5BEDB65B#,
         16#6ABED46A#, 16#CB468DCB#, 16#BED967BE#, 16#394B7239#, 16#4ADE944A#, 16#4CD4984C#, 16#58E8B058#, 16#CF4A85CF#,
         16#D06BBBD0#, 16#EF2AC5EF#, 16#AAE54FAA#, 16#FB16EDFB#, 16#43C58643#, 16#4DD79A4D#, 16#33556633#, 16#85941185#,
         16#45CF8A45#, 16#F910E9F9#, 16#02060402#, 16#7F81FE7F#, 16#50F0A050#, 16#3C44783C#, 16#9FBA259F#, 16#A8E34BA8#,
         16#51F3A251#, 16#A3FE5DA3#, 16#40C08040#, 16#8F8A058F#, 16#92AD3F92#, 16#9DBC219D#, 16#38487038#, 16#F504F1F5#,
         16#BCDF63BC#, 16#B6C177B6#, 16#DA75AFDA#, 16#21634221#, 16#10302010#, 16#FF1AE5FF#, 16#F30EFDF3#, 16#D26DBFD2#,
         16#CD4C81CD#, 16#0C14180C#, 16#13352613#, 16#EC2FC3EC#, 16#5FE1BE5F#, 16#97A23597#, 16#44CC8844#, 16#17392E17#,
         16#C45793C4#, 16#A7F255A7#, 16#7E82FC7E#, 16#3D477A3D#, 16#64ACC864#, 16#5DE7BA5D#, 16#192B3219#, 16#7395E673#,
         16#60A0C060#, 16#81981981#, 16#4FD19E4F#, 16#DC7FA3DC#, 16#22664422#, 16#2A7E542A#, 16#90AB3B90#, 16#88830B88#,
         16#46CA8C46#, 16#EE29C7EE#, 16#B8D36BB8#, 16#143C2814#, 16#DE79A7DE#, 16#5EE2BC5E#, 16#0B1D160B#, 16#DB76ADDB#,
         16#E03BDBE0#, 16#32566432#, 16#3A4E743A#, 16#0A1E140A#, 16#49DB9249#, 16#060A0C06#, 16#246C4824#, 16#5CE4B85C#,
         16#C25D9FC2#, 16#D36EBDD3#, 16#ACEF43AC#, 16#62A6C462#, 16#91A83991#, 16#95A43195#, 16#E437D3E4#, 16#798BF279#,
         16#E732D5E7#, 16#C8438BC8#, 16#37596E37#, 16#6DB7DA6D#, 16#8D8C018D#, 16#D564B1D5#, 16#4ED29C4E#, 16#A9E049A9#,
         16#6CB4D86C#, 16#56FAAC56#, 16#F407F3F4#, 16#EA25CFEA#, 16#65AFCA65#, 16#7A8EF47A#, 16#AEE947AE#, 16#08181008#,
         16#BAD56FBA#, 16#7888F078#, 16#256F4A25#, 16#2E725C2E#, 16#1C24381C#, 16#A6F157A6#, 16#B4C773B4#, 16#C65197C6#,
         16#E823CBE8#, 16#DD7CA1DD#, 16#749CE874#, 16#1F213E1F#, 16#4BDD964B#, 16#BDDC61BD#, 16#8B860D8B#, 16#8A850F8A#,
         16#7090E070#, 16#3E427C3E#, 16#B5C471B5#, 16#66AACC66#, 16#48D89048#, 16#03050603#, 16#F601F7F6#, 16#0E121C0E#,
         16#61A3C261#, 16#355F6A35#, 16#57F9AE57#, 16#B9D069B9#, 16#86911786#, 16#C15899C1#, 16#1D273A1D#, 16#9EB9279E#,
         16#E138D9E1#, 16#F813EBF8#, 16#98B32B98#, 16#11332211#, 16#69BBD269#, 16#D970A9D9#, 16#8E89078E#, 16#94A73394#,
         16#9BB62D9B#, 16#1E223C1E#, 16#87921587#, 16#E920C9E9#, 16#CE4987CE#, 16#55FFAA55#, 16#28785028#, 16#DF7AA5DF#,
         16#8C8F038C#, 16#A1F859A1#, 16#89800989#, 16#0D171A0D#, 16#BFDA65BF#, 16#E631D7E6#, 16#42C68442#, 16#68B8D068#,
         16#41C38241#, 16#99B02999#, 16#2D775A2D#, 16#0F111E0F#, 16#B0CB7BB0#, 16#54FCA854#, 16#BBD66DBB#, 16#163A2C16#
      );

   Te_3                          : constant array(Byte) of Four_Bytes :=
      (
         16#6363A5C6#, 16#7C7C84F8#, 16#777799EE#, 16#7B7B8DF6#, 16#F2F20DFF#, 16#6B6BBDD6#, 16#6F6FB1DE#, 16#C5C55491#,
         16#30305060#, 16#01010302#, 16#6767A9CE#, 16#2B2B7D56#, 16#FEFE19E7#, 16#D7D762B5#, 16#ABABE64D#, 16#76769AEC#,
         16#CACA458F#, 16#82829D1F#, 16#C9C94089#, 16#7D7D87FA#, 16#FAFA15EF#, 16#5959EBB2#, 16#4747C98E#, 16#F0F00BFB#,
         16#ADADEC41#, 16#D4D467B3#, 16#A2A2FD5F#, 16#AFAFEA45#, 16#9C9CBF23#, 16#A4A4F753#, 16#727296E4#, 16#C0C05B9B#,
         16#B7B7C275#, 16#FDFD1CE1#, 16#9393AE3D#, 16#26266A4C#, 16#36365A6C#, 16#3F3F417E#, 16#F7F702F5#, 16#CCCC4F83#,
         16#34345C68#, 16#A5A5F451#, 16#E5E534D1#, 16#F1F108F9#, 16#717193E2#, 16#D8D873AB#, 16#31315362#, 16#15153F2A#,
         16#04040C08#, 16#C7C75295#, 16#23236546#, 16#C3C35E9D#, 16#18182830#, 16#9696A137#, 16#05050F0A#, 16#9A9AB52F#,
         16#0707090E#, 16#12123624#, 16#80809B1B#, 16#E2E23DDF#, 16#EBEB26CD#, 16#2727694E#, 16#B2B2CD7F#, 16#75759FEA#,
         16#09091B12#, 16#83839E1D#, 16#2C2C7458#, 16#1A1A2E34#, 16#1B1B2D36#, 16#6E6EB2DC#, 16#5A5AEEB4#, 16#A0A0FB5B#,
         16#5252F6A4#, 16#3B3B4D76#, 16#D6D661B7#, 16#B3B3CE7D#, 16#29297B52#, 16#E3E33EDD#, 16#2F2F715E#, 16#84849713#,
         16#5353F5A6#, 16#D1D168B9#, 16#00000000#, 16#EDED2CC1#, 16#20206040#, 16#FCFC1FE3#, 16#B1B1C879#, 16#5B5BEDB6#,
         16#6A6ABED4#, 16#CBCB468D#, 16#BEBED967#, 16#39394B72#, 16#4A4ADE94#, 16#4C4CD498#, 16#5858E8B0#, 16#CFCF4A85#,
         16#D0D06BBB#, 16#EFEF2AC5#, 16#AAAAE54F#, 16#FBFB16ED#, 16#4343C586#, 16#4D4DD79A#, 16#33335566#, 16#85859411#,
         16#4545CF8A#, 16#F9F910E9#, 16#02020604#, 16#7F7F81FE#, 16#5050F0A0#, 16#3C3C4478#, 16#9F9FBA25#, 16#A8A8E34B#,
         16#5151F3A2#, 16#A3A3FE5D#, 16#4040C080#, 16#8F8F8A05#, 16#9292AD3F#, 16#9D9DBC21#, 16#38384870#, 16#F5F504F1#,
         16#BCBCDF63#, 16#B6B6C177#, 16#DADA75AF#, 16#21216342#, 16#10103020#, 16#FFFF1AE5#, 16#F3F30EFD#, 16#D2D26DBF#,
         16#CDCD4C81#, 16#0C0C1418#, 16#13133526#, 16#ECEC2FC3#, 16#5F5FE1BE#, 16#9797A235#, 16#4444CC88#, 16#1717392E#,
         16#C4C45793#, 16#A7A7F255#, 16#7E7E82FC#, 16#3D3D477A#, 16#6464ACC8#, 16#5D5DE7BA#, 16#19192B32#, 16#737395E6#,
         16#6060A0C0#, 16#81819819#, 16#4F4FD19E#, 16#DCDC7FA3#, 16#22226644#, 16#2A2A7E54#, 16#9090AB3B#, 16#8888830B#,
         16#4646CA8C#, 16#EEEE29C7#, 16#B8B8D36B#, 16#14143C28#, 16#DEDE79A7#, 16#5E5EE2BC#, 16#0B0B1D16#, 16#DBDB76AD#,
         16#E0E03BDB#, 16#32325664#, 16#3A3A4E74#, 16#0A0A1E14#, 16#4949DB92#, 16#06060A0C#, 16#24246C48#, 16#5C5CE4B8#,
         16#C2C25D9F#, 16#D3D36EBD#, 16#ACACEF43#, 16#6262A6C4#, 16#9191A839#, 16#9595A431#, 16#E4E437D3#, 16#79798BF2#,
         16#E7E732D5#, 16#C8C8438B#, 16#3737596E#, 16#6D6DB7DA#, 16#8D8D8C01#, 16#D5D564B1#, 16#4E4ED29C#, 16#A9A9E049#,
         16#6C6CB4D8#, 16#5656FAAC#, 16#F4F407F3#, 16#EAEA25CF#, 16#6565AFCA#, 16#7A7A8EF4#, 16#AEAEE947#, 16#08081810#,
         16#BABAD56F#, 16#787888F0#, 16#25256F4A#, 16#2E2E725C#, 16#1C1C2438#, 16#A6A6F157#, 16#B4B4C773#, 16#C6C65197#,
         16#E8E823CB#, 16#DDDD7CA1#, 16#74749CE8#, 16#1F1F213E#, 16#4B4BDD96#, 16#BDBDDC61#, 16#8B8B860D#, 16#8A8A850F#,
         16#707090E0#, 16#3E3E427C#, 16#B5B5C471#, 16#6666AACC#, 16#4848D890#, 16#03030506#, 16#F6F601F7#, 16#0E0E121C#,
         16#6161A3C2#, 16#35355F6A#, 16#5757F9AE#, 16#B9B9D069#, 16#86869117#, 16#C1C15899#, 16#1D1D273A#, 16#9E9EB927#,
         16#E1E138D9#, 16#F8F813EB#, 16#9898B32B#, 16#11113322#, 16#6969BBD2#, 16#D9D970A9#, 16#8E8E8907#, 16#9494A733#,
         16#9B9BB62D#, 16#1E1E223C#, 16#87879215#, 16#E9E920C9#, 16#CECE4987#, 16#5555FFAA#, 16#28287850#, 16#DFDF7AA5#,
         16#8C8C8F03#, 16#A1A1F859#, 16#89898009#, 16#0D0D171A#, 16#BFBFDA65#, 16#E6E631D7#, 16#4242C684#, 16#6868B8D0#,
         16#4141C382#, 16#9999B029#, 16#2D2D775A#, 16#0F0F111E#, 16#B0B0CB7B#, 16#5454FCA8#, 16#BBBBD66D#, 16#16163A2C#
      );

   Te_S_Box                      : constant array(Byte) of Four_Bytes :=
      (
         16#63636363#, 16#7C7C7C7C#, 16#77777777#, 16#7B7B7B7B#, 16#F2F2F2F2#, 16#6B6B6B6B#, 16#6F6F6F6F#, 16#C5C5C5C5#,
         16#30303030#, 16#01010101#, 16#67676767#, 16#2B2B2B2B#, 16#FEFEFEFE#, 16#D7D7D7D7#, 16#ABABABAB#, 16#76767676#,
         16#CACACACA#, 16#82828282#, 16#C9C9C9C9#, 16#7D7D7D7D#, 16#FAFAFAFA#, 16#59595959#, 16#47474747#, 16#F0F0F0F0#,
         16#ADADADAD#, 16#D4D4D4D4#, 16#A2A2A2A2#, 16#AFAFAFAF#, 16#9C9C9C9C#, 16#A4A4A4A4#, 16#72727272#, 16#C0C0C0C0#,
         16#B7B7B7B7#, 16#FDFDFDFD#, 16#93939393#, 16#26262626#, 16#36363636#, 16#3F3F3F3F#, 16#F7F7F7F7#, 16#CCCCCCCC#,
         16#34343434#, 16#A5A5A5A5#, 16#E5E5E5E5#, 16#F1F1F1F1#, 16#71717171#, 16#D8D8D8D8#, 16#31313131#, 16#15151515#,
         16#04040404#, 16#C7C7C7C7#, 16#23232323#, 16#C3C3C3C3#, 16#18181818#, 16#96969696#, 16#05050505#, 16#9A9A9A9A#,
         16#07070707#, 16#12121212#, 16#80808080#, 16#E2E2E2E2#, 16#EBEBEBEB#, 16#27272727#, 16#B2B2B2B2#, 16#75757575#,
         16#09090909#, 16#83838383#, 16#2C2C2C2C#, 16#1A1A1A1A#, 16#1B1B1B1B#, 16#6E6E6E6E#, 16#5A5A5A5A#, 16#A0A0A0A0#,
         16#52525252#, 16#3B3B3B3B#, 16#D6D6D6D6#, 16#B3B3B3B3#, 16#29292929#, 16#E3E3E3E3#, 16#2F2F2F2F#, 16#84848484#,
         16#53535353#, 16#D1D1D1D1#, 16#00000000#, 16#EDEDEDED#, 16#20202020#, 16#FCFCFCFC#, 16#B1B1B1B1#, 16#5B5B5B5B#,
         16#6A6A6A6A#, 16#CBCBCBCB#, 16#BEBEBEBE#, 16#39393939#, 16#4A4A4A4A#, 16#4C4C4C4C#, 16#58585858#, 16#CFCFCFCF#,
         16#D0D0D0D0#, 16#EFEFEFEF#, 16#AAAAAAAA#, 16#FBFBFBFB#, 16#43434343#, 16#4D4D4D4D#, 16#33333333#, 16#85858585#,
         16#45454545#, 16#F9F9F9F9#, 16#02020202#, 16#7F7F7F7F#, 16#50505050#, 16#3C3C3C3C#, 16#9F9F9F9F#, 16#A8A8A8A8#,
         16#51515151#, 16#A3A3A3A3#, 16#40404040#, 16#8F8F8F8F#, 16#92929292#, 16#9D9D9D9D#, 16#38383838#, 16#F5F5F5F5#,
         16#BCBCBCBC#, 16#B6B6B6B6#, 16#DADADADA#, 16#21212121#, 16#10101010#, 16#FFFFFFFF#, 16#F3F3F3F3#, 16#D2D2D2D2#,
         16#CDCDCDCD#, 16#0C0C0C0C#, 16#13131313#, 16#ECECECEC#, 16#5F5F5F5F#, 16#97979797#, 16#44444444#, 16#17171717#,
         16#C4C4C4C4#, 16#A7A7A7A7#, 16#7E7E7E7E#, 16#3D3D3D3D#, 16#64646464#, 16#5D5D5D5D#, 16#19191919#, 16#73737373#,
         16#60606060#, 16#81818181#, 16#4F4F4F4F#, 16#DCDCDCDC#, 16#22222222#, 16#2A2A2A2A#, 16#90909090#, 16#88888888#,
         16#46464646#, 16#EEEEEEEE#, 16#B8B8B8B8#, 16#14141414#, 16#DEDEDEDE#, 16#5E5E5E5E#, 16#0B0B0B0B#, 16#DBDBDBDB#,
         16#E0E0E0E0#, 16#32323232#, 16#3A3A3A3A#, 16#0A0A0A0A#, 16#49494949#, 16#06060606#, 16#24242424#, 16#5C5C5C5C#,
         16#C2C2C2C2#, 16#D3D3D3D3#, 16#ACACACAC#, 16#62626262#, 16#91919191#, 16#95959595#, 16#E4E4E4E4#, 16#79797979#,
         16#E7E7E7E7#, 16#C8C8C8C8#, 16#37373737#, 16#6D6D6D6D#, 16#8D8D8D8D#, 16#D5D5D5D5#, 16#4E4E4E4E#, 16#A9A9A9A9#,
         16#6C6C6C6C#, 16#56565656#, 16#F4F4F4F4#, 16#EAEAEAEA#, 16#65656565#, 16#7A7A7A7A#, 16#AEAEAEAE#, 16#08080808#,
         16#BABABABA#, 16#78787878#, 16#25252525#, 16#2E2E2E2E#, 16#1C1C1C1C#, 16#A6A6A6A6#, 16#B4B4B4B4#, 16#C6C6C6C6#,
         16#E8E8E8E8#, 16#DDDDDDDD#, 16#74747474#, 16#1F1F1F1F#, 16#4B4B4B4B#, 16#BDBDBDBD#, 16#8B8B8B8B#, 16#8A8A8A8A#,
         16#70707070#, 16#3E3E3E3E#, 16#B5B5B5B5#, 16#66666666#, 16#48484848#, 16#03030303#, 16#F6F6F6F6#, 16#0E0E0E0E#,
         16#61616161#, 16#35353535#, 16#57575757#, 16#B9B9B9B9#, 16#86868686#, 16#C1C1C1C1#, 16#1D1D1D1D#, 16#9E9E9E9E#,
         16#E1E1E1E1#, 16#F8F8F8F8#, 16#98989898#, 16#11111111#, 16#69696969#, 16#D9D9D9D9#, 16#8E8E8E8E#, 16#94949494#,
         16#9B9B9B9B#, 16#1E1E1E1E#, 16#87878787#, 16#E9E9E9E9#, 16#CECECECE#, 16#55555555#, 16#28282828#, 16#DFDFDFDF#,
         16#8C8C8C8C#, 16#A1A1A1A1#, 16#89898989#, 16#0D0D0D0D#, 16#BFBFBFBF#, 16#E6E6E6E6#, 16#42424242#, 16#68686868#,
         16#41414141#, 16#99999999#, 16#2D2D2D2D#, 16#0F0F0F0F#, 16#B0B0B0B0#, 16#54545454#, 16#BBBBBBBB#, 16#16161616#
      );

   --[Inverse (decrypt) AES tables]---------------------------------------------
   -- Next tables are used in decryption.
   -----------------------------------------------------------------------------
      
   Td_0                          : constant array(Byte) of Four_Bytes :=
      (
         16#51F4A750#, 16#7E416553#, 16#1A17A4C3#, 16#3A275E96#, 16#3BAB6BCB#, 16#1F9D45F1#, 16#ACFA58AB#, 16#4BE30393#,
         16#2030FA55#, 16#AD766DF6#, 16#88CC7691#, 16#F5024C25#, 16#4FE5D7FC#, 16#C52ACBD7#, 16#26354480#, 16#B562A38F#,
         16#DEB15A49#, 16#25BA1B67#, 16#45EA0E98#, 16#5DFEC0E1#, 16#C32F7502#, 16#814CF012#, 16#8D4697A3#, 16#6BD3F9C6#,
         16#038F5FE7#, 16#15929C95#, 16#BF6D7AEB#, 16#955259DA#, 16#D4BE832D#, 16#587421D3#, 16#49E06929#, 16#8EC9C844#,
         16#75C2896A#, 16#F48E7978#, 16#99583E6B#, 16#27B971DD#, 16#BEE14FB6#, 16#F088AD17#, 16#C920AC66#, 16#7DCE3AB4#,
         16#63DF4A18#, 16#E51A3182#, 16#97513360#, 16#62537F45#, 16#B16477E0#, 16#BB6BAE84#, 16#FE81A01C#, 16#F9082B94#,
         16#70486858#, 16#8F45FD19#, 16#94DE6C87#, 16#527BF8B7#, 16#AB73D323#, 16#724B02E2#, 16#E31F8F57#, 16#6655AB2A#,
         16#B2EB2807#, 16#2FB5C203#, 16#86C57B9A#, 16#D33708A5#, 16#302887F2#, 16#23BFA5B2#, 16#02036ABA#, 16#ED16825C#,
         16#8ACF1C2B#, 16#A779B492#, 16#F307F2F0#, 16#4E69E2A1#, 16#65DAF4CD#, 16#0605BED5#, 16#D134621F#, 16#C4A6FE8A#,
         16#342E539D#, 16#A2F355A0#, 16#058AE132#, 16#A4F6EB75#, 16#0B83EC39#, 16#4060EFAA#, 16#5E719F06#, 16#BD6E1051#,
         16#3E218AF9#, 16#96DD063D#, 16#DD3E05AE#, 16#4DE6BD46#, 16#91548DB5#, 16#71C45D05#, 16#0406D46F#, 16#605015FF#,
         16#1998FB24#, 16#D6BDE997#, 16#894043CC#, 16#67D99E77#, 16#B0E842BD#, 16#07898B88#, 16#E7195B38#, 16#79C8EEDB#,
         16#A17C0A47#, 16#7C420FE9#, 16#F8841EC9#, 16#00000000#, 16#09808683#, 16#322BED48#, 16#1E1170AC#, 16#6C5A724E#,
         16#FD0EFFFB#, 16#0F853856#, 16#3DAED51E#, 16#362D3927#, 16#0A0FD964#, 16#685CA621#, 16#9B5B54D1#, 16#24362E3A#,
         16#0C0A67B1#, 16#9357E70F#, 16#B4EE96D2#, 16#1B9B919E#, 16#80C0C54F#, 16#61DC20A2#, 16#5A774B69#, 16#1C121A16#,
         16#E293BA0A#, 16#C0A02AE5#, 16#3C22E043#, 16#121B171D#, 16#0E090D0B#, 16#F28BC7AD#, 16#2DB6A8B9#, 16#141EA9C8#,
         16#57F11985#, 16#AF75074C#, 16#EE99DDBB#, 16#A37F60FD#, 16#F701269F#, 16#5C72F5BC#, 16#44663BC5#, 16#5BFB7E34#,
         16#8B432976#, 16#CB23C6DC#, 16#B6EDFC68#, 16#B8E4F163#, 16#D731DCCA#, 16#42638510#, 16#13972240#, 16#84C61120#,
         16#854A247D#, 16#D2BB3DF8#, 16#AEF93211#, 16#C729A16D#, 16#1D9E2F4B#, 16#DCB230F3#, 16#0D8652EC#, 16#77C1E3D0#,
         16#2BB3166C#, 16#A970B999#, 16#119448FA#, 16#47E96422#, 16#A8FC8CC4#, 16#A0F03F1A#, 16#567D2CD8#, 16#223390EF#,
         16#87494EC7#, 16#D938D1C1#, 16#8CCAA2FE#, 16#98D40B36#, 16#A6F581CF#, 16#A57ADE28#, 16#DAB78E26#, 16#3FADBFA4#,
         16#2C3A9DE4#, 16#5078920D#, 16#6A5FCC9B#, 16#547E4662#, 16#F68D13C2#, 16#90D8B8E8#, 16#2E39F75E#, 16#82C3AFF5#,
         16#9F5D80BE#, 16#69D0937C#, 16#6FD52DA9#, 16#CF2512B3#, 16#C8AC993B#, 16#10187DA7#, 16#E89C636E#, 16#DB3BBB7B#,
         16#CD267809#, 16#6E5918F4#, 16#EC9AB701#, 16#834F9AA8#, 16#E6956E65#, 16#AAFFE67E#, 16#21BCCF08#, 16#EF15E8E6#,
         16#BAE79BD9#, 16#4A6F36CE#, 16#EA9F09D4#, 16#29B07CD6#, 16#31A4B2AF#, 16#2A3F2331#, 16#C6A59430#, 16#35A266C0#,
         16#744EBC37#, 16#FC82CAA6#, 16#E090D0B0#, 16#33A7D815#, 16#F104984A#, 16#41ECDAF7#, 16#7FCD500E#, 16#1791F62F#,
         16#764DD68D#, 16#43EFB04D#, 16#CCAA4D54#, 16#E49604DF#, 16#9ED1B5E3#, 16#4C6A881B#, 16#C12C1FB8#, 16#4665517F#,
         16#9D5EEA04#, 16#018C355D#, 16#FA877473#, 16#FB0B412E#, 16#B3671D5A#, 16#92DBD252#, 16#E9105633#, 16#6DD64713#,
         16#9AD7618C#, 16#37A10C7A#, 16#59F8148E#, 16#EB133C89#, 16#CEA927EE#, 16#B761C935#, 16#E11CE5ED#, 16#7A47B13C#,
         16#9CD2DF59#, 16#55F2733F#, 16#1814CE79#, 16#73C737BF#, 16#53F7CDEA#, 16#5FFDAA5B#, 16#DF3D6F14#, 16#7844DB86#,
         16#CAAFF381#, 16#B968C43E#, 16#3824342C#, 16#C2A3405F#, 16#161DC372#, 16#BCE2250C#, 16#283C498B#, 16#FF0D9541#,
         16#39A80171#, 16#080CB3DE#, 16#D8B4E49C#, 16#6456C190#, 16#7BCB8461#, 16#D532B670#, 16#486C5C74#, 16#D0B85742#
      );

   Td_1                          : constant array(Byte) of Four_Bytes :=
      (
         16#5051F4A7#, 16#537E4165#, 16#C31A17A4#, 16#963A275E#, 16#CB3BAB6B#, 16#F11F9D45#, 16#ABACFA58#, 16#934BE303#,
         16#552030FA#, 16#F6AD766D#, 16#9188CC76#, 16#25F5024C#, 16#FC4FE5D7#, 16#D7C52ACB#, 16#80263544#, 16#8FB562A3#,
         16#49DEB15A#, 16#6725BA1B#, 16#9845EA0E#, 16#E15DFEC0#, 16#02C32F75#, 16#12814CF0#, 16#A38D4697#, 16#C66BD3F9#,
         16#E7038F5F#, 16#9515929C#, 16#EBBF6D7A#, 16#DA955259#, 16#2DD4BE83#, 16#D3587421#, 16#2949E069#, 16#448EC9C8#,
         16#6A75C289#, 16#78F48E79#, 16#6B99583E#, 16#DD27B971#, 16#B6BEE14F#, 16#17F088AD#, 16#66C920AC#, 16#B47DCE3A#,
         16#1863DF4A#, 16#82E51A31#, 16#60975133#, 16#4562537F#, 16#E0B16477#, 16#84BB6BAE#, 16#1CFE81A0#, 16#94F9082B#,
         16#58704868#, 16#198F45FD#, 16#8794DE6C#, 16#B7527BF8#, 16#23AB73D3#, 16#E2724B02#, 16#57E31F8F#, 16#2A6655AB#,
         16#07B2EB28#, 16#032FB5C2#, 16#9A86C57B#, 16#A5D33708#, 16#F2302887#, 16#B223BFA5#, 16#BA02036A#, 16#5CED1682#,
         16#2B8ACF1C#, 16#92A779B4#, 16#F0F307F2#, 16#A14E69E2#, 16#CD65DAF4#, 16#D50605BE#, 16#1FD13462#, 16#8AC4A6FE#,
         16#9D342E53#, 16#A0A2F355#, 16#32058AE1#, 16#75A4F6EB#, 16#390B83EC#, 16#AA4060EF#, 16#065E719F#, 16#51BD6E10#,
         16#F93E218A#, 16#3D96DD06#, 16#AEDD3E05#, 16#464DE6BD#, 16#B591548D#, 16#0571C45D#, 16#6F0406D4#, 16#FF605015#,
         16#241998FB#, 16#97D6BDE9#, 16#CC894043#, 16#7767D99E#, 16#BDB0E842#, 16#8807898B#, 16#38E7195B#, 16#DB79C8EE#,
         16#47A17C0A#, 16#E97C420F#, 16#C9F8841E#, 16#00000000#, 16#83098086#, 16#48322BED#, 16#AC1E1170#, 16#4E6C5A72#,
         16#FBFD0EFF#, 16#560F8538#, 16#1E3DAED5#, 16#27362D39#, 16#640A0FD9#, 16#21685CA6#, 16#D19B5B54#, 16#3A24362E#,
         16#B10C0A67#, 16#0F9357E7#, 16#D2B4EE96#, 16#9E1B9B91#, 16#4F80C0C5#, 16#A261DC20#, 16#695A774B#, 16#161C121A#,
         16#0AE293BA#, 16#E5C0A02A#, 16#433C22E0#, 16#1D121B17#, 16#0B0E090D#, 16#ADF28BC7#, 16#B92DB6A8#, 16#C8141EA9#,
         16#8557F119#, 16#4CAF7507#, 16#BBEE99DD#, 16#FDA37F60#, 16#9FF70126#, 16#BC5C72F5#, 16#C544663B#, 16#345BFB7E#,
         16#768B4329#, 16#DCCB23C6#, 16#68B6EDFC#, 16#63B8E4F1#, 16#CAD731DC#, 16#10426385#, 16#40139722#, 16#2084C611#,
         16#7D854A24#, 16#F8D2BB3D#, 16#11AEF932#, 16#6DC729A1#, 16#4B1D9E2F#, 16#F3DCB230#, 16#EC0D8652#, 16#D077C1E3#,
         16#6C2BB316#, 16#99A970B9#, 16#FA119448#, 16#2247E964#, 16#C4A8FC8C#, 16#1AA0F03F#, 16#D8567D2C#, 16#EF223390#,
         16#C787494E#, 16#C1D938D1#, 16#FE8CCAA2#, 16#3698D40B#, 16#CFA6F581#, 16#28A57ADE#, 16#26DAB78E#, 16#A43FADBF#,
         16#E42C3A9D#, 16#0D507892#, 16#9B6A5FCC#, 16#62547E46#, 16#C2F68D13#, 16#E890D8B8#, 16#5E2E39F7#, 16#F582C3AF#,
         16#BE9F5D80#, 16#7C69D093#, 16#A96FD52D#, 16#B3CF2512#, 16#3BC8AC99#, 16#A710187D#, 16#6EE89C63#, 16#7BDB3BBB#,
         16#09CD2678#, 16#F46E5918#, 16#01EC9AB7#, 16#A8834F9A#, 16#65E6956E#, 16#7EAAFFE6#, 16#0821BCCF#, 16#E6EF15E8#,
         16#D9BAE79B#, 16#CE4A6F36#, 16#D4EA9F09#, 16#D629B07C#, 16#AF31A4B2#, 16#312A3F23#, 16#30C6A594#, 16#C035A266#,
         16#37744EBC#, 16#A6FC82CA#, 16#B0E090D0#, 16#1533A7D8#, 16#4AF10498#, 16#F741ECDA#, 16#0E7FCD50#, 16#2F1791F6#,
         16#8D764DD6#, 16#4D43EFB0#, 16#54CCAA4D#, 16#DFE49604#, 16#E39ED1B5#, 16#1B4C6A88#, 16#B8C12C1F#, 16#7F466551#,
         16#049D5EEA#, 16#5D018C35#, 16#73FA8774#, 16#2EFB0B41#, 16#5AB3671D#, 16#5292DBD2#, 16#33E91056#, 16#136DD647#,
         16#8C9AD761#, 16#7A37A10C#, 16#8E59F814#, 16#89EB133C#, 16#EECEA927#, 16#35B761C9#, 16#EDE11CE5#, 16#3C7A47B1#,
         16#599CD2DF#, 16#3F55F273#, 16#791814CE#, 16#BF73C737#, 16#EA53F7CD#, 16#5B5FFDAA#, 16#14DF3D6F#, 16#867844DB#,
         16#81CAAFF3#, 16#3EB968C4#, 16#2C382434#, 16#5FC2A340#, 16#72161DC3#, 16#0CBCE225#, 16#8B283C49#, 16#41FF0D95#,
         16#7139A801#, 16#DE080CB3#, 16#9CD8B4E4#, 16#906456C1#, 16#617BCB84#, 16#70D532B6#, 16#74486C5C#, 16#42D0B857#
      );

   Td_2                          : constant array(Byte) of Four_Bytes :=
      (
         16#A75051F4#, 16#65537E41#, 16#A4C31A17#, 16#5E963A27#, 16#6BCB3BAB#, 16#45F11F9D#, 16#58ABACFA#, 16#03934BE3#,
         16#FA552030#, 16#6DF6AD76#, 16#769188CC#, 16#4C25F502#, 16#D7FC4FE5#, 16#CBD7C52A#, 16#44802635#, 16#A38FB562#,
         16#5A49DEB1#, 16#1B6725BA#, 16#0E9845EA#, 16#C0E15DFE#, 16#7502C32F#, 16#F012814C#, 16#97A38D46#, 16#F9C66BD3#,
         16#5FE7038F#, 16#9C951592#, 16#7AEBBF6D#, 16#59DA9552#, 16#832DD4BE#, 16#21D35874#, 16#692949E0#, 16#C8448EC9#,
         16#896A75C2#, 16#7978F48E#, 16#3E6B9958#, 16#71DD27B9#, 16#4FB6BEE1#, 16#AD17F088#, 16#AC66C920#, 16#3AB47DCE#,
         16#4A1863DF#, 16#3182E51A#, 16#33609751#, 16#7F456253#, 16#77E0B164#, 16#AE84BB6B#, 16#A01CFE81#, 16#2B94F908#,
         16#68587048#, 16#FD198F45#, 16#6C8794DE#, 16#F8B7527B#, 16#D323AB73#, 16#02E2724B#, 16#8F57E31F#, 16#AB2A6655#,
         16#2807B2EB#, 16#C2032FB5#, 16#7B9A86C5#, 16#08A5D337#, 16#87F23028#, 16#A5B223BF#, 16#6ABA0203#, 16#825CED16#,
         16#1C2B8ACF#, 16#B492A779#, 16#F2F0F307#, 16#E2A14E69#, 16#F4CD65DA#, 16#BED50605#, 16#621FD134#, 16#FE8AC4A6#,
         16#539D342E#, 16#55A0A2F3#, 16#E132058A#, 16#EB75A4F6#, 16#EC390B83#, 16#EFAA4060#, 16#9F065E71#, 16#1051BD6E#,
         16#8AF93E21#, 16#063D96DD#, 16#05AEDD3E#, 16#BD464DE6#, 16#8DB59154#, 16#5D0571C4#, 16#D46F0406#, 16#15FF6050#,
         16#FB241998#, 16#E997D6BD#, 16#43CC8940#, 16#9E7767D9#, 16#42BDB0E8#, 16#8B880789#, 16#5B38E719#, 16#EEDB79C8#,
         16#0A47A17C#, 16#0FE97C42#, 16#1EC9F884#, 16#00000000#, 16#86830980#, 16#ED48322B#, 16#70AC1E11#, 16#724E6C5A#,
         16#FFFBFD0E#, 16#38560F85#, 16#D51E3DAE#, 16#3927362D#, 16#D9640A0F#, 16#A621685C#, 16#54D19B5B#, 16#2E3A2436#,
         16#67B10C0A#, 16#E70F9357#, 16#96D2B4EE#, 16#919E1B9B#, 16#C54F80C0#, 16#20A261DC#, 16#4B695A77#, 16#1A161C12#,
         16#BA0AE293#, 16#2AE5C0A0#, 16#E0433C22#, 16#171D121B#, 16#0D0B0E09#, 16#C7ADF28B#, 16#A8B92DB6#, 16#A9C8141E#,
         16#198557F1#, 16#074CAF75#, 16#DDBBEE99#, 16#60FDA37F#, 16#269FF701#, 16#F5BC5C72#, 16#3BC54466#, 16#7E345BFB#,
         16#29768B43#, 16#C6DCCB23#, 16#FC68B6ED#, 16#F163B8E4#, 16#DCCAD731#, 16#85104263#, 16#22401397#, 16#112084C6#,
         16#247D854A#, 16#3DF8D2BB#, 16#3211AEF9#, 16#A16DC729#, 16#2F4B1D9E#, 16#30F3DCB2#, 16#52EC0D86#, 16#E3D077C1#,
         16#166C2BB3#, 16#B999A970#, 16#48FA1194#, 16#642247E9#, 16#8CC4A8FC#, 16#3F1AA0F0#, 16#2CD8567D#, 16#90EF2233#,
         16#4EC78749#, 16#D1C1D938#, 16#A2FE8CCA#, 16#0B3698D4#, 16#81CFA6F5#, 16#DE28A57A#, 16#8E26DAB7#, 16#BFA43FAD#,
         16#9DE42C3A#, 16#920D5078#, 16#CC9B6A5F#, 16#4662547E#, 16#13C2F68D#, 16#B8E890D8#, 16#F75E2E39#, 16#AFF582C3#,
         16#80BE9F5D#, 16#937C69D0#, 16#2DA96FD5#, 16#12B3CF25#, 16#993BC8AC#, 16#7DA71018#, 16#636EE89C#, 16#BB7BDB3B#,
         16#7809CD26#, 16#18F46E59#, 16#B701EC9A#, 16#9AA8834F#, 16#6E65E695#, 16#E67EAAFF#, 16#CF0821BC#, 16#E8E6EF15#,
         16#9BD9BAE7#, 16#36CE4A6F#, 16#09D4EA9F#, 16#7CD629B0#, 16#B2AF31A4#, 16#23312A3F#, 16#9430C6A5#, 16#66C035A2#,
         16#BC37744E#, 16#CAA6FC82#, 16#D0B0E090#, 16#D81533A7#, 16#984AF104#, 16#DAF741EC#, 16#500E7FCD#, 16#F62F1791#,
         16#D68D764D#, 16#B04D43EF#, 16#4D54CCAA#, 16#04DFE496#, 16#B5E39ED1#, 16#881B4C6A#, 16#1FB8C12C#, 16#517F4665#,
         16#EA049D5E#, 16#355D018C#, 16#7473FA87#, 16#412EFB0B#, 16#1D5AB367#, 16#D25292DB#, 16#5633E910#, 16#47136DD6#,
         16#618C9AD7#, 16#0C7A37A1#, 16#148E59F8#, 16#3C89EB13#, 16#27EECEA9#, 16#C935B761#, 16#E5EDE11C#, 16#B13C7A47#,
         16#DF599CD2#, 16#733F55F2#, 16#CE791814#, 16#37BF73C7#, 16#CDEA53F7#, 16#AA5B5FFD#, 16#6F14DF3D#, 16#DB867844#,
         16#F381CAAF#, 16#C43EB968#, 16#342C3824#, 16#405FC2A3#, 16#C372161D#, 16#250CBCE2#, 16#498B283C#, 16#9541FF0D#,
         16#017139A8#, 16#B3DE080C#, 16#E49CD8B4#, 16#C1906456#, 16#84617BCB#, 16#B670D532#, 16#5C74486C#, 16#5742D0B8#
      );

   Td_3                          : constant array(Byte) of Four_Bytes :=
      (
         16#F4A75051#, 16#4165537E#, 16#17A4C31A#, 16#275E963A#, 16#AB6BCB3B#, 16#9D45F11F#, 16#FA58ABAC#, 16#E303934B#,
         16#30FA5520#, 16#766DF6AD#, 16#CC769188#, 16#024C25F5#, 16#E5D7FC4F#, 16#2ACBD7C5#, 16#35448026#, 16#62A38FB5#,
         16#B15A49DE#, 16#BA1B6725#, 16#EA0E9845#, 16#FEC0E15D#, 16#2F7502C3#, 16#4CF01281#, 16#4697A38D#, 16#D3F9C66B#,
         16#8F5FE703#, 16#929C9515#, 16#6D7AEBBF#, 16#5259DA95#, 16#BE832DD4#, 16#7421D358#, 16#E0692949#, 16#C9C8448E#,
         16#C2896A75#, 16#8E7978F4#, 16#583E6B99#, 16#B971DD27#, 16#E14FB6BE#, 16#88AD17F0#, 16#20AC66C9#, 16#CE3AB47D#,
         16#DF4A1863#, 16#1A3182E5#, 16#51336097#, 16#537F4562#, 16#6477E0B1#, 16#6BAE84BB#, 16#81A01CFE#, 16#082B94F9#,
         16#48685870#, 16#45FD198F#, 16#DE6C8794#, 16#7BF8B752#, 16#73D323AB#, 16#4B02E272#, 16#1F8F57E3#, 16#55AB2A66#,
         16#EB2807B2#, 16#B5C2032F#, 16#C57B9A86#, 16#3708A5D3#, 16#2887F230#, 16#BFA5B223#, 16#036ABA02#, 16#16825CED#,
         16#CF1C2B8A#, 16#79B492A7#, 16#07F2F0F3#, 16#69E2A14E#, 16#DAF4CD65#, 16#05BED506#, 16#34621FD1#, 16#A6FE8AC4#,
         16#2E539D34#, 16#F355A0A2#, 16#8AE13205#, 16#F6EB75A4#, 16#83EC390B#, 16#60EFAA40#, 16#719F065E#, 16#6E1051BD#,
         16#218AF93E#, 16#DD063D96#, 16#3E05AEDD#, 16#E6BD464D#, 16#548DB591#, 16#C45D0571#, 16#06D46F04#, 16#5015FF60#,
         16#98FB2419#, 16#BDE997D6#, 16#4043CC89#, 16#D99E7767#, 16#E842BDB0#, 16#898B8807#, 16#195B38E7#, 16#C8EEDB79#,
         16#7C0A47A1#, 16#420FE97C#, 16#841EC9F8#, 16#00000000#, 16#80868309#, 16#2BED4832#, 16#1170AC1E#, 16#5A724E6C#,
         16#0EFFFBFD#, 16#8538560F#, 16#AED51E3D#, 16#2D392736#, 16#0FD9640A#, 16#5CA62168#, 16#5B54D19B#, 16#362E3A24#,
         16#0A67B10C#, 16#57E70F93#, 16#EE96D2B4#, 16#9B919E1B#, 16#C0C54F80#, 16#DC20A261#, 16#774B695A#, 16#121A161C#,
         16#93BA0AE2#, 16#A02AE5C0#, 16#22E0433C#, 16#1B171D12#, 16#090D0B0E#, 16#8BC7ADF2#, 16#B6A8B92D#, 16#1EA9C814#,
         16#F1198557#, 16#75074CAF#, 16#99DDBBEE#, 16#7F60FDA3#, 16#01269FF7#, 16#72F5BC5C#, 16#663BC544#, 16#FB7E345B#,
         16#4329768B#, 16#23C6DCCB#, 16#EDFC68B6#, 16#E4F163B8#, 16#31DCCAD7#, 16#63851042#, 16#97224013#, 16#C6112084#,
         16#4A247D85#, 16#BB3DF8D2#, 16#F93211AE#, 16#29A16DC7#, 16#9E2F4B1D#, 16#B230F3DC#, 16#8652EC0D#, 16#C1E3D077#,
         16#B3166C2B#, 16#70B999A9#, 16#9448FA11#, 16#E9642247#, 16#FC8CC4A8#, 16#F03F1AA0#, 16#7D2CD856#, 16#3390EF22#,
         16#494EC787#, 16#38D1C1D9#, 16#CAA2FE8C#, 16#D40B3698#, 16#F581CFA6#, 16#7ADE28A5#, 16#B78E26DA#, 16#ADBFA43F#,
         16#3A9DE42C#, 16#78920D50#, 16#5FCC9B6A#, 16#7E466254#, 16#8D13C2F6#, 16#D8B8E890#, 16#39F75E2E#, 16#C3AFF582#,
         16#5D80BE9F#, 16#D0937C69#, 16#D52DA96F#, 16#2512B3CF#, 16#AC993BC8#, 16#187DA710#, 16#9C636EE8#, 16#3BBB7BDB#,
         16#267809CD#, 16#5918F46E#, 16#9AB701EC#, 16#4F9AA883#, 16#956E65E6#, 16#FFE67EAA#, 16#BCCF0821#, 16#15E8E6EF#,
         16#E79BD9BA#, 16#6F36CE4A#, 16#9F09D4EA#, 16#B07CD629#, 16#A4B2AF31#, 16#3F23312A#, 16#A59430C6#, 16#A266C035#,
         16#4EBC3774#, 16#82CAA6FC#, 16#90D0B0E0#, 16#A7D81533#, 16#04984AF1#, 16#ECDAF741#, 16#CD500E7F#, 16#91F62F17#,
         16#4DD68D76#, 16#EFB04D43#, 16#AA4D54CC#, 16#9604DFE4#, 16#D1B5E39E#, 16#6A881B4C#, 16#2C1FB8C1#, 16#65517F46#,
         16#5EEA049D#, 16#8C355D01#, 16#877473FA#, 16#0B412EFB#, 16#671D5AB3#, 16#DBD25292#, 16#105633E9#, 16#D647136D#,
         16#D7618C9A#, 16#A10C7A37#, 16#F8148E59#, 16#133C89EB#, 16#A927EECE#, 16#61C935B7#, 16#1CE5EDE1#, 16#47B13C7A#,
         16#D2DF599C#, 16#F2733F55#, 16#14CE7918#, 16#C737BF73#, 16#F7CDEA53#, 16#FDAA5B5F#, 16#3D6F14DF#, 16#44DB8678#,
         16#AFF381CA#, 16#68C43EB9#, 16#24342C38#, 16#A3405FC2#, 16#1DC37216#, 16#E2250CBC#, 16#3C498B28#, 16#0D9541FF#,
         16#A8017139#, 16#0CB3DE08#, 16#B4E49CD8#, 16#56C19064#, 16#CB84617B#, 16#32B670D5#, 16#6C5C7448#, 16#B85742D0#
      );

   Td_S_Box                      : constant array(Byte) of Four_Bytes :=
      (
         16#52525252#, 16#09090909#, 16#6A6A6A6A#, 16#D5D5D5D5#, 16#30303030#, 16#36363636#, 16#A5A5A5A5#, 16#38383838#,
         16#BFBFBFBF#, 16#40404040#, 16#A3A3A3A3#, 16#9E9E9E9E#, 16#81818181#, 16#F3F3F3F3#, 16#D7D7D7D7#, 16#FBFBFBFB#,
         16#7C7C7C7C#, 16#E3E3E3E3#, 16#39393939#, 16#82828282#, 16#9B9B9B9B#, 16#2F2F2F2F#, 16#FFFFFFFF#, 16#87878787#,
         16#34343434#, 16#8E8E8E8E#, 16#43434343#, 16#44444444#, 16#C4C4C4C4#, 16#DEDEDEDE#, 16#E9E9E9E9#, 16#CBCBCBCB#,
         16#54545454#, 16#7B7B7B7B#, 16#94949494#, 16#32323232#, 16#A6A6A6A6#, 16#C2C2C2C2#, 16#23232323#, 16#3D3D3D3D#,
         16#EEEEEEEE#, 16#4C4C4C4C#, 16#95959595#, 16#0B0B0B0B#, 16#42424242#, 16#FAFAFAFA#, 16#C3C3C3C3#, 16#4E4E4E4E#,
         16#08080808#, 16#2E2E2E2E#, 16#A1A1A1A1#, 16#66666666#, 16#28282828#, 16#D9D9D9D9#, 16#24242424#, 16#B2B2B2B2#,
         16#76767676#, 16#5B5B5B5B#, 16#A2A2A2A2#, 16#49494949#, 16#6D6D6D6D#, 16#8B8B8B8B#, 16#D1D1D1D1#, 16#25252525#,
         16#72727272#, 16#F8F8F8F8#, 16#F6F6F6F6#, 16#64646464#, 16#86868686#, 16#68686868#, 16#98989898#, 16#16161616#,
         16#D4D4D4D4#, 16#A4A4A4A4#, 16#5C5C5C5C#, 16#CCCCCCCC#, 16#5D5D5D5D#, 16#65656565#, 16#B6B6B6B6#, 16#92929292#,
         16#6C6C6C6C#, 16#70707070#, 16#48484848#, 16#50505050#, 16#FDFDFDFD#, 16#EDEDEDED#, 16#B9B9B9B9#, 16#DADADADA#,
         16#5E5E5E5E#, 16#15151515#, 16#46464646#, 16#57575757#, 16#A7A7A7A7#, 16#8D8D8D8D#, 16#9D9D9D9D#, 16#84848484#,
         16#90909090#, 16#D8D8D8D8#, 16#ABABABAB#, 16#00000000#, 16#8C8C8C8C#, 16#BCBCBCBC#, 16#D3D3D3D3#, 16#0A0A0A0A#,
         16#F7F7F7F7#, 16#E4E4E4E4#, 16#58585858#, 16#05050505#, 16#B8B8B8B8#, 16#B3B3B3B3#, 16#45454545#, 16#06060606#,
         16#D0D0D0D0#, 16#2C2C2C2C#, 16#1E1E1E1E#, 16#8F8F8F8F#, 16#CACACACA#, 16#3F3F3F3F#, 16#0F0F0F0F#, 16#02020202#,
         16#C1C1C1C1#, 16#AFAFAFAF#, 16#BDBDBDBD#, 16#03030303#, 16#01010101#, 16#13131313#, 16#8A8A8A8A#, 16#6B6B6B6B#,
         16#3A3A3A3A#, 16#91919191#, 16#11111111#, 16#41414141#, 16#4F4F4F4F#, 16#67676767#, 16#DCDCDCDC#, 16#EAEAEAEA#,
         16#97979797#, 16#F2F2F2F2#, 16#CFCFCFCF#, 16#CECECECE#, 16#F0F0F0F0#, 16#B4B4B4B4#, 16#E6E6E6E6#, 16#73737373#,
         16#96969696#, 16#ACACACAC#, 16#74747474#, 16#22222222#, 16#E7E7E7E7#, 16#ADADADAD#, 16#35353535#, 16#85858585#,
         16#E2E2E2E2#, 16#F9F9F9F9#, 16#37373737#, 16#E8E8E8E8#, 16#1C1C1C1C#, 16#75757575#, 16#DFDFDFDF#, 16#6E6E6E6E#,
         16#47474747#, 16#F1F1F1F1#, 16#1A1A1A1A#, 16#71717171#, 16#1D1D1D1D#, 16#29292929#, 16#C5C5C5C5#, 16#89898989#,
         16#6F6F6F6F#, 16#B7B7B7B7#, 16#62626262#, 16#0E0E0E0E#, 16#AAAAAAAA#, 16#18181818#, 16#BEBEBEBE#, 16#1B1B1B1B#,
         16#FCFCFCFC#, 16#56565656#, 16#3E3E3E3E#, 16#4B4B4B4B#, 16#C6C6C6C6#, 16#D2D2D2D2#, 16#79797979#, 16#20202020#,
         16#9A9A9A9A#, 16#DBDBDBDB#, 16#C0C0C0C0#, 16#FEFEFEFE#, 16#78787878#, 16#CDCDCDCD#, 16#5A5A5A5A#, 16#F4F4F4F4#,
         16#1F1F1F1F#, 16#DDDDDDDD#, 16#A8A8A8A8#, 16#33333333#, 16#88888888#, 16#07070707#, 16#C7C7C7C7#, 16#31313131#,
         16#B1B1B1B1#, 16#12121212#, 16#10101010#, 16#59595959#, 16#27272727#, 16#80808080#, 16#ECECECEC#, 16#5F5F5F5F#,
         16#60606060#, 16#51515151#, 16#7F7F7F7F#, 16#A9A9A9A9#, 16#19191919#, 16#B5B5B5B5#, 16#4A4A4A4A#, 16#0D0D0D0D#,
         16#2D2D2D2D#, 16#E5E5E5E5#, 16#7A7A7A7A#, 16#9F9F9F9F#, 16#93939393#, 16#C9C9C9C9#, 16#9C9C9C9C#, 16#EFEFEFEF#,
         16#A0A0A0A0#, 16#E0E0E0E0#, 16#3B3B3B3B#, 16#4D4D4D4D#, 16#AEAEAEAE#, 16#2A2A2A2A#, 16#F5F5F5F5#, 16#B0B0B0B0#,
         16#C8C8C8C8#, 16#EBEBEBEB#, 16#BBBBBBBB#, 16#3C3C3C3C#, 16#83838383#, 16#53535353#, 16#99999999#, 16#61616161#,
         16#17171717#, 16#2B2B2B2B#, 16#04040404#, 16#7E7E7E7E#, 16#BABABABA#, 16#77777777#, 16#D6D6D6D6#, 16#26262626#,
         16#E1E1E1E1#, 16#69696969#, 16#14141414#, 16#63636363#, 16#55555555#, 16#21212121#, 16#0C0C0C0C#, 16#7D7D7D7D#
      );      
      
   --[RCon]---------------------------------------------------------------------
   -- Round constants word array.
   -----------------------------------------------------------------------------

   RCon                 : constant Four_Bytes_Array(1 .. 10) := 
      (
         16#01000000#, 16#02000000#, 16#04000000#, 16#08000000#, 16#10000000#, 16#20000000#, 16#40000000#, 16#80000000#,
         16#1B000000#, 16#36000000#
      );

   -----------------------------------------------------------------------------
   --[Types]--------------------------------------------------------------------
   -----------------------------------------------------------------------------

   --[AES_Packed_Block]---------------------------------------------------------
   -- Packed block type.
   -----------------------------------------------------------------------------

   subtype AES_Packed_Block is Four_Bytes_Array(1 .. AES_Block_Words);

   -----------------------------------------------------------------------------
   --[Body Declared Subprogram Specs]-------------------------------------------
   -----------------------------------------------------------------------------

   --[Initialize_Object]--------------------------------------------------------

   procedure   Initialize_Object(
                  Object         : access AES_Cipher);
   pragma Inline(Initialize_Object);
   
   --[Allocate_Round_Keys]------------------------------------------------------
   
   function    Allocate_Round_Keys(
                  Key_Id         : in     AES_Key_Id)
      return   AES_Round_Keys;
     
   --[Pack_Block]---------------------------------------------------------------

   function    Pack_Block(
                  The_Block      : in     AES_Block)
      return   AES_Packed_Block;
   pragma Inline(Pack_Block);

   --[Unpack_Block]-------------------------------------------------------------

   function    Unpack_Block(
                  The_Block      : in     AES_Packed_Block)
      return   AES_Block;
   pragma Inline(Unpack_Block);
   
   --[Make_AES_Round_Keys]------------------------------------------------------
   
   function    Make_AES_Round_Keys(
                  The_Key        : in     Key;
                  Key_Id         : in     AES_Key_Id)
      return   AES_Round_Keys;

   --[Inv_AES_Round_Keys]-------------------------------------------------------

   procedure   Inv_AES_Round_Keys(
                  Key_Id         : in     AES_Key_Id;
                  RK             : in     AES_Round_Keys);

   --[Encrypt_Block]------------------------------------------------------------

   procedure   Encrypt_Block(
                  RK             : in     AES_Round_Keys;
                  Key_Id         : in     AES_Key_Id;
                  Input          : in     AES_Packed_Block;
                  Output         :    out AES_Packed_Block);

   --[Decrypt_Block]------------------------------------------------------------

   procedure   Decrypt_Block(
                  RK             : in     AES_Round_Keys;
                  Key_Id         : in     AES_Key_Id;
                  Input          : in     AES_Packed_Block;
                  Output         :    out AES_Packed_Block);
                  
   -----------------------------------------------------------------------------
   --[Body Declared Subprogram Bodies]------------------------------------------
   -----------------------------------------------------------------------------

   --[Initialize_Object]--------------------------------------------------------

   procedure   Initialize_Object(
                  Object         : access AES_Cipher)
   is
      T              : AES_Round_Keys := Object.all.Round_Keys;
   begin
      -- Set to initial value any attribute which is modified in this package

      Object.all.State        := Idle;
      Object.all.Round_Keys   := null;
      Object.all.Key_Id       := AES_256;
      
      if T /= null then
         T.all := (others => 16#00000000#);
         Free(T);
      end if;      
   end Initialize_Object;
   
   --[Allocate_Round_Keys]------------------------------------------------------
   
   function    Allocate_Round_Keys(
                  Key_Id         : in     AES_Key_Id)
      return   AES_Round_Keys
   is
      RK_Size        : constant Positive := 4 * (1 + AES_Rounds(Key_Id));
      RK             : AES_Round_Keys := null;
   begin
      RK       := new Four_Bytes_Array(1 .. RK_Size);
      RK.all   := (others => 0);
      
      return RK;
   exception
      when X: others =>
         Raise_Exception(
            CryptAda_Storage_Error'Identity,
            "Caught exception: '" &
               Exception_Name(X) &
               "' with message: '" &
               Exception_Message(X) &
               "', when allocating AES round keys array");
   end Allocate_Round_Keys;
   
   --[Pack_Block]---------------------------------------------------------------

   function    Pack_Block(
                  The_Block      : in     AES_Block)
      return   AES_Packed_Block
   is
      PB             : AES_Packed_Block := (others => 0);
      J              : Positive := The_Block'First;
   begin
      for I in PB'Range loop
         PB(I) := Pack(The_Block(J .. J + 3), Big_Endian);
         J := J + 4;
      end loop;

      return PB;
   end Pack_Block;
   
   --[Unpack_Block]-------------------------------------------------------------

   function    Unpack_Block(
                  The_Block      : in     AES_Packed_Block)
      return   AES_Block
   is
      UB             : AES_Block := (others => 0);
      J              : Positive := UB'First;
   begin
      for I in The_Block'Range loop
         UB(J .. J + 3) := Unpack(The_Block(I), Big_Endian);
         J := J + 4;
      end loop;

      return UB;
   end Unpack_Block;
   
   --[Make_AES_Round_Keys]------------------------------------------------------
   
   function    Make_AES_Round_Keys(
                  The_Key        : in     Key;
                  Key_Id         : in     AES_Key_Id)
      return   AES_Round_Keys
   is
      RK             : AES_Round_Keys := null;
      KB             : constant Byte_Array := Get_Key_Bytes(The_Key);
      KW             : constant Positive := AES_Key_Lengths(Key_Id) / AES_Word_Size;
      K              : Positive;
      T              : Four_Bytes;
      Rcon_Ndx       : Positive;
   begin
      -- Allocate the Round_Keys object.
      
      RK := Allocate_Round_Keys(Key_Id);

      -- Pack key bytes (big endian order) into RK.

      K := KB'First;

      for I in RK.all'First .. RK.all'First + KW - 1 loop
         RK.all(I) := Pack(KB(K .. K + 3), Big_Endian);
         K := K + 4;
      end loop;

      -- Build round keys depending on key length.

      K := RK.all'First;
      RCon_Ndx := RCon'First;

      case Key_Id is
         when AES_128 =>
            loop
               T := RK.all(K + 3);
               RK.all(K + 4) := 
                  RK.all(K) xor
                  (Te_S_Box(Byte(Shift_Right(T, 16) and 16#0000_00FF#)) and 16#FF00_0000#) xor
                  (Te_S_Box(Byte(Shift_Right(T,  8) and 16#0000_00FF#)) and 16#00FF_0000#) xor
                  (Te_S_Box(Byte(T and 16#0000_00FF#))                  and 16#0000_FF00#) xor
                  (Te_S_Box(Byte(Shift_Right(T, 24) and 16#0000_00FF#)) and 16#0000_00FF#) xor
                  RCon(RCon_Ndx);
               RK.all(K + 5) := RK.all(K + 1) xor RK.all(K + 4);
               RK.all(K + 6) := RK.all(K + 2) xor RK.all(K + 5);
               RK.all(K + 7) := RK.all(K + 3) xor RK.all(K + 6);

               Rcon_Ndx := RCon_Ndx + 1;

               exit when RCon_Ndx > 10;

               K := K + KW;
            end loop;
            
         when AES_192 =>
            loop
               T := RK.all(K + 5);
               RK.all(K + 6) :=
                  RK.all(K) xor
                  (Te_S_Box(Byte(Shift_Right(T, 16) and 16#0000_00FF#)) and 16#FF00_0000#) xor
                  (Te_S_Box(Byte(Shift_Right(T,  8) and 16#0000_00FF#)) and 16#00FF_0000#) xor
                  (Te_S_Box(Byte(T and 16#0000_00FF#))                  and 16#0000_FF00#) xor
                  (Te_S_Box(Byte(Shift_Right(T, 24) and 16#0000_00FF#)) and 16#0000_00FF#) xor
                  RCon(RCon_Ndx);
               RK.all(K + 7) := RK.all(K + 1) xor RK.all(K + 6);
               RK.all(K + 8) := RK.all(K + 2) xor RK.all(K + 7);
               RK.all(K + 9) := RK.all(K + 3) xor RK.all(K + 8);

               Rcon_Ndx := RCon_Ndx + 1;

               exit when RCon_Ndx > 8;

               RK.all(K + 10) := RK.all(K + 4) xor RK.all(K + 9);
               RK.all(K + 11) := RK.all(K + 5) xor RK.all(K + 10);

               K := K + KW;
            end loop;
            
         when others =>
            loop
               T := RK.all(K + 7);
               RK.all(K + 8) :=
                  RK.all(K) xor
                  (Te_S_Box(Byte(Shift_Right(T, 16) and 16#0000_00FF#)) and 16#FF00_0000#) xor
                  (Te_S_Box(Byte(Shift_Right(T,  8) and 16#0000_00FF#)) and 16#00FF_0000#) xor
                  (Te_S_Box(Byte(T and 16#0000_00FF#))                  and 16#0000_FF00#) xor
                  (Te_S_Box(Byte(Shift_Right(T, 24) and 16#0000_00FF#)) and 16#0000_00FF#) xor
                  RCon(RCon_Ndx);
               RK.all(K + 9) := RK.all(K + 1) xor RK.all(K + 8);
               RK.all(K + 10) := RK.all(K + 2) xor RK.all(K + 9);
               RK.all(K + 11) := RK.all(K + 3) xor RK.all(K + 10);

               Rcon_Ndx := RCon_Ndx + 1;

               exit when RCon_Ndx > 7;

               T := RK.all(K + 11);
               RK.all(K + 12) :=
                  RK.all(K + 4) xor
                  (Te_S_Box(Byte(Shift_Right(T, 24) and 16#0000_00FF#)) and 16#FF00_0000#) xor
                  (Te_S_Box(Byte(Shift_Right(T, 16) and 16#0000_00FF#)) and 16#00FF_0000#) xor
                  (Te_S_Box(Byte(Shift_Right(T,  8) and 16#0000_00FF#)) and 16#0000_FF00#) xor
                  (Te_S_Box(Byte(T and 16#0000_00FF#))                  and 16#0000_00FF#);
               RK.all(K + 13) := RK.all(K + 5) xor RK.all(K + 12);
               RK.all(K + 14) := RK.all(K + 6) xor RK.all(K + 13);
               RK.all(K + 15) := RK.all(K + 7) xor RK.all(K + 14);

               K := K + KW;
            end loop;
      end case;
      
      -- Return computed round keys.
      
      return RK;
   end Make_AES_Round_Keys;

   --[Inv_AES_Round_Keys]-------------------------------------------------------

   procedure   Inv_AES_Round_Keys(
                  Key_Id         : in     AES_Key_Id;
                  RK             : in     AES_Round_Keys)
   is
      J              : Positive := RK.all'First;
      K              : Positive := RK.all'First + (4 * AES_Rounds(Key_Id));
      T              : Four_Bytes_Array(1 .. 4);
   begin

      -- Invert the order of round keys.

      while J < K loop
         T := RK.all(J .. J + 3);
         RK.all(J .. J + 3) := RK.all(K .. K + 3);
         RK.all(K .. K + 3) := T;
         J := J + 4;
         K := K - 4;
      end loop;

      -- Apply the inverse MixColumn transform to all round keys but the first 
      -- and the last.

      K := RK.all'First + 4;

      while K < (RK.all'Last - 3) loop
         RK(K) :=
            Td_0(Byte(Te_S_Box(Byte(Shift_Right(RK.all(K), 24) and 16#0000_00FF#)) and 16#0000_00FF#)) xor
            Td_1(Byte(Te_S_Box(Byte(Shift_Right(RK.all(K), 16) and 16#0000_00FF#)) and 16#0000_00FF#)) xor
            Td_2(Byte(Te_S_Box(Byte(Shift_Right(RK.all(K),  8) and 16#0000_00FF#)) and 16#0000_00FF#)) xor
            Td_3(Byte(Te_S_Box(Byte(RK.all(K)                  and 16#0000_00FF#)) and 16#0000_00FF#));
         RK(K + 1) :=
            Td_0(Byte(Te_S_Box(Byte(Shift_Right(RK.all(K + 1), 24) and 16#0000_00FF#)) and 16#0000_00FF#)) xor
            Td_1(Byte(Te_S_Box(Byte(Shift_Right(RK.all(K + 1), 16) and 16#0000_00FF#)) and 16#0000_00FF#)) xor
            Td_2(Byte(Te_S_Box(Byte(Shift_Right(RK.all(K + 1),  8) and 16#0000_00FF#)) and 16#0000_00FF#)) xor
            Td_3(Byte(Te_S_Box(Byte(RK.all(K + 1)                  and 16#0000_00FF#)) and 16#0000_00FF#));
         RK(K + 2) :=
            Td_0(Byte(Te_S_Box(Byte(Shift_Right(RK.all(K + 2), 24) and 16#0000_00FF#)) and 16#0000_00FF#)) xor
            Td_1(Byte(Te_S_Box(Byte(Shift_Right(RK.all(K + 2), 16) and 16#0000_00FF#)) and 16#0000_00FF#)) xor
            Td_2(Byte(Te_S_Box(Byte(Shift_Right(RK.all(K + 2),  8) and 16#0000_00FF#)) and 16#0000_00FF#)) xor
            Td_3(Byte(Te_S_Box(Byte(RK.all(K + 2)                  and 16#0000_00FF#)) and 16#0000_00FF#));
         RK(K + 3) :=
            Td_0(Byte(Te_S_Box(Byte(Shift_Right(RK.all(K + 3), 24) and 16#0000_00FF#)) and 16#0000_00FF#)) xor
            Td_1(Byte(Te_S_Box(Byte(Shift_Right(RK.all(K + 3), 16) and 16#0000_00FF#)) and 16#0000_00FF#)) xor
            Td_2(Byte(Te_S_Box(Byte(Shift_Right(RK.all(K + 3),  8) and 16#0000_00FF#)) and 16#0000_00FF#)) xor
            Td_3(Byte(Te_S_Box(Byte(RK.all(K + 3)                  and 16#0000_00FF#)) and 16#0000_00FF#));
         K := K + 4;
      end loop;
   end Inv_AES_Round_Keys;

   --[Encrypt_Block]------------------------------------------------------------

   procedure   Encrypt_Block(
                  RK             : in     AES_Round_Keys;
                  Key_Id         : in     AES_Key_Id;
                  Input          : in     AES_Packed_Block;
                  Output         :    out AES_Packed_Block)
   is
      K              : Positive := RK.all'First;
      R              : Natural := AES_Rounds(Key_Id) / 2;
      TI             : AES_Packed_Block := Input;
      TT             : AES_Packed_Block := (others => 0);
   begin
      for I in TI'Range loop
         TI(I) := TI(I) xor RK.all(K);
         K := K + 1;
      end loop;

      K := RK.all'First;
      
      loop
         TT(1) :=
            Te_0(Byte(Shift_Right(TI(1), 24) and 16#0000_00FF#)) xor
            Te_1(Byte(Shift_Right(TI(2), 16) and 16#0000_00FF#)) xor
            Te_2(Byte(Shift_Right(TI(3),  8) and 16#0000_00FF#)) xor
            Te_3(Byte(TI(4)                  and 16#0000_00FF#)) xor
            RK.all(K + 4);
         TT(2) :=
            Te_0(Byte(Shift_Right(TI(2), 24) and 16#0000_00FF#)) xor
            Te_1(Byte(Shift_Right(TI(3), 16) and 16#0000_00FF#)) xor
            Te_2(Byte(Shift_Right(TI(4),  8) and 16#0000_00FF#)) xor
            Te_3(Byte(TI(1)                  and 16#0000_00FF#)) xor
            RK.all(K + 5);
         TT(3) :=
            Te_0(Byte(Shift_Right(TI(3), 24) and 16#0000_00FF#)) xor
            Te_1(Byte(Shift_Right(TI(4), 16) and 16#0000_00FF#)) xor
            Te_2(Byte(Shift_Right(TI(1),  8) and 16#0000_00FF#)) xor
            Te_3(Byte(TI(2)                  and 16#0000_00FF#)) xor
            RK.all(K + 6);
         TT(4) :=
            Te_0(Byte(Shift_Right(TI(4), 24) and 16#0000_00FF#)) xor
            Te_1(Byte(Shift_Right(TI(1), 16) and 16#0000_00FF#)) xor
            Te_2(Byte(Shift_Right(TI(2),  8) and 16#0000_00FF#)) xor
            Te_3(Byte(TI(3)                  and 16#0000_00FF#)) xor
            RK.all(K + 7);

         K := K + 8;
         R := R - 1;
         exit when R = 0;

         TI(1) :=
            Te_0(Byte(Shift_Right(TT(1), 24) and 16#0000_00FF#)) xor
            Te_1(Byte(Shift_Right(TT(2), 16) and 16#0000_00FF#)) xor
            Te_2(Byte(Shift_Right(TT(3),  8) and 16#0000_00FF#)) xor
            Te_3(Byte(TT(4)                  and 16#0000_00FF#)) xor
            RK.all(K);
         TI(2) :=
            Te_0(Byte(Shift_Right(TT(2), 24) and 16#0000_00FF#)) xor
            Te_1(Byte(Shift_Right(TT(3), 16) and 16#0000_00FF#)) xor
            Te_2(Byte(Shift_Right(TT(4),  8) and 16#0000_00FF#)) xor
            Te_3(Byte(TT(1)                  and 16#0000_00FF#)) xor
            RK.all(K + 1);
         TI(3) :=
            Te_0(Byte(Shift_Right(TT(3), 24) and 16#0000_00FF#)) xor
            Te_1(Byte(Shift_Right(TT(4), 16) and 16#0000_00FF#)) xor
            Te_2(Byte(Shift_Right(TT(1),  8) and 16#0000_00FF#)) xor
            Te_3(Byte(TT(2)                  and 16#0000_00FF#)) xor
            RK.all(K + 2);
         TI(4) :=
            Te_0(Byte(Shift_Right(TT(4), 24) and 16#0000_00FF#)) xor
            Te_1(Byte(Shift_Right(TT(1), 16) and 16#0000_00FF#)) xor
            Te_2(Byte(Shift_Right(TT(2),  8) and 16#0000_00FF#)) xor
            Te_3(Byte(TT(3)                  and 16#0000_00FF#)) xor
            RK.all(K + 3);
      end loop;

      -- Apply last round.

      TI(1) :=
         (Te_S_Box(Byte(Shift_Right(TT(1), 24) and 16#0000_00FF#)) and 16#FF00_0000#) xor
         (Te_S_Box(Byte(Shift_Right(TT(2), 16) and 16#0000_00FF#)) and 16#00FF_0000#) xor
         (Te_S_Box(Byte(Shift_Right(TT(3),  8) and 16#0000_00FF#)) and 16#0000_FF00#) xor
         (Te_S_Box(Byte(TT(4)                  and 16#0000_00FF#)) and 16#0000_00FF#) xor
         RK.all(K);
      TI(2) :=
         (Te_S_Box(Byte(Shift_Right(TT(2), 24) and 16#0000_00FF#)) and 16#FF00_0000#) xor
         (Te_S_Box(Byte(Shift_Right(TT(3), 16) and 16#0000_00FF#)) and 16#00FF_0000#) xor
         (Te_S_Box(Byte(Shift_Right(TT(4),  8) and 16#0000_00FF#)) and 16#0000_FF00#) xor
         (Te_S_Box(Byte(TT(1)                  and 16#0000_00FF#)) and 16#0000_00FF#) xor
         RK.all(K + 1);
      TI(3) :=
         (Te_S_Box(Byte(Shift_Right(TT(3), 24) and 16#0000_00FF#)) and 16#FF00_0000#) xor
         (Te_S_Box(Byte(Shift_Right(TT(4), 16) and 16#0000_00FF#)) and 16#00FF_0000#) xor
         (Te_S_Box(Byte(Shift_Right(TT(1),  8) and 16#0000_00FF#)) and 16#0000_FF00#) xor
         (Te_S_Box(Byte(TT(2)                  and 16#0000_00FF#)) and 16#0000_00FF#) xor
         RK.all(K + 2);
      TI(4) :=
         (Te_S_Box(Byte(Shift_Right(TT(4), 24) and 16#0000_00FF#)) and 16#FF00_0000#) xor
         (Te_S_Box(Byte(Shift_Right(TT(1), 16) and 16#0000_00FF#)) and 16#00FF_0000#) xor
         (Te_S_Box(Byte(Shift_Right(TT(2),  8) and 16#0000_00FF#)) and 16#0000_FF00#) xor
         (Te_S_Box(Byte(TT(3)                  and 16#0000_00FF#)) and 16#0000_00FF#) xor
         RK.all(K + 3);

      -- Copy to output block.

      Output := TI;
   end Encrypt_Block;

   --[Decrypt_Block]------------------------------------------------------------

   procedure   Decrypt_Block(
                  RK             : in     AES_Round_Keys;
                  Key_Id         : in     AES_Key_Id;
                  Input          : in     AES_Packed_Block;
                  Output         :    out AES_Packed_Block)
   is
      K              : Positive := RK.all'First;
      R              : Natural := AES_Rounds(Key_Id) / 2;
      TI             : AES_Packed_Block := Input;
      TT             : AES_Packed_Block := (others => 0);
   begin
      for I in TI'Range loop
         TI(I) := TI(I) xor RK.all(K);
         K := K + 1;
      end loop;

      K := RK.all'First;

      loop
         TT(1) :=
            Td_0(Byte(Shift_Right(TI(1), 24) and 16#0000_00FF#)) xor
            Td_1(Byte(Shift_Right(TI(4), 16) and 16#0000_00FF#)) xor
            Td_2(Byte(Shift_Right(TI(3),  8) and 16#0000_00FF#)) xor
            Td_3(Byte(TI(2)                  and 16#0000_00FF#)) xor
            RK.all(K + 4);
         TT(2) :=
            Td_0(Byte(Shift_Right(TI(2), 24) and 16#0000_00FF#)) xor
            Td_1(Byte(Shift_Right(TI(1), 16) and 16#0000_00FF#)) xor
            Td_2(Byte(Shift_Right(TI(4),  8) and 16#0000_00FF#)) xor
            Td_3(Byte(TI(3)                  and 16#0000_00FF#)) xor
            RK.all(K + 5);
         TT(3) :=
            Td_0(Byte(Shift_Right(TI(3), 24) and 16#0000_00FF#)) xor
            Td_1(Byte(Shift_Right(TI(2), 16) and 16#0000_00FF#)) xor
            Td_2(Byte(Shift_Right(TI(1),  8) and 16#0000_00FF#)) xor
            Td_3(Byte(TI(4)                  and 16#0000_00FF#)) xor
            RK.all(K + 6);
         TT(4) :=
            Td_0(Byte(Shift_Right(TI(4), 24) and 16#0000_00FF#)) xor
            Td_1(Byte(Shift_Right(TI(3), 16) and 16#0000_00FF#)) xor
            Td_2(Byte(Shift_Right(TI(2),  8) and 16#0000_00FF#)) xor
            Td_3(Byte(TI(1)                  and 16#0000_00FF#)) xor
            RK.all(K + 7);

         K := K + 8;
         R := R - 1;
         exit when R = 0;

         TI(1) :=
            Td_0(Byte(Shift_Right(TT(1), 24) and 16#0000_00FF#)) xor
            Td_1(Byte(Shift_Right(TT(4), 16) and 16#0000_00FF#)) xor
            Td_2(Byte(Shift_Right(TT(3),  8) and 16#0000_00FF#)) xor
            Td_3(Byte(TT(2)                  and 16#0000_00FF#)) xor
            RK.all(K);
         TI(2) :=
            Td_0(Byte(Shift_Right(TT(2), 24) and 16#0000_00FF#)) xor
            Td_1(Byte(Shift_Right(TT(1), 16) and 16#0000_00FF#)) xor
            Td_2(Byte(Shift_Right(TT(4),  8) and 16#0000_00FF#)) xor
            Td_3(Byte(TT(3)                  and 16#0000_00FF#)) xor
            RK.all(K + 1);
         TI(3) :=
            Td_0(Byte(Shift_Right(TT(3), 24) and 16#0000_00FF#)) xor
            Td_1(Byte(Shift_Right(TT(2), 16) and 16#0000_00FF#)) xor
            Td_2(Byte(Shift_Right(TT(1),  8) and 16#0000_00FF#)) xor
            Td_3(Byte(TT(4)                  and 16#0000_00FF#)) xor
            RK.all(K + 2);
         TI(4) :=
            Td_0(Byte(Shift_Right(TT(4), 24) and 16#0000_00FF#)) xor
            Td_1(Byte(Shift_Right(TT(3), 16) and 16#0000_00FF#)) xor
            Td_2(Byte(Shift_Right(TT(2),  8) and 16#0000_00FF#)) xor
            Td_3(Byte(TT(1)                  and 16#0000_00FF#)) xor
            RK.all(K + 3);
      end loop;

      -- Apply last round.
      
      TI(1) :=
         (Td_S_Box(Byte(Shift_Right(TT(1), 24) and 16#0000_00FF#)) and 16#FF00_0000#) xor
         (Td_S_Box(Byte(Shift_Right(TT(4), 16) and 16#0000_00FF#)) and 16#00FF_0000#) xor
         (Td_S_Box(Byte(Shift_Right(TT(3),  8) and 16#0000_00FF#)) and 16#0000_FF00#) xor
         (Td_S_Box(Byte(TT(2)                  and 16#0000_00FF#)) and 16#0000_00FF#) xor
         RK.all(K);
      TI(2) :=
         (Td_S_Box(Byte(Shift_Right(TT(2), 24) and 16#0000_00FF#)) and 16#FF00_0000#) xor
         (Td_S_Box(Byte(Shift_Right(TT(1), 16) and 16#0000_00FF#)) and 16#00FF_0000#) xor
         (Td_S_Box(Byte(Shift_Right(TT(4),  8) and 16#0000_00FF#)) and 16#0000_FF00#) xor
         (Td_S_Box(Byte(TT(3)                  and 16#0000_00FF#)) and 16#0000_00FF#) xor
         RK.all(K + 1);
      TI(3) :=
         (Td_S_Box(Byte(Shift_Right(TT(3), 24) and 16#0000_00FF#)) and 16#FF00_0000#) xor
         (Td_S_Box(Byte(Shift_Right(TT(2), 16) and 16#0000_00FF#)) and 16#00FF_0000#) xor
         (Td_S_Box(Byte(Shift_Right(TT(1),  8) and 16#0000_00FF#)) and 16#0000_FF00#) xor
         (Td_S_Box(Byte(TT(4)                  and 16#0000_00FF#)) and 16#0000_00FF#) xor
         RK.all(K + 2);
      TI(4) :=
         (Td_S_Box(Byte(Shift_Right(TT(4), 24) and 16#0000_00FF#)) and 16#FF00_0000#) xor
         (Td_S_Box(Byte(Shift_Right(TT(3), 16) and 16#0000_00FF#)) and 16#00FF_0000#) xor
         (Td_S_Box(Byte(Shift_Right(TT(2),  8) and 16#0000_00FF#)) and 16#0000_FF00#) xor
         (Td_S_Box(Byte(TT(1)                  and 16#0000_00FF#)) and 16#0000_00FF#) xor
         RK.all(K + 3);

      -- Copy temporary to output.
      
      Output := TI;
   end Decrypt_Block;

   -----------------------------------------------------------------------------
   --[Getting a handle]---------------------------------------------------------
   -----------------------------------------------------------------------------

   --[Get_Symmetric_Cipher_Handle]----------------------------------------------

   function    Get_Symmetric_Cipher_Handle
      return   Symmetric_Cipher_Handle
   is
      P           : AES_Cipher_Ptr;
   begin
      P := new AES_Cipher'(Block_Cipher with
                                 Id          => SC_AES,
                                 Key_Id      => AES_256,
                                 Round_Keys  => null);
                                 
      P.all.Ciph_Type   := CryptAda.Ciphers.Block_Cipher;
      P.all.Key_Info    := AES_Key_Info;
      P.all.State       := Idle;
      P.all.Block_Size  := AES_Block_Size;

      return Ref(Symmetric_Cipher_Ptr(P));
   exception
      when X: others =>
         Raise_Exception(
            CryptAda_Storage_Error'Identity,
            "Caught exception: '" &
               Exception_Name(X) &
               "' with message: '" &
               Exception_Message(X) &
               "', when allocating AES_Cipher object");
   end Get_Symmetric_Cipher_Handle;

   -----------------------------------------------------------------------------
   --[Ada.Finalization Operations]----------------------------------------------
   -----------------------------------------------------------------------------

   --[Initialize]---------------------------------------------------------------

   overriding
   procedure   Initialize(
                  Object         : in out AES_Cipher)
   is
   begin
      Object.Ciph_Type  := CryptAda.Ciphers.Block_Cipher;
      Object.Key_Info   := AES_Key_Info;
      Object.State      := Idle;
      Object.Block_Size := AES_Block_Size;
      Object.Key_Id     := AES_256;
      Object.Round_Keys := null;
   end Initialize;

   --[Finalize]-----------------------------------------------------------------

   overriding
   procedure   Finalize(
                  Object         : in out AES_Cipher)
   is
      T              : AES_Round_Keys := Object.Round_Keys;      
   begin
      Object.State      := Idle;
      Object.Key_Id     := AES_256;
      Object.Round_Keys := null;
      
      if T /= null then
         T.all := (others => 16#00000000#);
         Free(T);
      end if;
   end Finalize;
   
   -----------------------------------------------------------------------------
   --[Dispatching operations]---------------------------------------------------
   -----------------------------------------------------------------------------

   --[Start_Cipher]-------------------------------------------------------------

   overriding
   procedure   Start_Cipher(
                  The_Cipher     : access AES_Cipher;
                  For_Operation  : in     Cipher_Operation;
                  With_Key       : in     Key)
   is
      K_Id           : AES_Key_Id;
      RK             : AES_Round_Keys;
   begin
      -- Veriify that key is a valid AES key.
      
      if not Is_Valid_AES_Key(With_Key) then
         Raise_Exception(
            CryptAda_Invalid_Key_Error'Identity,
            "Invalid AES key");
      end if;

      -- Depending on the key length.
      
      case Get_Key_Length(With_Key) is
         when 16 =>
            K_Id  := AES_128;
         when 24 =>
            K_Id  := AES_192;
         when others =>
            K_Id  := AES_256;
      end case;
      
      -- Create AES key rounds.
      
      RK := Make_AES_Round_Keys(With_Key, K_Id);

      -- Update cipher fields.

      if For_Operation = Encrypt then
         The_Cipher.all.State    := Encrypting;
      else
         Inv_AES_Round_Keys(K_Id, RK);
         The_Cipher.all.State    := Decrypting;
      end if;

      The_Cipher.all.Key_Id      := K_Id;

      if The_Cipher.all.Round_Keys /= null then
         The_Cipher.all.Round_Keys.all := (others => 16#00000000#);
         Free(The_Cipher.all.Round_Keys);
      end if;
      
      The_Cipher.all.Round_Keys  := RK;      
   end Start_Cipher;

   --[Start_Cipher]-------------------------------------------------------------

   overriding
   procedure   Start_Cipher(
                  The_Cipher     : access AES_Cipher;
                  Parameters     : in     List)
   is
      O              : Cipher_Operation;
      K              : Key;
   begin
      Get_Parameters(Parameters, O, K);
      Start_Cipher(The_Cipher, O, K);
   end Start_Cipher;

   --[Do_Process]---------------------------------------------------------------

   overriding
   procedure   Do_Process(
                  With_Cipher    : access AES_Cipher;
                  Input          : in     Byte_Array;
                  Output         :    out Byte_Array)
   is
      B_I            : AES_Packed_Block;
      B_O            : AES_Packed_Block;
   begin
      -- Check state.
      
      if With_Cipher.all.State = Idle then
         Raise_Exception(
            CryptAda_Uninitialized_Cipher_Error'Identity,
            "AES cipher is in Idle state");
      end if;

      -- Check blocks.
      
      if Input'Length /= AES_Block_Size or
         Output'Length /= AES_Block_Size then
         Raise_Exception(
            CryptAda_Invalid_Block_Length_Error'Identity,
            "Invalid block length");               
      end if;

      -- Process block.
      
      B_I := Pack_Block(Input);
      
      if With_Cipher.all.State = Encrypting then
         Encrypt_Block(With_Cipher.all.Round_Keys, With_Cipher.all.Key_Id, B_I, B_O);
      else
         Decrypt_Block(With_Cipher.all.Round_Keys, With_Cipher.all.Key_Id, B_I, B_O);
      end if;
      
      Output := Unpack_Block(B_O);
   end Do_Process;
   
   --[Stop_Cipher]--------------------------------------------------------------

   overriding
   procedure   Stop_Cipher(
                  The_Cipher     : access AES_Cipher)
   is
   begin
      Initialize_Object(The_Cipher);
   end Stop_Cipher;
   
   -----------------------------------------------------------------------------
   --[Non-Dispatching operations]-----------------------------------------------
   -----------------------------------------------------------------------------
   
   --[Get_AES_Key_Id]-----------------------------------------------------------

   function    Get_AES_Key_Id(
                  Of_Cipher      : access AES_Cipher'Class)
      return   AES_Key_Id
   is
   begin
      if Of_Cipher.all.State = Idle then
         Raise_Exception(
            CryptAda_Uninitialized_Cipher_Error'Identity,
            "AES cipher is in Idle state");
      else
         return Of_Cipher.all.Key_Id;
      end if;
   end Get_AES_Key_Id;
   
   --[Is_Valid_AES_Key]---------------------------------------------------------
   
   function    Is_Valid_AES_Key(
                  The_Key        : in     Key)
      return   Boolean
   is
      KL             : Cipher_Key_Length;
   begin
      if Is_Null(The_Key) then
         return False;
      else
         KL := Get_Key_Length(The_Key);
         
         for I in AES_Key_Lengths'Range loop
            if AES_Key_Lengths(I) = KL then
               return True;
            end if;
         end loop;
         
         return False;
      end if;
   end Is_Valid_AES_Key;
         
end CryptAda.Ciphers.Symmetric.Block.AES;
