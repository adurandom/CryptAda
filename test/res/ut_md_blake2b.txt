================================================================================
TCantos Ada Cryptography Library (CryptAda)
Version: 0.1.d (2017/04/30)
Copyright (c) 2017, Antonio Duran
================================================================================
CryptAda Test Driver Begin
CryptAda Test Driver Name: CryptAda.Tests.Unit.MD_BLAKE2b
Description              : Unit test driver for CryptAda.Digests.Message_Digests.BLAKE2b functionality.
Started                  : 2017/05/23 - 18:13:00
================================================================================

--[Begin Test Case]-------------------------------------------------------------
Test Case Number: 1
Description     : Getting a handle for message digest objects
Started         : 2017/05/23 - 18:13:00
--------------------------------------------------------------------------------
[I] Subprograms tested: 
    - Get_Message_Digest_Handle
    - Is_Valid_Handle
    - Invalidate_Handle
    - Get_Message_Digest_Ptr
[I] Before Get_Message_Digest_Handle the handle is invalid:
[I] Handle is invalid
[I] Getting a pointer from an invalid handle will return null
[I] Pointer is null
[I] Trying any operation with a null pointer will raise Constraint_Error
    Trying Digest_Start
[I] Caught Constraint_Error
    Exception: "CONSTRAINT_ERROR"
    Message  : "cryptada-tests-unit-md_blake2b.adb:257 access check failed"
[I] Getting a message digest handle
[I] Information on handle BEFORE calling Get_Message_Digest_Handle
    Invalid Message_Digest_Handle
[I] Information on handle AFTER calling Get_Message_Digest_Handle
    Digest object tag name        : "CRYPTADA.DIGESTS.MESSAGE_DIGESTS.BLAKE2B.BLAKE2B_DIGEST"
    CryptAda digest algorithm id  : "MD_BLAKE2B"
    Digest algorithm SCAN name    : ""
    Digest algorithm ASN1 OID     : ""
    Digest algorithm OpenPGP name : ""
    State size (bytes)            :  64
    Input block size (bytes)      :  128
    Hash size (bytes)             :  64
    Processed bit count           : 16#00000000000000000000000000000000#
[I] Now the handle must be invalid:
[I] Handle is valid
[I] Getting a pointer from an invalid handle will return a not null value
[I] Pointer is not null
[I] Computing a hash value may succeed
[I] Digest information AFTER Digest_Start
    Digest object tag name        : "CRYPTADA.DIGESTS.MESSAGE_DIGESTS.BLAKE2B.BLAKE2B_DIGEST"
    CryptAda digest algorithm id  : "MD_BLAKE2B"
    Digest algorithm SCAN name    : ""
    Digest algorithm ASN1 OID     : ""
    Digest algorithm OpenPGP name : ""
    State size (bytes)            :  64
    Input block size (bytes)      :  128
    Hash size (bytes)             :  64
    Processed bit count           : 16#00000000000000000000000000000000#
[I] Calling Digest_Update
[I] Digesting string              : "CryptAda By TCantos Software"
[I] Digest information AFTER Digest_Update
    Digest object tag name        : "CRYPTADA.DIGESTS.MESSAGE_DIGESTS.BLAKE2B.BLAKE2B_DIGEST"
    CryptAda digest algorithm id  : "MD_BLAKE2B"
    Digest algorithm SCAN name    : ""
    Digest algorithm ASN1 OID     : ""
    Digest algorithm OpenPGP name : ""
    State size (bytes)            :  64
    Input block size (bytes)      :  128
    Hash size (bytes)             :  64
    Processed bit count           : 16#000000000000000000000000000000E0#
[I] Calling Digest_End to finish processing and obtaining the computed Hash
[I] Digest information AFTER Digest_End
    Digest object tag name        : "CRYPTADA.DIGESTS.MESSAGE_DIGESTS.BLAKE2B.BLAKE2B_DIGEST"
    CryptAda digest algorithm id  : "MD_BLAKE2B"
    Digest algorithm SCAN name    : ""
    Digest algorithm ASN1 OID     : ""
    Digest algorithm OpenPGP name : ""
    State size (bytes)            :  64
    Input block size (bytes)      :  128
    Hash size (bytes)             :  64
    Processed bit count           : 16#000000000000000000000000000000E0#
[I] Checking digest computation results
[I] Expected hash
    - Hash size :  64
    - Hash bytes:
16#60#, 16#FB#, 16#BB#, 16#87#, 16#CE#, 16#83#, 16#70#, 16#DD#, 16#33#, 16#B5#, 16#97#, 16#E6#, 16#0A#, 16#D5#, 16#38#, 16#83#, 
16#80#, 16#1F#, 16#80#, 16#4A#, 16#53#, 16#AD#, 16#59#, 16#2E#, 16#F4#, 16#6B#, 16#AE#, 16#98#, 16#16#, 16#4B#, 16#0D#, 16#8D#, 
16#F6#, 16#C2#, 16#5C#, 16#F9#, 16#52#, 16#10#, 16#9C#, 16#F5#, 16#A1#, 16#7C#, 16#AE#, 16#4E#, 16#9C#, 16#7A#, 16#3A#, 16#05#, 
16#06#, 16#8F#, 16#CD#, 16#01#, 16#7F#, 16#42#, 16#E2#, 16#91#, 16#82#, 16#4D#, 16#63#, 16#E2#, 16#C8#, 16#C4#, 16#69#, 16#3E#
[I] Obtained hash
    - Hash size :  64
    - Hash bytes:
16#60#, 16#FB#, 16#BB#, 16#87#, 16#CE#, 16#83#, 16#70#, 16#DD#, 16#33#, 16#B5#, 16#97#, 16#E6#, 16#0A#, 16#D5#, 16#38#, 16#83#, 
16#80#, 16#1F#, 16#80#, 16#4A#, 16#53#, 16#AD#, 16#59#, 16#2E#, 16#F4#, 16#6B#, 16#AE#, 16#98#, 16#16#, 16#4B#, 16#0D#, 16#8D#, 
16#F6#, 16#C2#, 16#5C#, 16#F9#, 16#52#, 16#10#, 16#9C#, 16#F5#, 16#A1#, 16#7C#, 16#AE#, 16#4E#, 16#9C#, 16#7A#, 16#3A#, 16#05#, 
16#06#, 16#8F#, 16#CD#, 16#01#, 16#7F#, 16#42#, 16#E2#, 16#91#, 16#82#, 16#4D#, 16#63#, 16#E2#, 16#C8#, 16#C4#, 16#69#, 16#3E#
[I] Results match
[I] Invalidating handle
[I] Digest information AFTER invalidating handle
    Invalid Message_Digest_Handle
[I] Handle is invalid
[I] Using a pointer from an invalid handle must result in an exception
    Trying Digest_Start
[I] Caught Constraint_Error
    Exception: "CONSTRAINT_ERROR"
    Message  : "cryptada-tests-unit-md_blake2b.adb:340 access check failed"
[I] Test case OK
--------------------------------------------------------------------------------
Test Case Number: 1
Test Case Result: PASSED
Finished        : 2017/05/23 - 18:13:00
--[End Test Case]---------------------------------------------------------------

--[Begin Test Case]-------------------------------------------------------------
Test Case Number: 2
Description     : Testing default Digest_Start
Started         : 2017/05/23 - 18:13:00
--------------------------------------------------------------------------------
[I] Subprograms tested: 
    - Digest_Start
    - Digest_Start(Hash_Bytes)
    - Digest_Start(Key_Bytes, Key, Hash_Bytes)
[I] Default Digest_Start will start digest computation with default parameters
    Default Hash_Bytes value is:  64
[I] Digest information BEFORE Digest_Start
    Digest object tag name        : "CRYPTADA.DIGESTS.MESSAGE_DIGESTS.BLAKE2B.BLAKE2B_DIGEST"
    CryptAda digest algorithm id  : "MD_BLAKE2B"
    Digest algorithm SCAN name    : ""
    Digest algorithm ASN1 OID     : ""
    Digest algorithm OpenPGP name : ""
    State size (bytes)            :  64
    Input block size (bytes)      :  128
    Hash size (bytes)             :  64
    Processed bit count           : 16#00000000000000000000000000000000#
[I] Digest information AFTER Digest_Start
    Digest object tag name        : "CRYPTADA.DIGESTS.MESSAGE_DIGESTS.BLAKE2B.BLAKE2B_DIGEST"
    CryptAda digest algorithm id  : "MD_BLAKE2B"
    Digest algorithm SCAN name    : ""
    Digest algorithm ASN1 OID     : ""
    Digest algorithm OpenPGP name : ""
    State size (bytes)            :  64
    Input block size (bytes)      :  128
    Hash size (bytes)             :  64
    Processed bit count           : 16#00000000000000000000000000000000#
[I] Getting Hash_Bytes
[I] Hash bytes values match
[I] Calling Digest_Start setting hash bytes to 16
[I] Digest information BEFORE Digest_Start
    Digest object tag name        : "CRYPTADA.DIGESTS.MESSAGE_DIGESTS.BLAKE2B.BLAKE2B_DIGEST"
    CryptAda digest algorithm id  : "MD_BLAKE2B"
    Digest algorithm SCAN name    : ""
    Digest algorithm ASN1 OID     : ""
    Digest algorithm OpenPGP name : ""
    State size (bytes)            :  64
    Input block size (bytes)      :  128
    Hash size (bytes)             :  64
    Processed bit count           : 16#00000000000000000000000000000000#
[I] Digest information AFTER Digest_Start
    Digest object tag name        : "CRYPTADA.DIGESTS.MESSAGE_DIGESTS.BLAKE2B.BLAKE2B_DIGEST"
    CryptAda digest algorithm id  : "MD_BLAKE2B"
    Digest algorithm SCAN name    : ""
    Digest algorithm ASN1 OID     : ""
    Digest algorithm OpenPGP name : ""
    State size (bytes)            :  64
    Input block size (bytes)      :  128
    Hash size (bytes)             :  16
    Processed bit count           : 16#00000000000000000000000000000000#
[I] Getting Hash_Bytes
[I] Hash bytes values match
[I] Calling Digest_Start for a hashed key setting hash bytes to 16
[I] Using Key:
16#00#, 16#01#, 16#02#, 16#03#, 16#04#, 16#05#, 16#06#, 16#07#, 16#08#, 16#09#, 16#0A#, 16#0B#, 16#0C#, 16#0D#, 16#0E#, 16#0F#, 
16#10#, 16#11#, 16#12#, 16#13#, 16#14#, 16#15#, 16#16#, 16#17#, 16#18#, 16#19#, 16#1A#, 16#1B#, 16#1C#, 16#1D#, 16#1E#, 16#1F#, 
16#20#, 16#21#, 16#22#, 16#23#, 16#24#, 16#25#, 16#26#, 16#27#, 16#28#, 16#29#, 16#2A#, 16#2B#, 16#2C#, 16#2D#, 16#2E#, 16#2F#, 
16#30#, 16#31#, 16#32#, 16#33#, 16#34#, 16#35#, 16#36#, 16#37#, 16#38#, 16#39#, 16#3A#, 16#3B#, 16#3C#, 16#3D#, 16#3E#, 16#3F#
[I] Digest information BEFORE Digest_Start
    Digest object tag name        : "CRYPTADA.DIGESTS.MESSAGE_DIGESTS.BLAKE2B.BLAKE2B_DIGEST"
    CryptAda digest algorithm id  : "MD_BLAKE2B"
    Digest algorithm SCAN name    : ""
    Digest algorithm ASN1 OID     : ""
    Digest algorithm OpenPGP name : ""
    State size (bytes)            :  64
    Input block size (bytes)      :  128
    Hash size (bytes)             :  16
    Processed bit count           : 16#00000000000000000000000000000000#
[I] Digest information AFTER Digest_Start
    Digest object tag name        : "CRYPTADA.DIGESTS.MESSAGE_DIGESTS.BLAKE2B.BLAKE2B_DIGEST"
    CryptAda digest algorithm id  : "MD_BLAKE2B"
    Digest algorithm SCAN name    : ""
    Digest algorithm ASN1 OID     : ""
    Digest algorithm OpenPGP name : ""
    State size (bytes)            :  64
    Input block size (bytes)      :  128
    Hash size (bytes)             :  16
    Processed bit count           : 16#00000000000000000000000000000400#
[I] Getting Hash_Bytes
[I] Hash bytes values match
[I] Test case OK
--------------------------------------------------------------------------------
Test Case Number: 2
Test Case Result: PASSED
Finished        : 2017/05/23 - 18:13:00
--[End Test Case]---------------------------------------------------------------

--[Begin Test Case]-------------------------------------------------------------
Test Case Number: 3
Description     : Testing parametrized Digest_Start
Started         : 2017/05/23 - 18:13:00
--------------------------------------------------------------------------------
[I] Subprograms tested: 
    - Digest_Start(Parameter_List)
[I] Using an empty parameters list will set the default value for hash bytes
    Parameter list: ()
[I] Digest information BEFORE Digest_Start
    Digest object tag name        : "CRYPTADA.DIGESTS.MESSAGE_DIGESTS.BLAKE2B.BLAKE2B_DIGEST"
    CryptAda digest algorithm id  : "MD_BLAKE2B"
    Digest algorithm SCAN name    : ""
    Digest algorithm ASN1 OID     : ""
    Digest algorithm OpenPGP name : ""
    State size (bytes)            :  64
    Input block size (bytes)      :  128
    Hash size (bytes)             :  64
    Processed bit count           : 16#00000000000000000000000000000000#
[I] Digest information AFTER Digest_Start
    Digest object tag name        : "CRYPTADA.DIGESTS.MESSAGE_DIGESTS.BLAKE2B.BLAKE2B_DIGEST"
    CryptAda digest algorithm id  : "MD_BLAKE2B"
    Digest algorithm SCAN name    : ""
    Digest algorithm ASN1 OID     : ""
    Digest algorithm OpenPGP name : ""
    State size (bytes)            :  64
    Input block size (bytes)      :  128
    Hash size (bytes)             :  64
    Processed bit count           : 16#00000000000000000000000000000000#
[I] Hash bytes values match
[I] Trying some invalid lists.
    Digest_Start must raise CryptAda_Bad_Argument_Error in all cases
[I] Parameter list: (32,16,"000102030405060708090a0b0c0d0e0f","0001020304050607","0001020304050607")
[I] Digest information BEFORE Digest_Start
    Digest object tag name        : "CRYPTADA.DIGESTS.MESSAGE_DIGESTS.BLAKE2B.BLAKE2B_DIGEST"
    CryptAda digest algorithm id  : "MD_BLAKE2B"
    Digest algorithm SCAN name    : ""
    Digest algorithm ASN1 OID     : ""
    Digest algorithm OpenPGP name : ""
    State size (bytes)            :  64
    Input block size (bytes)      :  128
    Hash size (bytes)             :  64
    Processed bit count           : 16#00000000000000000000000000000000#
[I] Caught CryptAda_Bad_Argument_Error
    Exception: "CRYPTADA.EXCEPTIONS.CRYPTADA_BAD_ARGUMENT_ERROR"
    Message  : "Parameter list is unnamed"
[I] Parameter list: (Key_Bytes=>16,Key=>"000102030405060708090a0b0c0d0e0f",Salt=>"0001020304050607",Personal=>"0001020304050607")
[I] Digest information BEFORE Digest_Start
    Digest object tag name        : "CRYPTADA.DIGESTS.MESSAGE_DIGESTS.BLAKE2B.BLAKE2B_DIGEST"
    CryptAda digest algorithm id  : "MD_BLAKE2B"
    Digest algorithm SCAN name    : ""
    Digest algorithm ASN1 OID     : ""
    Digest algorithm OpenPGP name : ""
    State size (bytes)            :  64
    Input block size (bytes)      :  128
    Hash size (bytes)             :  64
    Processed bit count           : 16#00000000000000000000000000000000#
[I] Caught CryptAda_Bad_Argument_Error
    Exception: "CRYPTADA.EXCEPTIONS.CRYPTADA_BAD_ARGUMENT_ERROR"
    Message  : "Parameter list does not contain mandatory item 'Hash_Bytes'"
[I] Parameter list: (Hash_Bytes=>0,Key_Bytes=>16,Key=>"000102030405060708090a0b0c0d0e0f",Salt=>"0001020304050607",Personal=>"0001020304050607")
[I] Digest information BEFORE Digest_Start
    Digest object tag name        : "CRYPTADA.DIGESTS.MESSAGE_DIGESTS.BLAKE2B.BLAKE2B_DIGEST"
    CryptAda digest algorithm id  : "MD_BLAKE2B"
    Digest algorithm SCAN name    : ""
    Digest algorithm ASN1 OID     : ""
    Digest algorithm OpenPGP name : ""
    State size (bytes)            :  64
    Input block size (bytes)      :  128
    Hash size (bytes)             :  64
    Processed bit count           : 16#00000000000000000000000000000000#
[I] Caught CryptAda_Bad_Argument_Error
    Exception: "CRYPTADA.EXCEPTIONS.CRYPTADA_BAD_ARGUMENT_ERROR"
    Message  : "Caught exception: CONSTRAINT_ERROR, with message: "cryptada-lists-integer_item.adb:171 range check failed". When obtaining BLAKE2b 'Hash_Bytes' parameter"
[I] Parameter list: (Hash_Bytes=>255,Key_Bytes=>16,Key=>"000102030405060708090a0b0c0d0e0f",Salt=>"000102030405060708090a0b0c0d0e0f",Personal=>"000102030405060708090a0b0c0d0e0f")
[I] Digest information BEFORE Digest_Start
    Digest object tag name        : "CRYPTADA.DIGESTS.MESSAGE_DIGESTS.BLAKE2B.BLAKE2B_DIGEST"
    CryptAda digest algorithm id  : "MD_BLAKE2B"
    Digest algorithm SCAN name    : ""
    Digest algorithm ASN1 OID     : ""
    Digest algorithm OpenPGP name : ""
    State size (bytes)            :  64
    Input block size (bytes)      :  128
    Hash size (bytes)             :  64
    Processed bit count           : 16#00000000000000000000000000000000#
[I] Caught CryptAda_Bad_Argument_Error
    Exception: "CRYPTADA.EXCEPTIONS.CRYPTADA_BAD_ARGUMENT_ERROR"
    Message  : "Invalid value for 'Hash_Bytes':  255"
[I] Parameter list: (Hash_Bytes=>32,Key_Bytes=>40,Key=>"000102030405060708090a0b0c0d0e0f",Salt=>"000102030405060708090a0b0c0d0e0f",Personal=>"000102030405060708090a0b0c0d0e0f")
[I] Digest information BEFORE Digest_Start
    Digest object tag name        : "CRYPTADA.DIGESTS.MESSAGE_DIGESTS.BLAKE2B.BLAKE2B_DIGEST"
    CryptAda digest algorithm id  : "MD_BLAKE2B"
    Digest algorithm SCAN name    : ""
    Digest algorithm ASN1 OID     : ""
    Digest algorithm OpenPGP name : ""
    State size (bytes)            :  64
    Input block size (bytes)      :  128
    Hash size (bytes)             :  64
    Processed bit count           : 16#00000000000000000000000000000000#
[I] Caught CryptAda_Bad_Argument_Error
    Exception: "CRYPTADA.EXCEPTIONS.CRYPTADA_BAD_ARGUMENT_ERROR"
    Message  : "'Key' parameter length is not equal to 'Key_Bytes'"
[I] Parameter list: (Hash_Bytes=>32,Key_Bytes=>8,Key=>"000102030405060708090a0b0c0d0e0f",Salt=>"000102030405060708090a0b0c0d0e0f",Personal=>"000102030405060708090a0b0c0d0e0f")
[I] Digest information BEFORE Digest_Start
    Digest object tag name        : "CRYPTADA.DIGESTS.MESSAGE_DIGESTS.BLAKE2B.BLAKE2B_DIGEST"
    CryptAda digest algorithm id  : "MD_BLAKE2B"
    Digest algorithm SCAN name    : ""
    Digest algorithm ASN1 OID     : ""
    Digest algorithm OpenPGP name : ""
    State size (bytes)            :  64
    Input block size (bytes)      :  128
    Hash size (bytes)             :  64
    Processed bit count           : 16#00000000000000000000000000000000#
[I] Caught CryptAda_Bad_Argument_Error
    Exception: "CRYPTADA.EXCEPTIONS.CRYPTADA_BAD_ARGUMENT_ERROR"
    Message  : "'Key' parameter length is not equal to 'Key_Bytes'"
[I] Parameter list: (Hash_Bytes=>32,Key_Bytes=>8,Key=>"00010203",Salt=>"000102030405060708090a0b0c0d0e0f",Personal=>"000102030405060708090a0b0c0d0e0f")
[I] Digest information BEFORE Digest_Start
    Digest object tag name        : "CRYPTADA.DIGESTS.MESSAGE_DIGESTS.BLAKE2B.BLAKE2B_DIGEST"
    CryptAda digest algorithm id  : "MD_BLAKE2B"
    Digest algorithm SCAN name    : ""
    Digest algorithm ASN1 OID     : ""
    Digest algorithm OpenPGP name : ""
    State size (bytes)            :  64
    Input block size (bytes)      :  128
    Hash size (bytes)             :  64
    Processed bit count           : 16#00000000000000000000000000000000#
[I] Caught CryptAda_Bad_Argument_Error
    Exception: "CRYPTADA.EXCEPTIONS.CRYPTADA_BAD_ARGUMENT_ERROR"
    Message  : "'Key' parameter length is not equal to 'Key_Bytes'"
[I] Parameter list: (Hash_Bytes=>32,Salt=>"000102030405060708090a0b0c0d0e",Personal=>"000102030405060708090a0b0c0d0e0f")
[I] Digest information BEFORE Digest_Start
    Digest object tag name        : "CRYPTADA.DIGESTS.MESSAGE_DIGESTS.BLAKE2B.BLAKE2B_DIGEST"
    CryptAda digest algorithm id  : "MD_BLAKE2B"
    Digest algorithm SCAN name    : ""
    Digest algorithm ASN1 OID     : ""
    Digest algorithm OpenPGP name : ""
    State size (bytes)            :  64
    Input block size (bytes)      :  128
    Hash size (bytes)             :  64
    Processed bit count           : 16#00000000000000000000000000000000#
[I] Caught CryptAda_Bad_Argument_Error
    Exception: "CRYPTADA.EXCEPTIONS.CRYPTADA_BAD_ARGUMENT_ERROR"
    Message  : "Invalid 'Salt' length"
[I] Parameter list: (Hash_Bytes=>32,Salt=>"000102030405060708090a0b0c0d0e0f",Personal=>"0102030405060708090a0b0c0d0e0f")
[I] Digest information BEFORE Digest_Start
    Digest object tag name        : "CRYPTADA.DIGESTS.MESSAGE_DIGESTS.BLAKE2B.BLAKE2B_DIGEST"
    CryptAda digest algorithm id  : "MD_BLAKE2B"
    Digest algorithm SCAN name    : ""
    Digest algorithm ASN1 OID     : ""
    Digest algorithm OpenPGP name : ""
    State size (bytes)            :  64
    Input block size (bytes)      :  128
    Hash size (bytes)             :  64
    Processed bit count           : 16#00000000000000000000000000000000#
[I] Caught CryptAda_Bad_Argument_Error
    Exception: "CRYPTADA.EXCEPTIONS.CRYPTADA_BAD_ARGUMENT_ERROR"
    Message  : "Invalid 'Personal' length"
[I] Trying a valid parameter list for Digest_Start
[I] Parameter list: (Hash_Bytes=>24,Salt=>"00010203040506070001020304050607",Personal=>"00010203040506070001020304050607")
[I] Digest information BEFORE Digest_Start
    Digest object tag name        : "CRYPTADA.DIGESTS.MESSAGE_DIGESTS.BLAKE2B.BLAKE2B_DIGEST"
    CryptAda digest algorithm id  : "MD_BLAKE2B"
    Digest algorithm SCAN name    : ""
    Digest algorithm ASN1 OID     : ""
    Digest algorithm OpenPGP name : ""
    State size (bytes)            :  64
    Input block size (bytes)      :  128
    Hash size (bytes)             :  64
    Processed bit count           : 16#00000000000000000000000000000000#
[I] Digest information AFTER Digest_Start
    Digest object tag name        : "CRYPTADA.DIGESTS.MESSAGE_DIGESTS.BLAKE2B.BLAKE2B_DIGEST"
    CryptAda digest algorithm id  : "MD_BLAKE2B"
    Digest algorithm SCAN name    : ""
    Digest algorithm ASN1 OID     : ""
    Digest algorithm OpenPGP name : ""
    State size (bytes)            :  64
    Input block size (bytes)      :  128
    Hash size (bytes)             :  24
    Processed bit count           : 16#00000000000000000000000000000000#
[I] Getting hash bytes value
    Expected hash bytes value:  24
    Obtained hash bytes value:  24
[I] Hash bytes values match
[I] Trying a valid parameter list for keyed hash Digest_Start
[I] Parameter list: (Hash_Bytes=>16,Key_Bytes=>8,Key=>"ffffffffffffffff",Salt=>"00010203040506070001020304050607",Personal=>"00010203040506070001020304050607")
[I] Digest information BEFORE Digest_Start
    Digest object tag name        : "CRYPTADA.DIGESTS.MESSAGE_DIGESTS.BLAKE2B.BLAKE2B_DIGEST"
    CryptAda digest algorithm id  : "MD_BLAKE2B"
    Digest algorithm SCAN name    : ""
    Digest algorithm ASN1 OID     : ""
    Digest algorithm OpenPGP name : ""
    State size (bytes)            :  64
    Input block size (bytes)      :  128
    Hash size (bytes)             :  24
    Processed bit count           : 16#00000000000000000000000000000000#
[I] Digest information AFTER Digest_Start
    Digest object tag name        : "CRYPTADA.DIGESTS.MESSAGE_DIGESTS.BLAKE2B.BLAKE2B_DIGEST"
    CryptAda digest algorithm id  : "MD_BLAKE2B"
    Digest algorithm SCAN name    : ""
    Digest algorithm ASN1 OID     : ""
    Digest algorithm OpenPGP name : ""
    State size (bytes)            :  64
    Input block size (bytes)      :  128
    Hash size (bytes)             :  16
    Processed bit count           : 16#00000000000000000000000000000400#
[I] Getting hash bytes value
    Expected hash bytes value:  16
    Obtained hash bytes value:  16
[I] Hash bytes values match
[I] Test case OK
--------------------------------------------------------------------------------
Test Case Number: 3
Test Case Result: PASSED
Finished        : 2017/05/23 - 18:13:00
--[End Test Case]---------------------------------------------------------------

--[Begin Test Case]-------------------------------------------------------------
Test Case Number: 4
Description     : Standard BLAKE2b 64 bytes test vectors
Started         : 2017/05/23 - 18:13:00
--------------------------------------------------------------------------------
[I] Standard test vectors obtained from https://github.com/weidai11/cryptopp/blob/master/TestVectors/blake2s.txt
    Number of vectors to test:  9
[I] Computing hash for a test vector:
    Hash algorithm                : MD_BLAKE2B
    Vector string                 : ""
    Vector length                 :  0
    Vector array                  : 

[I] Digest results
    Expected bit count            : 16#00000000000000000000000000000000#
    Obtained bit count            : 16#00000000000000000000000000000000#
    Expected hash (String)        : "786A02F742015903C6C6FD852552D272912F4740E15847618A86E217F71F5419D25E1031AFEE585313896444934EB04B903A685B1448B755D56F701AFE9BE2CE"
    Obtained hash (String)        : "786A02F742015903C6C6FD852552D272912F4740E15847618A86E217F71F5419D25E1031AFEE585313896444934EB04B903A685B1448B755D56F701AFE9BE2CE"
[I] Counters match
[I] Hashes match
[I] Vector  1 test passed.
[I] Computing hash for a test vector:
    Hash algorithm                : MD_BLAKE2B
    Vector string                 : "a"
    Vector length                 :  1
    Vector array                  : 
16#61#
[I] Digest results
    Expected bit count            : 16#00000000000000000000000000000008#
    Obtained bit count            : 16#00000000000000000000000000000008#
    Expected hash (String)        : "333FCB4EE1AA7C115355EC66CEAC917C8BFD815BF7587D325AEC1864EDD24E34D5ABE2C6B1B5EE3FACE62FED78DBEF802F2A85CB91D455A8F5249D330853CB3C"
    Obtained hash (String)        : "333FCB4EE1AA7C115355EC66CEAC917C8BFD815BF7587D325AEC1864EDD24E34D5ABE2C6B1B5EE3FACE62FED78DBEF802F2A85CB91D455A8F5249D330853CB3C"
[I] Counters match
[I] Hashes match
[I] Vector  2 test passed.
[I] Computing hash for a test vector:
    Hash algorithm                : MD_BLAKE2B
    Vector string                 : "ab"
    Vector length                 :  2
    Vector array                  : 
16#61#, 16#62#
[I] Digest results
    Expected bit count            : 16#00000000000000000000000000000010#
    Obtained bit count            : 16#00000000000000000000000000000010#
    Expected hash (String)        : "B32C0573D242B3A987D8F66BD43266B7925CEFAB3A854950641A81EF6A3F4B97928443850545770F64ABAC2A75F18475653FA3D9A52C66A840DA3B8617AE9607"
    Obtained hash (String)        : "B32C0573D242B3A987D8F66BD43266B7925CEFAB3A854950641A81EF6A3F4B97928443850545770F64ABAC2A75F18475653FA3D9A52C66A840DA3B8617AE9607"
[I] Counters match
[I] Hashes match
[I] Vector  3 test passed.
[I] Computing hash for a test vector:
    Hash algorithm                : MD_BLAKE2B
    Vector string                 : "abc"
    Vector length                 :  3
    Vector array                  : 
16#61#, 16#62#, 16#63#
[I] Digest results
    Expected bit count            : 16#00000000000000000000000000000018#
    Obtained bit count            : 16#00000000000000000000000000000018#
    Expected hash (String)        : "BA80A53F981C4D0D6A2797B69F12F6E94C212F14685AC4B74B12BB6FDBFFA2D17D87C5392AAB792DC252D5DE4533CC9518D38AA8DBF1925AB92386EDD4009923"
    Obtained hash (String)        : "BA80A53F981C4D0D6A2797B69F12F6E94C212F14685AC4B74B12BB6FDBFFA2D17D87C5392AAB792DC252D5DE4533CC9518D38AA8DBF1925AB92386EDD4009923"
[I] Counters match
[I] Hashes match
[I] Vector  4 test passed.
[I] Computing hash for a test vector:
    Hash algorithm                : MD_BLAKE2B
    Vector string                 : "abcdefghijklmnopqrstuvwxyz0123456789abcdefghijklmnopqrstuvwxyz"
    Vector length                 :  62
    Vector array                  : 
16#61#, 16#62#, 16#63#, 16#64#, 16#65#, 16#66#, 16#67#, 16#68#, 16#69#, 16#6A#, 
16#6B#, 16#6C#, 16#6D#, 16#6E#, 16#6F#, 16#70#, 16#71#, 16#72#, 16#73#, 16#74#, 
16#75#, 16#76#, 16#77#, 16#78#, 16#79#, 16#7A#, 16#30#, 16#31#, 16#32#, 16#33#, 
16#34#, 16#35#, 16#36#, 16#37#, 16#38#, 16#39#, 16#61#, 16#62#, 16#63#, 16#64#, 
16#65#, 16#66#, 16#67#, 16#68#, 16#69#, 16#6A#, 16#6B#, 16#6C#, 16#6D#, 16#6E#, 
16#6F#, 16#70#, 16#71#, 16#72#, 16#73#, 16#74#, 16#75#, 16#76#, 16#77#, 16#78#, 
16#79#, 16#7A#
[I] Digest results
    Expected bit count            : 16#000000000000000000000000000001F0#
    Obtained bit count            : 16#000000000000000000000000000001F0#
    Expected hash (String)        : "719CB49641189CE476322171431A61037955FF180057806A4D536CBAC0E4922B1990B8FD22D26894A61298AB6DF59518B872F97752EC83285C1783577EBDADB1"
    Obtained hash (String)        : "719CB49641189CE476322171431A61037955FF180057806A4D536CBAC0E4922B1990B8FD22D26894A61298AB6DF59518B872F97752EC83285C1783577EBDADB1"
[I] Counters match
[I] Hashes match
[I] Vector  5 test passed.
[I] Computing hash for a test vector:
    Hash algorithm                : MD_BLAKE2B
    Vector string                 : "abcdefghijklmnopqrstuvwxyz0123456789abcdefghijklmnopqrstuvwxyz0"
    Vector length                 :  63
    Vector array                  : 
16#61#, 16#62#, 16#63#, 16#64#, 16#65#, 16#66#, 16#67#, 16#68#, 16#69#, 16#6A#, 
16#6B#, 16#6C#, 16#6D#, 16#6E#, 16#6F#, 16#70#, 16#71#, 16#72#, 16#73#, 16#74#, 
16#75#, 16#76#, 16#77#, 16#78#, 16#79#, 16#7A#, 16#30#, 16#31#, 16#32#, 16#33#, 
16#34#, 16#35#, 16#36#, 16#37#, 16#38#, 16#39#, 16#61#, 16#62#, 16#63#, 16#64#, 
16#65#, 16#66#, 16#67#, 16#68#, 16#69#, 16#6A#, 16#6B#, 16#6C#, 16#6D#, 16#6E#, 
16#6F#, 16#70#, 16#71#, 16#72#, 16#73#, 16#74#, 16#75#, 16#76#, 16#77#, 16#78#, 
16#79#, 16#7A#, 16#30#
[I] Digest results
    Expected bit count            : 16#000000000000000000000000000001F8#
    Obtained bit count            : 16#000000000000000000000000000001F8#
    Expected hash (String)        : "1E9A5678DE8721EA74DFB4CA41CDDB8F2DD8C0DBA308C434B7709CEE6D789F4D43C516250AB85BDA9A1C04939D7B55B2407129CA340DA070CEBD04C5B2C7F869"
    Obtained hash (String)        : "1E9A5678DE8721EA74DFB4CA41CDDB8F2DD8C0DBA308C434B7709CEE6D789F4D43C516250AB85BDA9A1C04939D7B55B2407129CA340DA070CEBD04C5B2C7F869"
[I] Counters match
[I] Hashes match
[I] Vector  6 test passed.
[I] Computing hash for a test vector:
    Hash algorithm                : MD_BLAKE2B
    Vector string                 : "abcdefghijklmnopqrstuvwxyz0123456789abcdefghijklmnopqrstuvwxyz01"
    Vector length                 :  64
    Vector array                  : 
16#61#, 16#62#, 16#63#, 16#64#, 16#65#, 16#66#, 16#67#, 16#68#, 16#69#, 16#6A#, 
16#6B#, 16#6C#, 16#6D#, 16#6E#, 16#6F#, 16#70#, 16#71#, 16#72#, 16#73#, 16#74#, 
16#75#, 16#76#, 16#77#, 16#78#, 16#79#, 16#7A#, 16#30#, 16#31#, 16#32#, 16#33#, 
16#34#, 16#35#, 16#36#, 16#37#, 16#38#, 16#39#, 16#61#, 16#62#, 16#63#, 16#64#, 
16#65#, 16#66#, 16#67#, 16#68#, 16#69#, 16#6A#, 16#6B#, 16#6C#, 16#6D#, 16#6E#, 
16#6F#, 16#70#, 16#71#, 16#72#, 16#73#, 16#74#, 16#75#, 16#76#, 16#77#, 16#78#, 
16#79#, 16#7A#, 16#30#, 16#31#
[I] Digest results
    Expected bit count            : 16#00000000000000000000000000000200#
    Obtained bit count            : 16#00000000000000000000000000000200#
    Expected hash (String)        : "B3EC90EF034F75DC6494ABA71B2147F5A00DCDAAEECAAEEC382B6B43FD3FE1AAF9DFAD265CCB33F3CCBC9D9F1DC1176BAC14CA4C97B1A9D8426AD3AF19157F31"
    Obtained hash (String)        : "B3EC90EF034F75DC6494ABA71B2147F5A00DCDAAEECAAEEC382B6B43FD3FE1AAF9DFAD265CCB33F3CCBC9D9F1DC1176BAC14CA4C97B1A9D8426AD3AF19157F31"
[I] Counters match
[I] Hashes match
[I] Vector  7 test passed.
[I] Computing hash for a test vector:
    Hash algorithm                : MD_BLAKE2B
    Vector string                 : "abcdefghijklmnopqrstuvwxyz0123456789abcdefghijklmnopqrstuvwxyz012"
    Vector length                 :  65
    Vector array                  : 
16#61#, 16#62#, 16#63#, 16#64#, 16#65#, 16#66#, 16#67#, 16#68#, 16#69#, 16#6A#, 
16#6B#, 16#6C#, 16#6D#, 16#6E#, 16#6F#, 16#70#, 16#71#, 16#72#, 16#73#, 16#74#, 
16#75#, 16#76#, 16#77#, 16#78#, 16#79#, 16#7A#, 16#30#, 16#31#, 16#32#, 16#33#, 
16#34#, 16#35#, 16#36#, 16#37#, 16#38#, 16#39#, 16#61#, 16#62#, 16#63#, 16#64#, 
16#65#, 16#66#, 16#67#, 16#68#, 16#69#, 16#6A#, 16#6B#, 16#6C#, 16#6D#, 16#6E#, 
16#6F#, 16#70#, 16#71#, 16#72#, 16#73#, 16#74#, 16#75#, 16#76#, 16#77#, 16#78#, 
16#79#, 16#7A#, 16#30#, 16#31#, 16#32#
[I] Digest results
    Expected bit count            : 16#00000000000000000000000000000208#
    Obtained bit count            : 16#00000000000000000000000000000208#
    Expected hash (String)        : "B66FAAD26B6EB6D67AD84F82D39AFFED49777599501C628D45EFD07075A16922097C4FB4ED3ED60EBA3933F7BB414D63C0907F3A055858B323E59678605C8221"
    Obtained hash (String)        : "B66FAAD26B6EB6D67AD84F82D39AFFED49777599501C628D45EFD07075A16922097C4FB4ED3ED60EBA3933F7BB414D63C0907F3A055858B323E59678605C8221"
[I] Counters match
[I] Hashes match
[I] Vector  8 test passed.
[I] Computing hash for a test vector:
    Hash algorithm                : MD_BLAKE2B
    Vector string                 : "abcdefghijklmnopqrstuvwxyz0123456789abcdefghijklmnopqrstuvwxyz0123"
    Vector length                 :  66
    Vector array                  : 
16#61#, 16#62#, 16#63#, 16#64#, 16#65#, 16#66#, 16#67#, 16#68#, 16#69#, 16#6A#, 
16#6B#, 16#6C#, 16#6D#, 16#6E#, 16#6F#, 16#70#, 16#71#, 16#72#, 16#73#, 16#74#, 
16#75#, 16#76#, 16#77#, 16#78#, 16#79#, 16#7A#, 16#30#, 16#31#, 16#32#, 16#33#, 
16#34#, 16#35#, 16#36#, 16#37#, 16#38#, 16#39#, 16#61#, 16#62#, 16#63#, 16#64#, 
16#65#, 16#66#, 16#67#, 16#68#, 16#69#, 16#6A#, 16#6B#, 16#6C#, 16#6D#, 16#6E#, 
16#6F#, 16#70#, 16#71#, 16#72#, 16#73#, 16#74#, 16#75#, 16#76#, 16#77#, 16#78#, 
16#79#, 16#7A#, 16#30#, 16#31#, 16#32#, 16#33#
[I] Digest results
    Expected bit count            : 16#00000000000000000000000000000210#
    Obtained bit count            : 16#00000000000000000000000000000210#
    Expected hash (String)        : "041C69DCCCC228BBEB9D6BD2DA388A3467B80DD5DA41050F68D900065FCDD238A768BB30E2ECBF1DF6CF79F4F67482942F16E66894A7AA21D652F418D91C0AC0"
    Obtained hash (String)        : "041C69DCCCC228BBEB9D6BD2DA388A3467B80DD5DA41050F68D900065FCDD238A768BB30E2ECBF1DF6CF79F4F67482942F16E66894A7AA21D652F418D91C0AC0"
[I] Counters match
[I] Hashes match
[I] Vector  9 test passed.
[I] Test case OK
--------------------------------------------------------------------------------
Test Case Number: 4
Test Case Result: PASSED
Finished        : 2017/05/23 - 18:13:00
--[End Test Case]---------------------------------------------------------------

--[Begin Test Case]-------------------------------------------------------------
Test Case Number: 5
Description     : CryptAda BLAKE2b (32-bytes) test vectors
Started         : 2017/05/23 - 18:13:00
--------------------------------------------------------------------------------
[I] Obtained hashes are checked against values obtained from other programs
    Number of vectors to test:  9
[I] Computing hash for an CryptAda standard test vector.
    Hash algorithm                : MD_BLAKE2B
    Test vector index             :  1
    Vector string                 : ""
    Vector length                 :  0
    Vector array                  : 

[I] Digest results for vector     :  1
    Expected bit count            : 16#00000000000000000000000000000000#
    Obtained bit count            : 16#00000000000000000000000000000000#
    Expected hash (String)        : "786A02F742015903C6C6FD852552D272912F4740E15847618A86E217F71F5419D25E1031AFEE585313896444934EB04B903A685B1448B755D56F701AFE9BE2CE"
    Obtained hash (String)        : "786A02F742015903C6C6FD852552D272912F4740E15847618A86E217F71F5419D25E1031AFEE585313896444934EB04B903A685B1448B755D56F701AFE9BE2CE"
[I] Counters match
[I] Hashes match
[I] Vector  1 test passed.
[I] Computing hash for an CryptAda standard test vector.
    Hash algorithm                : MD_BLAKE2B
    Test vector index             :  2
    Vector string                 : "a"
    Vector length                 :  1
    Vector array                  : 
16#61#
[I] Digest results for vector     :  2
    Expected bit count            : 16#00000000000000000000000000000008#
    Obtained bit count            : 16#00000000000000000000000000000008#
    Expected hash (String)        : "333FCB4EE1AA7C115355EC66CEAC917C8BFD815BF7587D325AEC1864EDD24E34D5ABE2C6B1B5EE3FACE62FED78DBEF802F2A85CB91D455A8F5249D330853CB3C"
    Obtained hash (String)        : "333FCB4EE1AA7C115355EC66CEAC917C8BFD815BF7587D325AEC1864EDD24E34D5ABE2C6B1B5EE3FACE62FED78DBEF802F2A85CB91D455A8F5249D330853CB3C"
[I] Counters match
[I] Hashes match
[I] Vector  2 test passed.
[I] Computing hash for an CryptAda standard test vector.
    Hash algorithm                : MD_BLAKE2B
    Test vector index             :  3
    Vector string                 : "abc"
    Vector length                 :  3
    Vector array                  : 
16#61#, 16#62#, 16#63#
[I] Digest results for vector     :  3
    Expected bit count            : 16#00000000000000000000000000000018#
    Obtained bit count            : 16#00000000000000000000000000000018#
    Expected hash (String)        : "BA80A53F981C4D0D6A2797B69F12F6E94C212F14685AC4B74B12BB6FDBFFA2D17D87C5392AAB792DC252D5DE4533CC9518D38AA8DBF1925AB92386EDD4009923"
    Obtained hash (String)        : "BA80A53F981C4D0D6A2797B69F12F6E94C212F14685AC4B74B12BB6FDBFFA2D17D87C5392AAB792DC252D5DE4533CC9518D38AA8DBF1925AB92386EDD4009923"
[I] Counters match
[I] Hashes match
[I] Vector  3 test passed.
[I] Computing hash for an CryptAda standard test vector.
    Hash algorithm                : MD_BLAKE2B
    Test vector index             :  4
    Vector string                 : "message digest"
    Vector length                 :  14
    Vector array                  : 
16#6D#, 16#65#, 16#73#, 16#73#, 16#61#, 16#67#, 16#65#, 16#20#, 16#64#, 16#69#, 
16#67#, 16#65#, 16#73#, 16#74#
[I] Digest results for vector     :  4
    Expected bit count            : 16#00000000000000000000000000000070#
    Obtained bit count            : 16#00000000000000000000000000000070#
    Expected hash (String)        : "3C26CE487B1C0F062363AFA3C675EBDBF5F4EF9BDC022CFBEF91E3111CDC283840D8331FC30A8A0906CFF4BCDBCD230C61AAEC60FDFAD457ED96B709A382359A"
    Obtained hash (String)        : "3C26CE487B1C0F062363AFA3C675EBDBF5F4EF9BDC022CFBEF91E3111CDC283840D8331FC30A8A0906CFF4BCDBCD230C61AAEC60FDFAD457ED96B709A382359A"
[I] Counters match
[I] Hashes match
[I] Vector  4 test passed.
[I] Computing hash for an CryptAda standard test vector.
    Hash algorithm                : MD_BLAKE2B
    Test vector index             :  5
    Vector string                 : "abcdefghijklmnopqrstuvwxyz"
    Vector length                 :  26
    Vector array                  : 
16#61#, 16#62#, 16#63#, 16#64#, 16#65#, 16#66#, 16#67#, 16#68#, 16#69#, 16#6A#, 
16#6B#, 16#6C#, 16#6D#, 16#6E#, 16#6F#, 16#70#, 16#71#, 16#72#, 16#73#, 16#74#, 
16#75#, 16#76#, 16#77#, 16#78#, 16#79#, 16#7A#
[I] Digest results for vector     :  5
    Expected bit count            : 16#000000000000000000000000000000D0#
    Obtained bit count            : 16#000000000000000000000000000000D0#
    Expected hash (String)        : "C68EDE143E416EB7B4AAAE0D8E48E55DD529EAFED10B1DF1A61416953A2B0A5666C761E7D412E6709E31FFE221B7A7A73908CB95A4D120B8B090A87D1FBEDB4C"
    Obtained hash (String)        : "C68EDE143E416EB7B4AAAE0D8E48E55DD529EAFED10B1DF1A61416953A2B0A5666C761E7D412E6709E31FFE221B7A7A73908CB95A4D120B8B090A87D1FBEDB4C"
[I] Counters match
[I] Hashes match
[I] Vector  5 test passed.
[I] Computing hash for an CryptAda standard test vector.
    Hash algorithm                : MD_BLAKE2B
    Test vector index             :  6
    Vector string                 : "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789"
    Vector length                 :  62
    Vector array                  : 
16#41#, 16#42#, 16#43#, 16#44#, 16#45#, 16#46#, 16#47#, 16#48#, 16#49#, 16#4A#, 
16#4B#, 16#4C#, 16#4D#, 16#4E#, 16#4F#, 16#50#, 16#51#, 16#52#, 16#53#, 16#54#, 
16#55#, 16#56#, 16#57#, 16#58#, 16#59#, 16#5A#, 16#61#, 16#62#, 16#63#, 16#64#, 
16#65#, 16#66#, 16#67#, 16#68#, 16#69#, 16#6A#, 16#6B#, 16#6C#, 16#6D#, 16#6E#, 
16#6F#, 16#70#, 16#71#, 16#72#, 16#73#, 16#74#, 16#75#, 16#76#, 16#77#, 16#78#, 
16#79#, 16#7A#, 16#30#, 16#31#, 16#32#, 16#33#, 16#34#, 16#35#, 16#36#, 16#37#, 
16#38#, 16#39#
[I] Digest results for vector     :  6
    Expected bit count            : 16#000000000000000000000000000001F0#
    Obtained bit count            : 16#000000000000000000000000000001F0#
    Expected hash (String)        : "99964802E5C25E703722905D3FB80046B6BCA698CA9E2CC7E49B4FE1FA087C2EDF0312DFBB275CF250A1E542FD5DC2EDD313F9C491127C2E8C0C9B24168E2D50"
    Obtained hash (String)        : "99964802E5C25E703722905D3FB80046B6BCA698CA9E2CC7E49B4FE1FA087C2EDF0312DFBB275CF250A1E542FD5DC2EDD313F9C491127C2E8C0C9B24168E2D50"
[I] Counters match
[I] Hashes match
[I] Vector  6 test passed.
[I] Computing hash for an CryptAda standard test vector.
    Hash algorithm                : MD_BLAKE2B
    Test vector index             :  7
    Vector string                 : "12345678901234567890123456789012345678901234567890123456789012345678901234567890"
    Vector length                 :  80
    Vector array                  : 
16#31#, 16#32#, 16#33#, 16#34#, 16#35#, 16#36#, 16#37#, 16#38#, 16#39#, 16#30#, 
16#31#, 16#32#, 16#33#, 16#34#, 16#35#, 16#36#, 16#37#, 16#38#, 16#39#, 16#30#, 
16#31#, 16#32#, 16#33#, 16#34#, 16#35#, 16#36#, 16#37#, 16#38#, 16#39#, 16#30#, 
16#31#, 16#32#, 16#33#, 16#34#, 16#35#, 16#36#, 16#37#, 16#38#, 16#39#, 16#30#, 
16#31#, 16#32#, 16#33#, 16#34#, 16#35#, 16#36#, 16#37#, 16#38#, 16#39#, 16#30#, 
16#31#, 16#32#, 16#33#, 16#34#, 16#35#, 16#36#, 16#37#, 16#38#, 16#39#, 16#30#, 
16#31#, 16#32#, 16#33#, 16#34#, 16#35#, 16#36#, 16#37#, 16#38#, 16#39#, 16#30#, 
16#31#, 16#32#, 16#33#, 16#34#, 16#35#, 16#36#, 16#37#, 16#38#, 16#39#, 16#30#
[I] Digest results for vector     :  7
    Expected bit count            : 16#00000000000000000000000000000280#
    Obtained bit count            : 16#00000000000000000000000000000280#
    Expected hash (String)        : "686F41EC5AFFF6E87E1F076F542AA466466FF5FBDE162C48481BA48A748D842799F5B30F5B67FC684771B33B994206D05CC310F31914EDD7B97E41860D77D282"
    Obtained hash (String)        : "686F41EC5AFFF6E87E1F076F542AA466466FF5FBDE162C48481BA48A748D842799F5B30F5B67FC684771B33B994206D05CC310F31914EDD7B97E41860D77D282"
[I] Counters match
[I] Hashes match
[I] Vector  7 test passed.
[I] Computing hash for an CryptAda standard test vector.
    Hash algorithm                : MD_BLAKE2B
    Test vector index             :  8
    Vector string                 : "The quick brown fox jumps over the lazy dog"
    Vector length                 :  43
    Vector array                  : 
16#54#, 16#68#, 16#65#, 16#20#, 16#71#, 16#75#, 16#69#, 16#63#, 16#6B#, 16#20#, 
16#62#, 16#72#, 16#6F#, 16#77#, 16#6E#, 16#20#, 16#66#, 16#6F#, 16#78#, 16#20#, 
16#6A#, 16#75#, 16#6D#, 16#70#, 16#73#, 16#20#, 16#6F#, 16#76#, 16#65#, 16#72#, 
16#20#, 16#74#, 16#68#, 16#65#, 16#20#, 16#6C#, 16#61#, 16#7A#, 16#79#, 16#20#, 
16#64#, 16#6F#, 16#67#
[I] Digest results for vector     :  8
    Expected bit count            : 16#00000000000000000000000000000158#
    Obtained bit count            : 16#00000000000000000000000000000158#
    Expected hash (String)        : "A8ADD4BDDDFD93E4877D2746E62817B116364A1FA7BC148D95090BC7333B3673F82401CF7AA2E4CB1ECD90296E3F14CB5413F8ED77BE73045B13914CDCD6A918"
    Obtained hash (String)        : "A8ADD4BDDDFD93E4877D2746E62817B116364A1FA7BC148D95090BC7333B3673F82401CF7AA2E4CB1ECD90296E3F14CB5413F8ED77BE73045B13914CDCD6A918"
[I] Counters match
[I] Hashes match
[I] Vector  8 test passed.
[I] Computing hash for an CryptAda standard test vector.
    Hash algorithm                : MD_BLAKE2B
    Test vector index             :  9
    Vector string                 : "CryptAda By TCantos Software"
    Vector length                 :  28
    Vector array                  : 
16#43#, 16#72#, 16#79#, 16#70#, 16#74#, 16#41#, 16#64#, 16#61#, 16#20#, 16#42#, 
16#79#, 16#20#, 16#54#, 16#43#, 16#61#, 16#6E#, 16#74#, 16#6F#, 16#73#, 16#20#, 
16#53#, 16#6F#, 16#66#, 16#74#, 16#77#, 16#61#, 16#72#, 16#65#
[I] Digest results for vector     :  9
    Expected bit count            : 16#000000000000000000000000000000E0#
    Obtained bit count            : 16#000000000000000000000000000000E0#
    Expected hash (String)        : "60FBBB87CE8370DD33B597E60AD53883801F804A53AD592EF46BAE98164B0D8DF6C25CF952109CF5A17CAE4E9C7A3A05068FCD017F42E291824D63E2C8C4693E"
    Obtained hash (String)        : "60FBBB87CE8370DD33B597E60AD53883801F804A53AD592EF46BAE98164B0D8DF6C25CF952109CF5A17CAE4E9C7A3A05068FCD017F42E291824D63E2C8C4693E"
[I] Counters match
[I] Hashes match
[I] Vector  9 test passed.
[I] Test case OK
--------------------------------------------------------------------------------
Test Case Number: 5
Test Case Result: PASSED
Finished        : 2017/05/23 - 18:13:00
--[End Test Case]---------------------------------------------------------------

--[Begin Test Case]-------------------------------------------------------------
Test Case Number: 6
Description     : Another BLAKE2b (64 byte) test vector: 1,000,000 repetitions of 'a'
Started         : 2017/05/23 - 18:13:00
--------------------------------------------------------------------------------
[I] Performng 1,000 iteratios with a 1,000 bytes buffer
    Expected bit count (Low, High): ( 8000000,  0)
    Expected hash                 : "98FB3EFB7206FD19EBF69B6F312CF7B64E3B94DBE1A17107913975A793F177E1D077609D7FBA363CBBA00D05F7AA4E4FA8715D6428104C0A75643B0FF3FD3EAF"
    Obtained bit count (Low, High): ( 8000000,  0)
    Obtained hash                 : "98FB3EFB7206FD19EBF69B6F312CF7B64E3B94DBE1A17107913975A793F177E1D077609D7FBA363CBBA00D05F7AA4E4FA8715D6428104C0A75643B0FF3FD3EAF"
[I] Counters match
[I] Hashes match
[I] Test case OK
--------------------------------------------------------------------------------
Test Case Number: 6
Test Case Result: PASSED
Finished        : 2017/05/23 - 18:13:00
--[End Test Case]---------------------------------------------------------------

--[Begin Test Case]-------------------------------------------------------------
Test Case Number: 7
Description     : Keyed hash tests
Started         : 2017/05/23 - 18:13:00
--------------------------------------------------------------------------------
[I] Test vector:  1

[I] Key:
16#00#, 16#01#, 16#02#, 16#03#, 16#04#, 16#05#, 16#06#, 16#07#, 16#08#, 16#09#, 16#0A#, 16#0B#, 16#0C#, 16#0D#, 16#0E#, 16#0F#, 
16#10#, 16#11#, 16#12#, 16#13#, 16#14#, 16#15#, 16#16#, 16#17#, 16#18#, 16#19#, 16#1A#, 16#1B#, 16#1C#, 16#1D#, 16#1E#, 16#1F#, 
16#20#, 16#21#, 16#22#, 16#23#, 16#24#, 16#25#, 16#26#, 16#27#, 16#28#, 16#29#, 16#2A#, 16#2B#, 16#2C#, 16#2D#, 16#2E#, 16#2F#, 
16#30#, 16#31#, 16#32#, 16#33#, 16#34#, 16#35#, 16#36#, 16#37#, 16#38#, 16#39#, 16#3A#, 16#3B#, 16#3C#, 16#3D#, 16#3E#, 16#3F#
[I] Expected hash
    - Hash size :  64
    - Hash bytes:
16#10#, 16#EB#, 16#B6#, 16#77#, 16#00#, 16#B1#, 16#86#, 16#8E#, 16#FB#, 16#44#, 16#17#, 16#98#, 16#7A#, 16#CF#, 16#46#, 16#90#, 
16#AE#, 16#9D#, 16#97#, 16#2F#, 16#B7#, 16#A5#, 16#90#, 16#C2#, 16#F0#, 16#28#, 16#71#, 16#79#, 16#9A#, 16#AA#, 16#47#, 16#86#, 
16#B5#, 16#E9#, 16#96#, 16#E8#, 16#F0#, 16#F4#, 16#EB#, 16#98#, 16#1F#, 16#C2#, 16#14#, 16#B0#, 16#05#, 16#F4#, 16#2D#, 16#2F#, 
16#F4#, 16#23#, 16#34#, 16#99#, 16#39#, 16#16#, 16#53#, 16#DF#, 16#7A#, 16#EF#, 16#CB#, 16#C1#, 16#3F#, 16#C5#, 16#15#, 16#68#
[I] Obtained hash
    - Hash size :  64
    - Hash bytes:
16#10#, 16#EB#, 16#B6#, 16#77#, 16#00#, 16#B1#, 16#86#, 16#8E#, 16#FB#, 16#44#, 16#17#, 16#98#, 16#7A#, 16#CF#, 16#46#, 16#90#, 
16#AE#, 16#9D#, 16#97#, 16#2F#, 16#B7#, 16#A5#, 16#90#, 16#C2#, 16#F0#, 16#28#, 16#71#, 16#79#, 16#9A#, 16#AA#, 16#47#, 16#86#, 
16#B5#, 16#E9#, 16#96#, 16#E8#, 16#F0#, 16#F4#, 16#EB#, 16#98#, 16#1F#, 16#C2#, 16#14#, 16#B0#, 16#05#, 16#F4#, 16#2D#, 16#2F#, 
16#F4#, 16#23#, 16#34#, 16#99#, 16#39#, 16#16#, 16#53#, 16#DF#, 16#7A#, 16#EF#, 16#CB#, 16#C1#, 16#3F#, 16#C5#, 16#15#, 16#68#
[I] Results match
[I] Test vector:  2
16#00#
[I] Key:
16#00#, 16#01#, 16#02#, 16#03#, 16#04#, 16#05#, 16#06#, 16#07#, 16#08#, 16#09#, 16#0A#, 16#0B#, 16#0C#, 16#0D#, 16#0E#, 16#0F#, 
16#10#, 16#11#, 16#12#, 16#13#, 16#14#, 16#15#, 16#16#, 16#17#, 16#18#, 16#19#, 16#1A#, 16#1B#, 16#1C#, 16#1D#, 16#1E#, 16#1F#, 
16#20#, 16#21#, 16#22#, 16#23#, 16#24#, 16#25#, 16#26#, 16#27#, 16#28#, 16#29#, 16#2A#, 16#2B#, 16#2C#, 16#2D#, 16#2E#, 16#2F#, 
16#30#, 16#31#, 16#32#, 16#33#, 16#34#, 16#35#, 16#36#, 16#37#, 16#38#, 16#39#, 16#3A#, 16#3B#, 16#3C#, 16#3D#, 16#3E#, 16#3F#
[I] Expected hash
    - Hash size :  64
    - Hash bytes:
16#96#, 16#1F#, 16#6D#, 16#D1#, 16#E4#, 16#DD#, 16#30#, 16#F6#, 16#39#, 16#01#, 16#69#, 16#0C#, 16#51#, 16#2E#, 16#78#, 16#E4#, 
16#B4#, 16#5E#, 16#47#, 16#42#, 16#ED#, 16#19#, 16#7C#, 16#3C#, 16#5E#, 16#45#, 16#C5#, 16#49#, 16#FD#, 16#25#, 16#F2#, 16#E4#, 
16#18#, 16#7B#, 16#0B#, 16#C9#, 16#FE#, 16#30#, 16#49#, 16#2B#, 16#16#, 16#B0#, 16#D0#, 16#BC#, 16#4E#, 16#F9#, 16#B0#, 16#F3#, 
16#4C#, 16#70#, 16#03#, 16#FA#, 16#C0#, 16#9A#, 16#5E#, 16#F1#, 16#53#, 16#2E#, 16#69#, 16#43#, 16#02#, 16#34#, 16#CE#, 16#BD#
[I] Obtained hash
    - Hash size :  64
    - Hash bytes:
16#96#, 16#1F#, 16#6D#, 16#D1#, 16#E4#, 16#DD#, 16#30#, 16#F6#, 16#39#, 16#01#, 16#69#, 16#0C#, 16#51#, 16#2E#, 16#78#, 16#E4#, 
16#B4#, 16#5E#, 16#47#, 16#42#, 16#ED#, 16#19#, 16#7C#, 16#3C#, 16#5E#, 16#45#, 16#C5#, 16#49#, 16#FD#, 16#25#, 16#F2#, 16#E4#, 
16#18#, 16#7B#, 16#0B#, 16#C9#, 16#FE#, 16#30#, 16#49#, 16#2B#, 16#16#, 16#B0#, 16#D0#, 16#BC#, 16#4E#, 16#F9#, 16#B0#, 16#F3#, 
16#4C#, 16#70#, 16#03#, 16#FA#, 16#C0#, 16#9A#, 16#5E#, 16#F1#, 16#53#, 16#2E#, 16#69#, 16#43#, 16#02#, 16#34#, 16#CE#, 16#BD#
[I] Results match
[I] Test vector:  3
16#00#, 16#01#
[I] Key:
16#00#, 16#01#, 16#02#, 16#03#, 16#04#, 16#05#, 16#06#, 16#07#, 16#08#, 16#09#, 16#0A#, 16#0B#, 16#0C#, 16#0D#, 16#0E#, 16#0F#, 
16#10#, 16#11#, 16#12#, 16#13#, 16#14#, 16#15#, 16#16#, 16#17#, 16#18#, 16#19#, 16#1A#, 16#1B#, 16#1C#, 16#1D#, 16#1E#, 16#1F#, 
16#20#, 16#21#, 16#22#, 16#23#, 16#24#, 16#25#, 16#26#, 16#27#, 16#28#, 16#29#, 16#2A#, 16#2B#, 16#2C#, 16#2D#, 16#2E#, 16#2F#, 
16#30#, 16#31#, 16#32#, 16#33#, 16#34#, 16#35#, 16#36#, 16#37#, 16#38#, 16#39#, 16#3A#, 16#3B#, 16#3C#, 16#3D#, 16#3E#, 16#3F#
[I] Expected hash
    - Hash size :  64
    - Hash bytes:
16#DA#, 16#2C#, 16#FB#, 16#E2#, 16#D8#, 16#40#, 16#9A#, 16#0F#, 16#38#, 16#02#, 16#61#, 16#13#, 16#88#, 16#4F#, 16#84#, 16#B5#, 
16#01#, 16#56#, 16#37#, 16#1A#, 16#E3#, 16#04#, 16#C4#, 16#43#, 16#01#, 16#73#, 16#D0#, 16#8A#, 16#99#, 16#D9#, 16#FB#, 16#1B#, 
16#98#, 16#31#, 16#64#, 16#A3#, 16#77#, 16#07#, 16#06#, 16#D5#, 16#37#, 16#F4#, 16#9E#, 16#0C#, 16#91#, 16#6D#, 16#9F#, 16#32#, 
16#B9#, 16#5C#, 16#C3#, 16#7A#, 16#95#, 16#B9#, 16#9D#, 16#85#, 16#74#, 16#36#, 16#F0#, 16#23#, 16#2C#, 16#88#, 16#A9#, 16#65#
[I] Obtained hash
    - Hash size :  64
    - Hash bytes:
16#DA#, 16#2C#, 16#FB#, 16#E2#, 16#D8#, 16#40#, 16#9A#, 16#0F#, 16#38#, 16#02#, 16#61#, 16#13#, 16#88#, 16#4F#, 16#84#, 16#B5#, 
16#01#, 16#56#, 16#37#, 16#1A#, 16#E3#, 16#04#, 16#C4#, 16#43#, 16#01#, 16#73#, 16#D0#, 16#8A#, 16#99#, 16#D9#, 16#FB#, 16#1B#, 
16#98#, 16#31#, 16#64#, 16#A3#, 16#77#, 16#07#, 16#06#, 16#D5#, 16#37#, 16#F4#, 16#9E#, 16#0C#, 16#91#, 16#6D#, 16#9F#, 16#32#, 
16#B9#, 16#5C#, 16#C3#, 16#7A#, 16#95#, 16#B9#, 16#9D#, 16#85#, 16#74#, 16#36#, 16#F0#, 16#23#, 16#2C#, 16#88#, 16#A9#, 16#65#
[I] Results match
[I] Test vector:  4
16#00#, 16#01#, 16#02#
[I] Key:
16#00#, 16#01#, 16#02#, 16#03#, 16#04#, 16#05#, 16#06#, 16#07#, 16#08#, 16#09#, 16#0A#, 16#0B#, 16#0C#, 16#0D#, 16#0E#, 16#0F#, 
16#10#, 16#11#, 16#12#, 16#13#, 16#14#, 16#15#, 16#16#, 16#17#, 16#18#, 16#19#, 16#1A#, 16#1B#, 16#1C#, 16#1D#, 16#1E#, 16#1F#, 
16#20#, 16#21#, 16#22#, 16#23#, 16#24#, 16#25#, 16#26#, 16#27#, 16#28#, 16#29#, 16#2A#, 16#2B#, 16#2C#, 16#2D#, 16#2E#, 16#2F#, 
16#30#, 16#31#, 16#32#, 16#33#, 16#34#, 16#35#, 16#36#, 16#37#, 16#38#, 16#39#, 16#3A#, 16#3B#, 16#3C#, 16#3D#, 16#3E#, 16#3F#
[I] Expected hash
    - Hash size :  64
    - Hash bytes:
16#33#, 16#D0#, 16#82#, 16#5D#, 16#DD#, 16#F7#, 16#AD#, 16#A9#, 16#9B#, 16#0E#, 16#7E#, 16#30#, 16#71#, 16#04#, 16#AD#, 16#07#, 
16#CA#, 16#9C#, 16#FD#, 16#96#, 16#92#, 16#21#, 16#4F#, 16#15#, 16#61#, 16#35#, 16#63#, 16#15#, 16#E7#, 16#84#, 16#F3#, 16#E5#, 
16#A1#, 16#7E#, 16#36#, 16#4A#, 16#E9#, 16#DB#, 16#B1#, 16#4C#, 16#B2#, 16#03#, 16#6D#, 16#F9#, 16#32#, 16#B7#, 16#7F#, 16#4B#, 
16#29#, 16#27#, 16#61#, 16#36#, 16#5F#, 16#B3#, 16#28#, 16#DE#, 16#7A#, 16#FD#, 16#C6#, 16#D8#, 16#99#, 16#8F#, 16#5F#, 16#C1#
[I] Obtained hash
    - Hash size :  64
    - Hash bytes:
16#33#, 16#D0#, 16#82#, 16#5D#, 16#DD#, 16#F7#, 16#AD#, 16#A9#, 16#9B#, 16#0E#, 16#7E#, 16#30#, 16#71#, 16#04#, 16#AD#, 16#07#, 
16#CA#, 16#9C#, 16#FD#, 16#96#, 16#92#, 16#21#, 16#4F#, 16#15#, 16#61#, 16#35#, 16#63#, 16#15#, 16#E7#, 16#84#, 16#F3#, 16#E5#, 
16#A1#, 16#7E#, 16#36#, 16#4A#, 16#E9#, 16#DB#, 16#B1#, 16#4C#, 16#B2#, 16#03#, 16#6D#, 16#F9#, 16#32#, 16#B7#, 16#7F#, 16#4B#, 
16#29#, 16#27#, 16#61#, 16#36#, 16#5F#, 16#B3#, 16#28#, 16#DE#, 16#7A#, 16#FD#, 16#C6#, 16#D8#, 16#99#, 16#8F#, 16#5F#, 16#C1#
[I] Results match
[I] Test vector:  5
16#00#, 16#01#, 16#02#, 16#03#
[I] Key:
16#00#, 16#01#, 16#02#, 16#03#, 16#04#, 16#05#, 16#06#, 16#07#, 16#08#, 16#09#, 16#0A#, 16#0B#, 16#0C#, 16#0D#, 16#0E#, 16#0F#, 
16#10#, 16#11#, 16#12#, 16#13#, 16#14#, 16#15#, 16#16#, 16#17#, 16#18#, 16#19#, 16#1A#, 16#1B#, 16#1C#, 16#1D#, 16#1E#, 16#1F#, 
16#20#, 16#21#, 16#22#, 16#23#, 16#24#, 16#25#, 16#26#, 16#27#, 16#28#, 16#29#, 16#2A#, 16#2B#, 16#2C#, 16#2D#, 16#2E#, 16#2F#, 
16#30#, 16#31#, 16#32#, 16#33#, 16#34#, 16#35#, 16#36#, 16#37#, 16#38#, 16#39#, 16#3A#, 16#3B#, 16#3C#, 16#3D#, 16#3E#, 16#3F#
[I] Expected hash
    - Hash size :  64
    - Hash bytes:
16#BE#, 16#AA#, 16#5A#, 16#3D#, 16#08#, 16#F3#, 16#80#, 16#71#, 16#43#, 16#CF#, 16#62#, 16#1D#, 16#95#, 16#CD#, 16#69#, 16#05#, 
16#14#, 16#D0#, 16#B4#, 16#9E#, 16#FF#, 16#F9#, 16#C9#, 16#1D#, 16#24#, 16#B5#, 16#92#, 16#41#, 16#EC#, 16#0E#, 16#EF#, 16#A5#, 
16#F6#, 16#01#, 16#96#, 16#D4#, 16#07#, 16#04#, 16#8B#, 16#BA#, 16#8D#, 16#21#, 16#46#, 16#82#, 16#8E#, 16#BC#, 16#B0#, 16#48#, 
16#8D#, 16#88#, 16#42#, 16#FD#, 16#56#, 16#BB#, 16#4F#, 16#6D#, 16#F8#, 16#E1#, 16#9C#, 16#4B#, 16#4D#, 16#AA#, 16#B8#, 16#AC#
[I] Obtained hash
    - Hash size :  64
    - Hash bytes:
16#BE#, 16#AA#, 16#5A#, 16#3D#, 16#08#, 16#F3#, 16#80#, 16#71#, 16#43#, 16#CF#, 16#62#, 16#1D#, 16#95#, 16#CD#, 16#69#, 16#05#, 
16#14#, 16#D0#, 16#B4#, 16#9E#, 16#FF#, 16#F9#, 16#C9#, 16#1D#, 16#24#, 16#B5#, 16#92#, 16#41#, 16#EC#, 16#0E#, 16#EF#, 16#A5#, 
16#F6#, 16#01#, 16#96#, 16#D4#, 16#07#, 16#04#, 16#8B#, 16#BA#, 16#8D#, 16#21#, 16#46#, 16#82#, 16#8E#, 16#BC#, 16#B0#, 16#48#, 
16#8D#, 16#88#, 16#42#, 16#FD#, 16#56#, 16#BB#, 16#4F#, 16#6D#, 16#F8#, 16#E1#, 16#9C#, 16#4B#, 16#4D#, 16#AA#, 16#B8#, 16#AC#
[I] Results match
[I] Test vector:  6
16#00#, 16#01#, 16#02#, 16#03#, 16#04#, 16#05#, 16#06#, 16#07#, 16#08#, 16#09#, 16#0A#, 16#0B#, 16#0C#, 16#0D#, 16#0E#, 16#0F#, 
16#10#, 16#11#, 16#12#, 16#13#, 16#14#, 16#15#, 16#16#, 16#17#, 16#18#, 16#19#, 16#1A#, 16#1B#, 16#1C#, 16#1D#, 16#1E#, 16#1F#, 
16#20#, 16#21#, 16#22#, 16#23#, 16#24#, 16#25#, 16#26#, 16#27#, 16#28#, 16#29#, 16#2A#, 16#2B#, 16#2C#, 16#2D#, 16#2E#, 16#2F#, 
16#30#, 16#31#, 16#32#, 16#33#, 16#34#, 16#35#, 16#36#, 16#37#, 16#38#, 16#39#, 16#3A#, 16#3B#, 16#3C#, 16#3D#, 16#3E#, 16#3F#, 
16#40#, 16#41#, 16#42#, 16#43#, 16#44#, 16#45#, 16#46#, 16#47#, 16#48#, 16#49#, 16#4A#, 16#4B#, 16#4C#, 16#4D#, 16#4E#, 16#4F#, 
16#50#, 16#51#, 16#52#, 16#53#, 16#54#, 16#55#, 16#56#, 16#57#, 16#58#, 16#59#, 16#5A#, 16#5B#, 16#5C#, 16#5D#, 16#5E#, 16#5F#, 
16#60#, 16#61#, 16#62#, 16#63#, 16#64#, 16#65#, 16#66#, 16#67#, 16#68#, 16#69#, 16#6A#, 16#6B#, 16#6C#, 16#6D#, 16#6E#, 16#6F#, 
16#70#, 16#71#, 16#72#, 16#73#, 16#74#, 16#75#, 16#76#, 16#77#, 16#78#, 16#79#, 16#7A#, 16#7B#, 16#7C#, 16#7D#, 16#7E#, 16#7F#, 
16#80#, 16#81#, 16#82#, 16#83#, 16#84#, 16#85#, 16#86#, 16#87#, 16#88#, 16#89#, 16#8A#, 16#8B#, 16#8C#, 16#8D#, 16#8E#, 16#8F#, 
16#90#, 16#91#, 16#92#, 16#93#, 16#94#, 16#95#, 16#96#, 16#97#, 16#98#, 16#99#, 16#9A#, 16#9B#, 16#9C#, 16#9D#, 16#9E#, 16#9F#, 
16#A0#, 16#A1#, 16#A2#, 16#A3#, 16#A4#, 16#A5#, 16#A6#, 16#A7#, 16#A8#, 16#A9#, 16#AA#, 16#AB#, 16#AC#, 16#AD#, 16#AE#, 16#AF#, 
16#B0#, 16#B1#, 16#B2#, 16#B3#, 16#B4#, 16#B5#, 16#B6#, 16#B7#, 16#B8#, 16#B9#, 16#BA#, 16#BB#, 16#BC#, 16#BD#, 16#BE#, 16#BF#, 
16#C0#, 16#C1#, 16#C2#, 16#C3#, 16#C4#, 16#C5#, 16#C6#, 16#C7#, 16#C8#, 16#C9#, 16#CA#, 16#CB#, 16#CC#, 16#CD#, 16#CE#, 16#CF#, 
16#D0#, 16#D1#, 16#D2#, 16#D3#, 16#D4#, 16#D5#, 16#D6#, 16#D7#, 16#D8#, 16#D9#, 16#DA#, 16#DB#, 16#DC#, 16#DD#, 16#DE#, 16#DF#, 
16#E0#, 16#E1#, 16#E2#, 16#E3#, 16#E4#, 16#E5#, 16#E6#, 16#E7#, 16#E8#, 16#E9#, 16#EA#, 16#EB#, 16#EC#, 16#ED#, 16#EE#, 16#EF#, 
16#F0#, 16#F1#, 16#F2#, 16#F3#, 16#F4#, 16#F5#, 16#F6#, 16#F7#, 16#F8#, 16#F9#, 16#FA#
[I] Key:
16#00#, 16#01#, 16#02#, 16#03#, 16#04#, 16#05#, 16#06#, 16#07#, 16#08#, 16#09#, 16#0A#, 16#0B#, 16#0C#, 16#0D#, 16#0E#, 16#0F#, 
16#10#, 16#11#, 16#12#, 16#13#, 16#14#, 16#15#, 16#16#, 16#17#, 16#18#, 16#19#, 16#1A#, 16#1B#, 16#1C#, 16#1D#, 16#1E#, 16#1F#, 
16#20#, 16#21#, 16#22#, 16#23#, 16#24#, 16#25#, 16#26#, 16#27#, 16#28#, 16#29#, 16#2A#, 16#2B#, 16#2C#, 16#2D#, 16#2E#, 16#2F#, 
16#30#, 16#31#, 16#32#, 16#33#, 16#34#, 16#35#, 16#36#, 16#37#, 16#38#, 16#39#, 16#3A#, 16#3B#, 16#3C#, 16#3D#, 16#3E#, 16#3F#
[I] Expected hash
    - Hash size :  64
    - Hash bytes:
16#4E#, 16#5C#, 16#73#, 16#4C#, 16#7D#, 16#DE#, 16#01#, 16#1D#, 16#83#, 16#EA#, 16#C2#, 16#B7#, 16#34#, 16#7B#, 16#37#, 16#35#, 
16#94#, 16#F9#, 16#2D#, 16#70#, 16#91#, 16#B9#, 16#CA#, 16#34#, 16#CB#, 16#9C#, 16#6F#, 16#39#, 16#BD#, 16#F5#, 16#A8#, 16#D2#, 
16#F1#, 16#34#, 16#37#, 16#9E#, 16#16#, 16#D8#, 16#22#, 16#F6#, 16#52#, 16#21#, 16#70#, 16#CC#, 16#F2#, 16#DD#, 16#D5#, 16#5C#, 
16#84#, 16#B9#, 16#E6#, 16#C6#, 16#4F#, 16#C9#, 16#27#, 16#AC#, 16#4C#, 16#F8#, 16#DF#, 16#B2#, 16#A1#, 16#77#, 16#01#, 16#F2#
[I] Obtained hash
    - Hash size :  64
    - Hash bytes:
16#4E#, 16#5C#, 16#73#, 16#4C#, 16#7D#, 16#DE#, 16#01#, 16#1D#, 16#83#, 16#EA#, 16#C2#, 16#B7#, 16#34#, 16#7B#, 16#37#, 16#35#, 
16#94#, 16#F9#, 16#2D#, 16#70#, 16#91#, 16#B9#, 16#CA#, 16#34#, 16#CB#, 16#9C#, 16#6F#, 16#39#, 16#BD#, 16#F5#, 16#A8#, 16#D2#, 
16#F1#, 16#34#, 16#37#, 16#9E#, 16#16#, 16#D8#, 16#22#, 16#F6#, 16#52#, 16#21#, 16#70#, 16#CC#, 16#F2#, 16#DD#, 16#D5#, 16#5C#, 
16#84#, 16#B9#, 16#E6#, 16#C6#, 16#4F#, 16#C9#, 16#27#, 16#AC#, 16#4C#, 16#F8#, 16#DF#, 16#B2#, 16#A1#, 16#77#, 16#01#, 16#F2#
[I] Results match
[I] Test vector:  7
16#00#, 16#01#, 16#02#, 16#03#, 16#04#, 16#05#, 16#06#, 16#07#, 16#08#, 16#09#, 16#0A#, 16#0B#, 16#0C#, 16#0D#, 16#0E#, 16#0F#, 
16#10#, 16#11#, 16#12#, 16#13#, 16#14#, 16#15#, 16#16#, 16#17#, 16#18#, 16#19#, 16#1A#, 16#1B#, 16#1C#, 16#1D#, 16#1E#, 16#1F#, 
16#20#, 16#21#, 16#22#, 16#23#, 16#24#, 16#25#, 16#26#, 16#27#, 16#28#, 16#29#, 16#2A#, 16#2B#, 16#2C#, 16#2D#, 16#2E#, 16#2F#, 
16#30#, 16#31#, 16#32#, 16#33#, 16#34#, 16#35#, 16#36#, 16#37#, 16#38#, 16#39#, 16#3A#, 16#3B#, 16#3C#, 16#3D#, 16#3E#, 16#3F#, 
16#40#, 16#41#, 16#42#, 16#43#, 16#44#, 16#45#, 16#46#, 16#47#, 16#48#, 16#49#, 16#4A#, 16#4B#, 16#4C#, 16#4D#, 16#4E#, 16#4F#, 
16#50#, 16#51#, 16#52#, 16#53#, 16#54#, 16#55#, 16#56#, 16#57#, 16#58#, 16#59#, 16#5A#, 16#5B#, 16#5C#, 16#5D#, 16#5E#, 16#5F#, 
16#60#, 16#61#, 16#62#, 16#63#, 16#64#, 16#65#, 16#66#, 16#67#, 16#68#, 16#69#, 16#6A#, 16#6B#, 16#6C#, 16#6D#, 16#6E#, 16#6F#, 
16#70#, 16#71#, 16#72#, 16#73#, 16#74#, 16#75#, 16#76#, 16#77#, 16#78#, 16#79#, 16#7A#, 16#7B#, 16#7C#, 16#7D#, 16#7E#, 16#7F#, 
16#80#, 16#81#, 16#82#, 16#83#, 16#84#, 16#85#, 16#86#, 16#87#, 16#88#, 16#89#, 16#8A#, 16#8B#, 16#8C#, 16#8D#, 16#8E#, 16#8F#, 
16#90#, 16#91#, 16#92#, 16#93#, 16#94#, 16#95#, 16#96#, 16#97#, 16#98#, 16#99#, 16#9A#, 16#9B#, 16#9C#, 16#9D#, 16#9E#, 16#9F#, 
16#A0#, 16#A1#, 16#A2#, 16#A3#, 16#A4#, 16#A5#, 16#A6#, 16#A7#, 16#A8#, 16#A9#, 16#AA#, 16#AB#, 16#AC#, 16#AD#, 16#AE#, 16#AF#, 
16#B0#, 16#B1#, 16#B2#, 16#B3#, 16#B4#, 16#B5#, 16#B6#, 16#B7#, 16#B8#, 16#B9#, 16#BA#, 16#BB#, 16#BC#, 16#BD#, 16#BE#, 16#BF#, 
16#C0#, 16#C1#, 16#C2#, 16#C3#, 16#C4#, 16#C5#, 16#C6#, 16#C7#, 16#C8#, 16#C9#, 16#CA#, 16#CB#, 16#CC#, 16#CD#, 16#CE#, 16#CF#, 
16#D0#, 16#D1#, 16#D2#, 16#D3#, 16#D4#, 16#D5#, 16#D6#, 16#D7#, 16#D8#, 16#D9#, 16#DA#, 16#DB#, 16#DC#, 16#DD#, 16#DE#, 16#DF#, 
16#E0#, 16#E1#, 16#E2#, 16#E3#, 16#E4#, 16#E5#, 16#E6#, 16#E7#, 16#E8#, 16#E9#, 16#EA#, 16#EB#, 16#EC#, 16#ED#, 16#EE#, 16#EF#, 
16#F0#, 16#F1#, 16#F2#, 16#F3#, 16#F4#, 16#F5#, 16#F6#, 16#F7#, 16#F8#, 16#F9#, 16#FA#, 16#FB#
[I] Key:
16#00#, 16#01#, 16#02#, 16#03#, 16#04#, 16#05#, 16#06#, 16#07#, 16#08#, 16#09#, 16#0A#, 16#0B#, 16#0C#, 16#0D#, 16#0E#, 16#0F#, 
16#10#, 16#11#, 16#12#, 16#13#, 16#14#, 16#15#, 16#16#, 16#17#, 16#18#, 16#19#, 16#1A#, 16#1B#, 16#1C#, 16#1D#, 16#1E#, 16#1F#, 
16#20#, 16#21#, 16#22#, 16#23#, 16#24#, 16#25#, 16#26#, 16#27#, 16#28#, 16#29#, 16#2A#, 16#2B#, 16#2C#, 16#2D#, 16#2E#, 16#2F#, 
16#30#, 16#31#, 16#32#, 16#33#, 16#34#, 16#35#, 16#36#, 16#37#, 16#38#, 16#39#, 16#3A#, 16#3B#, 16#3C#, 16#3D#, 16#3E#, 16#3F#
[I] Expected hash
    - Hash size :  64
    - Hash bytes:
16#69#, 16#5D#, 16#83#, 16#BD#, 16#99#, 16#0A#, 16#11#, 16#17#, 16#B3#, 16#D0#, 16#CE#, 16#06#, 16#CC#, 16#88#, 16#80#, 16#27#, 
16#D1#, 16#2A#, 16#05#, 16#4C#, 16#26#, 16#77#, 16#FD#, 16#82#, 16#F0#, 16#D4#, 16#FB#, 16#FC#, 16#93#, 16#57#, 16#55#, 16#23#, 
16#E7#, 16#99#, 16#1A#, 16#5E#, 16#35#, 16#A3#, 16#75#, 16#2E#, 16#9B#, 16#70#, 16#CE#, 16#62#, 16#99#, 16#2E#, 16#26#, 16#8A#, 
16#87#, 16#77#, 16#44#, 16#CD#, 16#D4#, 16#35#, 16#F5#, 16#F1#, 16#30#, 16#86#, 16#9C#, 16#9A#, 16#20#, 16#74#, 16#B3#, 16#38#
[I] Obtained hash
    - Hash size :  64
    - Hash bytes:
16#69#, 16#5D#, 16#83#, 16#BD#, 16#99#, 16#0A#, 16#11#, 16#17#, 16#B3#, 16#D0#, 16#CE#, 16#06#, 16#CC#, 16#88#, 16#80#, 16#27#, 
16#D1#, 16#2A#, 16#05#, 16#4C#, 16#26#, 16#77#, 16#FD#, 16#82#, 16#F0#, 16#D4#, 16#FB#, 16#FC#, 16#93#, 16#57#, 16#55#, 16#23#, 
16#E7#, 16#99#, 16#1A#, 16#5E#, 16#35#, 16#A3#, 16#75#, 16#2E#, 16#9B#, 16#70#, 16#CE#, 16#62#, 16#99#, 16#2E#, 16#26#, 16#8A#, 
16#87#, 16#77#, 16#44#, 16#CD#, 16#D4#, 16#35#, 16#F5#, 16#F1#, 16#30#, 16#86#, 16#9C#, 16#9A#, 16#20#, 16#74#, 16#B3#, 16#38#
[I] Results match
[I] Test vector:  8
16#00#, 16#01#, 16#02#, 16#03#, 16#04#, 16#05#, 16#06#, 16#07#, 16#08#, 16#09#, 16#0A#, 16#0B#, 16#0C#, 16#0D#, 16#0E#, 16#0F#, 
16#10#, 16#11#, 16#12#, 16#13#, 16#14#, 16#15#, 16#16#, 16#17#, 16#18#, 16#19#, 16#1A#, 16#1B#, 16#1C#, 16#1D#, 16#1E#, 16#1F#, 
16#20#, 16#21#, 16#22#, 16#23#, 16#24#, 16#25#, 16#26#, 16#27#, 16#28#, 16#29#, 16#2A#, 16#2B#, 16#2C#, 16#2D#, 16#2E#, 16#2F#, 
16#30#, 16#31#, 16#32#, 16#33#, 16#34#, 16#35#, 16#36#, 16#37#, 16#38#, 16#39#, 16#3A#, 16#3B#, 16#3C#, 16#3D#, 16#3E#, 16#3F#, 
16#40#, 16#41#, 16#42#, 16#43#, 16#44#, 16#45#, 16#46#, 16#47#, 16#48#, 16#49#, 16#4A#, 16#4B#, 16#4C#, 16#4D#, 16#4E#, 16#4F#, 
16#50#, 16#51#, 16#52#, 16#53#, 16#54#, 16#55#, 16#56#, 16#57#, 16#58#, 16#59#, 16#5A#, 16#5B#, 16#5C#, 16#5D#, 16#5E#, 16#5F#, 
16#60#, 16#61#, 16#62#, 16#63#, 16#64#, 16#65#, 16#66#, 16#67#, 16#68#, 16#69#, 16#6A#, 16#6B#, 16#6C#, 16#6D#, 16#6E#, 16#6F#, 
16#70#, 16#71#, 16#72#, 16#73#, 16#74#, 16#75#, 16#76#, 16#77#, 16#78#, 16#79#, 16#7A#, 16#7B#, 16#7C#, 16#7D#, 16#7E#, 16#7F#, 
16#80#, 16#81#, 16#82#, 16#83#, 16#84#, 16#85#, 16#86#, 16#87#, 16#88#, 16#89#, 16#8A#, 16#8B#, 16#8C#, 16#8D#, 16#8E#, 16#8F#, 
16#90#, 16#91#, 16#92#, 16#93#, 16#94#, 16#95#, 16#96#, 16#97#, 16#98#, 16#99#, 16#9A#, 16#9B#, 16#9C#, 16#9D#, 16#9E#, 16#9F#, 
16#A0#, 16#A1#, 16#A2#, 16#A3#, 16#A4#, 16#A5#, 16#A6#, 16#A7#, 16#A8#, 16#A9#, 16#AA#, 16#AB#, 16#AC#, 16#AD#, 16#AE#, 16#AF#, 
16#B0#, 16#B1#, 16#B2#, 16#B3#, 16#B4#, 16#B5#, 16#B6#, 16#B7#, 16#B8#, 16#B9#, 16#BA#, 16#BB#, 16#BC#, 16#BD#, 16#BE#, 16#BF#, 
16#C0#, 16#C1#, 16#C2#, 16#C3#, 16#C4#, 16#C5#, 16#C6#, 16#C7#, 16#C8#, 16#C9#, 16#CA#, 16#CB#, 16#CC#, 16#CD#, 16#CE#, 16#CF#, 
16#D0#, 16#D1#, 16#D2#, 16#D3#, 16#D4#, 16#D5#, 16#D6#, 16#D7#, 16#D8#, 16#D9#, 16#DA#, 16#DB#, 16#DC#, 16#DD#, 16#DE#, 16#DF#, 
16#E0#, 16#E1#, 16#E2#, 16#E3#, 16#E4#, 16#E5#, 16#E6#, 16#E7#, 16#E8#, 16#E9#, 16#EA#, 16#EB#, 16#EC#, 16#ED#, 16#EE#, 16#EF#, 
16#F0#, 16#F1#, 16#F2#, 16#F3#, 16#F4#, 16#F5#, 16#F6#, 16#F7#, 16#F8#, 16#F9#, 16#FA#, 16#FB#, 16#FC#
[I] Key:
16#00#, 16#01#, 16#02#, 16#03#, 16#04#, 16#05#, 16#06#, 16#07#, 16#08#, 16#09#, 16#0A#, 16#0B#, 16#0C#, 16#0D#, 16#0E#, 16#0F#, 
16#10#, 16#11#, 16#12#, 16#13#, 16#14#, 16#15#, 16#16#, 16#17#, 16#18#, 16#19#, 16#1A#, 16#1B#, 16#1C#, 16#1D#, 16#1E#, 16#1F#, 
16#20#, 16#21#, 16#22#, 16#23#, 16#24#, 16#25#, 16#26#, 16#27#, 16#28#, 16#29#, 16#2A#, 16#2B#, 16#2C#, 16#2D#, 16#2E#, 16#2F#, 
16#30#, 16#31#, 16#32#, 16#33#, 16#34#, 16#35#, 16#36#, 16#37#, 16#38#, 16#39#, 16#3A#, 16#3B#, 16#3C#, 16#3D#, 16#3E#, 16#3F#
[I] Expected hash
    - Hash size :  64
    - Hash bytes:
16#A6#, 16#21#, 16#37#, 16#43#, 16#56#, 16#8E#, 16#3B#, 16#31#, 16#58#, 16#B9#, 16#18#, 16#43#, 16#01#, 16#F3#, 16#69#, 16#08#, 
16#47#, 16#55#, 16#4C#, 16#68#, 16#45#, 16#7C#, 16#B4#, 16#0F#, 16#C9#, 16#A4#, 16#B8#, 16#CF#, 16#D8#, 16#D4#, 16#A1#, 16#18#, 
16#C3#, 16#01#, 16#A0#, 16#77#, 16#37#, 16#AE#, 16#DA#, 16#0F#, 16#92#, 16#9C#, 16#68#, 16#91#, 16#3C#, 16#5F#, 16#51#, 16#C8#, 
16#03#, 16#94#, 16#F5#, 16#3B#, 16#FF#, 16#1C#, 16#3E#, 16#83#, 16#B2#, 16#E4#, 16#0C#, 16#A9#, 16#7E#, 16#BA#, 16#9E#, 16#15#
[I] Obtained hash
    - Hash size :  64
    - Hash bytes:
16#A6#, 16#21#, 16#37#, 16#43#, 16#56#, 16#8E#, 16#3B#, 16#31#, 16#58#, 16#B9#, 16#18#, 16#43#, 16#01#, 16#F3#, 16#69#, 16#08#, 
16#47#, 16#55#, 16#4C#, 16#68#, 16#45#, 16#7C#, 16#B4#, 16#0F#, 16#C9#, 16#A4#, 16#B8#, 16#CF#, 16#D8#, 16#D4#, 16#A1#, 16#18#, 
16#C3#, 16#01#, 16#A0#, 16#77#, 16#37#, 16#AE#, 16#DA#, 16#0F#, 16#92#, 16#9C#, 16#68#, 16#91#, 16#3C#, 16#5F#, 16#51#, 16#C8#, 
16#03#, 16#94#, 16#F5#, 16#3B#, 16#FF#, 16#1C#, 16#3E#, 16#83#, 16#B2#, 16#E4#, 16#0C#, 16#A9#, 16#7E#, 16#BA#, 16#9E#, 16#15#
[I] Results match
[I] Test vector:  9
16#00#, 16#01#, 16#02#, 16#03#, 16#04#, 16#05#, 16#06#, 16#07#, 16#08#, 16#09#, 16#0A#, 16#0B#, 16#0C#, 16#0D#, 16#0E#, 16#0F#, 
16#10#, 16#11#, 16#12#, 16#13#, 16#14#, 16#15#, 16#16#, 16#17#, 16#18#, 16#19#, 16#1A#, 16#1B#, 16#1C#, 16#1D#, 16#1E#, 16#1F#, 
16#20#, 16#21#, 16#22#, 16#23#, 16#24#, 16#25#, 16#26#, 16#27#, 16#28#, 16#29#, 16#2A#, 16#2B#, 16#2C#, 16#2D#, 16#2E#, 16#2F#, 
16#30#, 16#31#, 16#32#, 16#33#, 16#34#, 16#35#, 16#36#, 16#37#, 16#38#, 16#39#, 16#3A#, 16#3B#, 16#3C#, 16#3D#, 16#3E#, 16#3F#, 
16#40#, 16#41#, 16#42#, 16#43#, 16#44#, 16#45#, 16#46#, 16#47#, 16#48#, 16#49#, 16#4A#, 16#4B#, 16#4C#, 16#4D#, 16#4E#, 16#4F#, 
16#50#, 16#51#, 16#52#, 16#53#, 16#54#, 16#55#, 16#56#, 16#57#, 16#58#, 16#59#, 16#5A#, 16#5B#, 16#5C#, 16#5D#, 16#5E#, 16#5F#, 
16#60#, 16#61#, 16#62#, 16#63#, 16#64#, 16#65#, 16#66#, 16#67#, 16#68#, 16#69#, 16#6A#, 16#6B#, 16#6C#, 16#6D#, 16#6E#, 16#6F#, 
16#70#, 16#71#, 16#72#, 16#73#, 16#74#, 16#75#, 16#76#, 16#77#, 16#78#, 16#79#, 16#7A#, 16#7B#, 16#7C#, 16#7D#, 16#7E#, 16#7F#, 
16#80#, 16#81#, 16#82#, 16#83#, 16#84#, 16#85#, 16#86#, 16#87#, 16#88#, 16#89#, 16#8A#, 16#8B#, 16#8C#, 16#8D#, 16#8E#, 16#8F#, 
16#90#, 16#91#, 16#92#, 16#93#, 16#94#, 16#95#, 16#96#, 16#97#, 16#98#, 16#99#, 16#9A#, 16#9B#, 16#9C#, 16#9D#, 16#9E#, 16#9F#, 
16#A0#, 16#A1#, 16#A2#, 16#A3#, 16#A4#, 16#A5#, 16#A6#, 16#A7#, 16#A8#, 16#A9#, 16#AA#, 16#AB#, 16#AC#, 16#AD#, 16#AE#, 16#AF#, 
16#B0#, 16#B1#, 16#B2#, 16#B3#, 16#B4#, 16#B5#, 16#B6#, 16#B7#, 16#B8#, 16#B9#, 16#BA#, 16#BB#, 16#BC#, 16#BD#, 16#BE#, 16#BF#, 
16#C0#, 16#C1#, 16#C2#, 16#C3#, 16#C4#, 16#C5#, 16#C6#, 16#C7#, 16#C8#, 16#C9#, 16#CA#, 16#CB#, 16#CC#, 16#CD#, 16#CE#, 16#CF#, 
16#D0#, 16#D1#, 16#D2#, 16#D3#, 16#D4#, 16#D5#, 16#D6#, 16#D7#, 16#D8#, 16#D9#, 16#DA#, 16#DB#, 16#DC#, 16#DD#, 16#DE#, 16#DF#, 
16#E0#, 16#E1#, 16#E2#, 16#E3#, 16#E4#, 16#E5#, 16#E6#, 16#E7#, 16#E8#, 16#E9#, 16#EA#, 16#EB#, 16#EC#, 16#ED#, 16#EE#, 16#EF#, 
16#F0#, 16#F1#, 16#F2#, 16#F3#, 16#F4#, 16#F5#, 16#F6#, 16#F7#, 16#F8#, 16#F9#, 16#FA#, 16#FB#, 16#FC#, 16#FD#
[I] Key:
16#00#, 16#01#, 16#02#, 16#03#, 16#04#, 16#05#, 16#06#, 16#07#, 16#08#, 16#09#, 16#0A#, 16#0B#, 16#0C#, 16#0D#, 16#0E#, 16#0F#, 
16#10#, 16#11#, 16#12#, 16#13#, 16#14#, 16#15#, 16#16#, 16#17#, 16#18#, 16#19#, 16#1A#, 16#1B#, 16#1C#, 16#1D#, 16#1E#, 16#1F#, 
16#20#, 16#21#, 16#22#, 16#23#, 16#24#, 16#25#, 16#26#, 16#27#, 16#28#, 16#29#, 16#2A#, 16#2B#, 16#2C#, 16#2D#, 16#2E#, 16#2F#, 
16#30#, 16#31#, 16#32#, 16#33#, 16#34#, 16#35#, 16#36#, 16#37#, 16#38#, 16#39#, 16#3A#, 16#3B#, 16#3C#, 16#3D#, 16#3E#, 16#3F#
[I] Expected hash
    - Hash size :  64
    - Hash bytes:
16#D4#, 16#44#, 16#BF#, 16#A2#, 16#36#, 16#2A#, 16#96#, 16#DF#, 16#21#, 16#3D#, 16#07#, 16#0E#, 16#33#, 16#FA#, 16#84#, 16#1F#, 
16#51#, 16#33#, 16#4E#, 16#4E#, 16#76#, 16#86#, 16#6B#, 16#81#, 16#39#, 16#E8#, 16#AF#, 16#3B#, 16#B3#, 16#39#, 16#8B#, 16#E2#, 
16#DF#, 16#AD#, 16#DC#, 16#BC#, 16#56#, 16#B9#, 16#14#, 16#6D#, 16#E9#, 16#F6#, 16#81#, 16#18#, 16#DC#, 16#58#, 16#29#, 16#E7#, 
16#4B#, 16#0C#, 16#28#, 16#D7#, 16#71#, 16#19#, 16#07#, 16#B1#, 16#21#, 16#F9#, 16#16#, 16#1C#, 16#B9#, 16#2B#, 16#69#, 16#A9#
[I] Obtained hash
    - Hash size :  64
    - Hash bytes:
16#D4#, 16#44#, 16#BF#, 16#A2#, 16#36#, 16#2A#, 16#96#, 16#DF#, 16#21#, 16#3D#, 16#07#, 16#0E#, 16#33#, 16#FA#, 16#84#, 16#1F#, 
16#51#, 16#33#, 16#4E#, 16#4E#, 16#76#, 16#86#, 16#6B#, 16#81#, 16#39#, 16#E8#, 16#AF#, 16#3B#, 16#B3#, 16#39#, 16#8B#, 16#E2#, 
16#DF#, 16#AD#, 16#DC#, 16#BC#, 16#56#, 16#B9#, 16#14#, 16#6D#, 16#E9#, 16#F6#, 16#81#, 16#18#, 16#DC#, 16#58#, 16#29#, 16#E7#, 
16#4B#, 16#0C#, 16#28#, 16#D7#, 16#71#, 16#19#, 16#07#, 16#B1#, 16#21#, 16#F9#, 16#16#, 16#1C#, 16#B9#, 16#2B#, 16#69#, 16#A9#
[I] Results match
[I] Test vector:  10
16#00#, 16#01#, 16#02#, 16#03#, 16#04#, 16#05#, 16#06#, 16#07#, 16#08#, 16#09#, 16#0A#, 16#0B#, 16#0C#, 16#0D#, 16#0E#, 16#0F#, 
16#10#, 16#11#, 16#12#, 16#13#, 16#14#, 16#15#, 16#16#, 16#17#, 16#18#, 16#19#, 16#1A#, 16#1B#, 16#1C#, 16#1D#, 16#1E#, 16#1F#, 
16#20#, 16#21#, 16#22#, 16#23#, 16#24#, 16#25#, 16#26#, 16#27#, 16#28#, 16#29#, 16#2A#, 16#2B#, 16#2C#, 16#2D#, 16#2E#, 16#2F#, 
16#30#, 16#31#, 16#32#, 16#33#, 16#34#, 16#35#, 16#36#, 16#37#, 16#38#, 16#39#, 16#3A#, 16#3B#, 16#3C#, 16#3D#, 16#3E#, 16#3F#, 
16#40#, 16#41#, 16#42#, 16#43#, 16#44#, 16#45#, 16#46#, 16#47#, 16#48#, 16#49#, 16#4A#, 16#4B#, 16#4C#, 16#4D#, 16#4E#, 16#4F#, 
16#50#, 16#51#, 16#52#, 16#53#, 16#54#, 16#55#, 16#56#, 16#57#, 16#58#, 16#59#, 16#5A#, 16#5B#, 16#5C#, 16#5D#, 16#5E#, 16#5F#, 
16#60#, 16#61#, 16#62#, 16#63#, 16#64#, 16#65#, 16#66#, 16#67#, 16#68#, 16#69#, 16#6A#, 16#6B#, 16#6C#, 16#6D#, 16#6E#, 16#6F#, 
16#70#, 16#71#, 16#72#, 16#73#, 16#74#, 16#75#, 16#76#, 16#77#, 16#78#, 16#79#, 16#7A#, 16#7B#, 16#7C#, 16#7D#, 16#7E#, 16#7F#, 
16#80#, 16#81#, 16#82#, 16#83#, 16#84#, 16#85#, 16#86#, 16#87#, 16#88#, 16#89#, 16#8A#, 16#8B#, 16#8C#, 16#8D#, 16#8E#, 16#8F#, 
16#90#, 16#91#, 16#92#, 16#93#, 16#94#, 16#95#, 16#96#, 16#97#, 16#98#, 16#99#, 16#9A#, 16#9B#, 16#9C#, 16#9D#, 16#9E#, 16#9F#, 
16#A0#, 16#A1#, 16#A2#, 16#A3#, 16#A4#, 16#A5#, 16#A6#, 16#A7#, 16#A8#, 16#A9#, 16#AA#, 16#AB#, 16#AC#, 16#AD#, 16#AE#, 16#AF#, 
16#B0#, 16#B1#, 16#B2#, 16#B3#, 16#B4#, 16#B5#, 16#B6#, 16#B7#, 16#B8#, 16#B9#, 16#BA#, 16#BB#, 16#BC#, 16#BD#, 16#BE#, 16#BF#, 
16#C0#, 16#C1#, 16#C2#, 16#C3#, 16#C4#, 16#C5#, 16#C6#, 16#C7#, 16#C8#, 16#C9#, 16#CA#, 16#CB#, 16#CC#, 16#CD#, 16#CE#, 16#CF#, 
16#D0#, 16#D1#, 16#D2#, 16#D3#, 16#D4#, 16#D5#, 16#D6#, 16#D7#, 16#D8#, 16#D9#, 16#DA#, 16#DB#, 16#DC#, 16#DD#, 16#DE#, 16#DF#, 
16#E0#, 16#E1#, 16#E2#, 16#E3#, 16#E4#, 16#E5#, 16#E6#, 16#E7#, 16#E8#, 16#E9#, 16#EA#, 16#EB#, 16#EC#, 16#ED#, 16#EE#, 16#EF#, 
16#F0#, 16#F1#, 16#F2#, 16#F3#, 16#F4#, 16#F5#, 16#F6#, 16#F7#, 16#F8#, 16#F9#, 16#FA#, 16#FB#, 16#FC#, 16#FD#, 16#FE#
[I] Key:
16#00#, 16#01#, 16#02#, 16#03#, 16#04#, 16#05#, 16#06#, 16#07#, 16#08#, 16#09#, 16#0A#, 16#0B#, 16#0C#, 16#0D#, 16#0E#, 16#0F#, 
16#10#, 16#11#, 16#12#, 16#13#, 16#14#, 16#15#, 16#16#, 16#17#, 16#18#, 16#19#, 16#1A#, 16#1B#, 16#1C#, 16#1D#, 16#1E#, 16#1F#, 
16#20#, 16#21#, 16#22#, 16#23#, 16#24#, 16#25#, 16#26#, 16#27#, 16#28#, 16#29#, 16#2A#, 16#2B#, 16#2C#, 16#2D#, 16#2E#, 16#2F#, 
16#30#, 16#31#, 16#32#, 16#33#, 16#34#, 16#35#, 16#36#, 16#37#, 16#38#, 16#39#, 16#3A#, 16#3B#, 16#3C#, 16#3D#, 16#3E#, 16#3F#
[I] Expected hash
    - Hash size :  64
    - Hash bytes:
16#14#, 16#27#, 16#09#, 16#D6#, 16#2E#, 16#28#, 16#FC#, 16#CC#, 16#D0#, 16#AF#, 16#97#, 16#FA#, 16#D0#, 16#F8#, 16#46#, 16#5B#, 
16#97#, 16#1E#, 16#82#, 16#20#, 16#1D#, 16#C5#, 16#10#, 16#70#, 16#FA#, 16#A0#, 16#37#, 16#2A#, 16#A4#, 16#3E#, 16#92#, 16#48#, 
16#4B#, 16#E1#, 16#C1#, 16#E7#, 16#3B#, 16#A1#, 16#09#, 16#06#, 16#D5#, 16#D1#, 16#85#, 16#3D#, 16#B6#, 16#A4#, 16#10#, 16#6E#, 
16#0A#, 16#7B#, 16#F9#, 16#80#, 16#0D#, 16#37#, 16#3D#, 16#6D#, 16#EE#, 16#2D#, 16#46#, 16#D6#, 16#2E#, 16#F2#, 16#A4#, 16#61#
[I] Obtained hash
    - Hash size :  64
    - Hash bytes:
16#14#, 16#27#, 16#09#, 16#D6#, 16#2E#, 16#28#, 16#FC#, 16#CC#, 16#D0#, 16#AF#, 16#97#, 16#FA#, 16#D0#, 16#F8#, 16#46#, 16#5B#, 
16#97#, 16#1E#, 16#82#, 16#20#, 16#1D#, 16#C5#, 16#10#, 16#70#, 16#FA#, 16#A0#, 16#37#, 16#2A#, 16#A4#, 16#3E#, 16#92#, 16#48#, 
16#4B#, 16#E1#, 16#C1#, 16#E7#, 16#3B#, 16#A1#, 16#09#, 16#06#, 16#D5#, 16#D1#, 16#85#, 16#3D#, 16#B6#, 16#A4#, 16#10#, 16#6E#, 
16#0A#, 16#7B#, 16#F9#, 16#80#, 16#0D#, 16#37#, 16#3D#, 16#6D#, 16#EE#, 16#2D#, 16#46#, 16#D6#, 16#2E#, 16#F2#, 16#A4#, 16#61#
[I] Results match
[I] Test case OK
--------------------------------------------------------------------------------
Test Case Number: 7
Test Case Result: PASSED
Finished        : 2017/05/23 - 18:13:00
--[End Test Case]---------------------------------------------------------------

================================================================================
CryptAda Test Driver End
CryptAda Test Driver Name: CryptAda.Tests.Unit.MD_BLAKE2b
Finished                 : 2017/05/23 - 18:13:00
================================================================================
