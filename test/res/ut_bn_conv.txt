================================================================================
TCantos Ada Cryptography Library (CryptAda)
Version: 0.1.a (2017/03/31)
Copyright (c) 2017, Antonio Duran
================================================================================
CryptAda Test Driver Begin
CryptAda Test Driver Name: CryptAda.Big_Naturals.Tests.Conv
Description              : Unit test driver for CryptAda.Big_Naturals string conversion functionality.
Started                  : 2017/03/20 - 21:38:04
================================================================================
[I] This test driver will validate conversion from/to string literals to/from Digit_Sequences
Next elements will be tested:
    - String_2_Digit_Sequence()
    - Digit_Sequence_2_String()

--[Begin Test Case]-------------------------------------------------------------
Test Case Number: 1
Description     : Testing CryptAda_Syntax_Error conditions
Started         : 2017/03/20 - 21:38:04
--------------------------------------------------------------------------------
[I] Interfaces exercised:
- String_2_Digit_Sequence()
[I] Conversion must raise CryptAda_Syntax_Error
[I] Literal strings erroneous for all bases
[I] Base:  2
    String to test: "-"
[I] Raised CryptAda_Syntax_Error
    String to test: "                                           @"
[I] Raised CryptAda_Syntax_Error
    String to test: "       nnnnnnnnnnnnnnnnnnnn                 "
[I] Raised CryptAda_Syntax_Error
    String to test: "abcdefghijk"
[I] Raised CryptAda_Syntax_Error
    String to test: "101010101 10101010101"
[I] Raised CryptAda_Syntax_Error
[I] Base:  3
    String to test: "-"
[I] Raised CryptAda_Syntax_Error
    String to test: "                                           @"
[I] Raised CryptAda_Syntax_Error
    String to test: "       nnnnnnnnnnnnnnnnnnnn                 "
[I] Raised CryptAda_Syntax_Error
    String to test: "abcdefghijk"
[I] Raised CryptAda_Syntax_Error
    String to test: "101010101 10101010101"
[I] Raised CryptAda_Syntax_Error
[I] Base:  4
    String to test: "-"
[I] Raised CryptAda_Syntax_Error
    String to test: "                                           @"
[I] Raised CryptAda_Syntax_Error
    String to test: "       nnnnnnnnnnnnnnnnnnnn                 "
[I] Raised CryptAda_Syntax_Error
    String to test: "abcdefghijk"
[I] Raised CryptAda_Syntax_Error
    String to test: "101010101 10101010101"
[I] Raised CryptAda_Syntax_Error
[I] Base:  5
    String to test: "-"
[I] Raised CryptAda_Syntax_Error
    String to test: "                                           @"
[I] Raised CryptAda_Syntax_Error
    String to test: "       nnnnnnnnnnnnnnnnnnnn                 "
[I] Raised CryptAda_Syntax_Error
    String to test: "abcdefghijk"
[I] Raised CryptAda_Syntax_Error
    String to test: "101010101 10101010101"
[I] Raised CryptAda_Syntax_Error
[I] Base:  6
    String to test: "-"
[I] Raised CryptAda_Syntax_Error
    String to test: "                                           @"
[I] Raised CryptAda_Syntax_Error
    String to test: "       nnnnnnnnnnnnnnnnnnnn                 "
[I] Raised CryptAda_Syntax_Error
    String to test: "abcdefghijk"
[I] Raised CryptAda_Syntax_Error
    String to test: "101010101 10101010101"
[I] Raised CryptAda_Syntax_Error
[I] Base:  7
    String to test: "-"
[I] Raised CryptAda_Syntax_Error
    String to test: "                                           @"
[I] Raised CryptAda_Syntax_Error
    String to test: "       nnnnnnnnnnnnnnnnnnnn                 "
[I] Raised CryptAda_Syntax_Error
    String to test: "abcdefghijk"
[I] Raised CryptAda_Syntax_Error
    String to test: "101010101 10101010101"
[I] Raised CryptAda_Syntax_Error
[I] Base:  8
    String to test: "-"
[I] Raised CryptAda_Syntax_Error
    String to test: "                                           @"
[I] Raised CryptAda_Syntax_Error
    String to test: "       nnnnnnnnnnnnnnnnnnnn                 "
[I] Raised CryptAda_Syntax_Error
    String to test: "abcdefghijk"
[I] Raised CryptAda_Syntax_Error
    String to test: "101010101 10101010101"
[I] Raised CryptAda_Syntax_Error
[I] Base:  9
    String to test: "-"
[I] Raised CryptAda_Syntax_Error
    String to test: "                                           @"
[I] Raised CryptAda_Syntax_Error
    String to test: "       nnnnnnnnnnnnnnnnnnnn                 "
[I] Raised CryptAda_Syntax_Error
    String to test: "abcdefghijk"
[I] Raised CryptAda_Syntax_Error
    String to test: "101010101 10101010101"
[I] Raised CryptAda_Syntax_Error
[I] Base:  10
    String to test: "-"
[I] Raised CryptAda_Syntax_Error
    String to test: "                                           @"
[I] Raised CryptAda_Syntax_Error
    String to test: "       nnnnnnnnnnnnnnnnnnnn                 "
[I] Raised CryptAda_Syntax_Error
    String to test: "abcdefghijk"
[I] Raised CryptAda_Syntax_Error
    String to test: "101010101 10101010101"
[I] Raised CryptAda_Syntax_Error
[I] Base:  11
    String to test: "-"
[I] Raised CryptAda_Syntax_Error
    String to test: "                                           @"
[I] Raised CryptAda_Syntax_Error
    String to test: "       nnnnnnnnnnnnnnnnnnnn                 "
[I] Raised CryptAda_Syntax_Error
    String to test: "abcdefghijk"
[I] Raised CryptAda_Syntax_Error
    String to test: "101010101 10101010101"
[I] Raised CryptAda_Syntax_Error
[I] Base:  12
    String to test: "-"
[I] Raised CryptAda_Syntax_Error
    String to test: "                                           @"
[I] Raised CryptAda_Syntax_Error
    String to test: "       nnnnnnnnnnnnnnnnnnnn                 "
[I] Raised CryptAda_Syntax_Error
    String to test: "abcdefghijk"
[I] Raised CryptAda_Syntax_Error
    String to test: "101010101 10101010101"
[I] Raised CryptAda_Syntax_Error
[I] Base:  13
    String to test: "-"
[I] Raised CryptAda_Syntax_Error
    String to test: "                                           @"
[I] Raised CryptAda_Syntax_Error
    String to test: "       nnnnnnnnnnnnnnnnnnnn                 "
[I] Raised CryptAda_Syntax_Error
    String to test: "abcdefghijk"
[I] Raised CryptAda_Syntax_Error
    String to test: "101010101 10101010101"
[I] Raised CryptAda_Syntax_Error
[I] Base:  14
    String to test: "-"
[I] Raised CryptAda_Syntax_Error
    String to test: "                                           @"
[I] Raised CryptAda_Syntax_Error
    String to test: "       nnnnnnnnnnnnnnnnnnnn                 "
[I] Raised CryptAda_Syntax_Error
    String to test: "abcdefghijk"
[I] Raised CryptAda_Syntax_Error
    String to test: "101010101 10101010101"
[I] Raised CryptAda_Syntax_Error
[I] Base:  15
    String to test: "-"
[I] Raised CryptAda_Syntax_Error
    String to test: "                                           @"
[I] Raised CryptAda_Syntax_Error
    String to test: "       nnnnnnnnnnnnnnnnnnnn                 "
[I] Raised CryptAda_Syntax_Error
    String to test: "abcdefghijk"
[I] Raised CryptAda_Syntax_Error
    String to test: "101010101 10101010101"
[I] Raised CryptAda_Syntax_Error
[I] Base:  16
    String to test: "-"
[I] Raised CryptAda_Syntax_Error
    String to test: "                                           @"
[I] Raised CryptAda_Syntax_Error
    String to test: "       nnnnnnnnnnnnnnnnnnnn                 "
[I] Raised CryptAda_Syntax_Error
    String to test: "abcdefghijk"
[I] Raised CryptAda_Syntax_Error
    String to test: "101010101 10101010101"
[I] Raised CryptAda_Syntax_Error
[I] Test case OK.
--------------------------------------------------------------------------------
Test Case Number: 1
Test Case Result: PASSED
Finished        : 2017/03/20 - 21:38:04
--[End Test Case]---------------------------------------------------------------

--[Begin Test Case]-------------------------------------------------------------
Test Case Number: 2
Description     : Testing CryptAda_Syntax_Error conditions
Started         : 2017/03/20 - 21:38:04
--------------------------------------------------------------------------------
[I] Interfaces exercised:
- String_2_Digit_Sequence()
[I] Conversion must raise CryptAda_Syntax_Error
[I] Tsting literal strings erroneous in one base but valid in other bases
[I] String to test: " 012 "
Must raise CryptAda_Syntax_Error in base:  2
[I] Raised CryptAda_Syntax_Error
Must be valid in remaining bases
Testing in base:  3
Obtained digit sequence: 
Length            :  100
Significant Digits:  1
00000005 
Testing in base:  4
Obtained digit sequence: 
Length            :  100
Significant Digits:  1
00000006 
Testing in base:  5
Obtained digit sequence: 
Length            :  100
Significant Digits:  1
00000007 
Testing in base:  6
Obtained digit sequence: 
Length            :  100
Significant Digits:  1
00000008 
Testing in base:  7
Obtained digit sequence: 
Length            :  100
Significant Digits:  1
00000009 
Testing in base:  8
Obtained digit sequence: 
Length            :  100
Significant Digits:  1
0000000A 
Testing in base:  9
Obtained digit sequence: 
Length            :  100
Significant Digits:  1
0000000B 
Testing in base:  10
Obtained digit sequence: 
Length            :  100
Significant Digits:  1
0000000C 
Testing in base:  11
Obtained digit sequence: 
Length            :  100
Significant Digits:  1
0000000D 
Testing in base:  12
Obtained digit sequence: 
Length            :  100
Significant Digits:  1
0000000E 
Testing in base:  13
Obtained digit sequence: 
Length            :  100
Significant Digits:  1
0000000F 
Testing in base:  14
Obtained digit sequence: 
Length            :  100
Significant Digits:  1
00000010 
Testing in base:  15
Obtained digit sequence: 
Length            :  100
Significant Digits:  1
00000011 
Testing in base:  16
Obtained digit sequence: 
Length            :  100
Significant Digits:  1
00000012 
[I] String to test: " 0123 "
Must raise CryptAda_Syntax_Error in base:  3
[I] Raised CryptAda_Syntax_Error
Must be valid in remaining bases
Testing in base:  4
Obtained digit sequence: 
Length            :  100
Significant Digits:  1
0000001B 
Testing in base:  5
Obtained digit sequence: 
Length            :  100
Significant Digits:  1
00000026 
Testing in base:  6
Obtained digit sequence: 
Length            :  100
Significant Digits:  1
00000033 
Testing in base:  7
Obtained digit sequence: 
Length            :  100
Significant Digits:  1
00000042 
Testing in base:  8
Obtained digit sequence: 
Length            :  100
Significant Digits:  1
00000053 
Testing in base:  9
Obtained digit sequence: 
Length            :  100
Significant Digits:  1
00000066 
Testing in base:  10
Obtained digit sequence: 
Length            :  100
Significant Digits:  1
0000007B 
Testing in base:  11
Obtained digit sequence: 
Length            :  100
Significant Digits:  1
00000092 
Testing in base:  12
Obtained digit sequence: 
Length            :  100
Significant Digits:  1
000000AB 
Testing in base:  13
Obtained digit sequence: 
Length            :  100
Significant Digits:  1
000000C6 
Testing in base:  14
Obtained digit sequence: 
Length            :  100
Significant Digits:  1
000000E3 
Testing in base:  15
Obtained digit sequence: 
Length            :  100
Significant Digits:  1
00000102 
Testing in base:  16
Obtained digit sequence: 
Length            :  100
Significant Digits:  1
00000123 
[I] String to test: " 01234 "
Must raise CryptAda_Syntax_Error in base:  4
[I] Raised CryptAda_Syntax_Error
Must be valid in remaining bases
Testing in base:  5
Obtained digit sequence: 
Length            :  100
Significant Digits:  1
000000C2 
Testing in base:  6
Obtained digit sequence: 
Length            :  100
Significant Digits:  1
00000136 
Testing in base:  7
Obtained digit sequence: 
Length            :  100
Significant Digits:  1
000001D2 
Testing in base:  8
Obtained digit sequence: 
Length            :  100
Significant Digits:  1
0000029C 
Testing in base:  9
Obtained digit sequence: 
Length            :  100
Significant Digits:  1
0000039A 
Testing in base:  10
Obtained digit sequence: 
Length            :  100
Significant Digits:  1
000004D2 
Testing in base:  11
Obtained digit sequence: 
Length            :  100
Significant Digits:  1
0000064A 
Testing in base:  12
Obtained digit sequence: 
Length            :  100
Significant Digits:  1
00000808 
Testing in base:  13
Obtained digit sequence: 
Length            :  100
Significant Digits:  1
00000A12 
Testing in base:  14
Obtained digit sequence: 
Length            :  100
Significant Digits:  1
00000C6E 
Testing in base:  15
Obtained digit sequence: 
Length            :  100
Significant Digits:  1
00000F22 
Testing in base:  16
Obtained digit sequence: 
Length            :  100
Significant Digits:  1
00001234 
[I] String to test: " 012345 "
Must raise CryptAda_Syntax_Error in base:  5
[I] Raised CryptAda_Syntax_Error
Must be valid in remaining bases
Testing in base:  6
Obtained digit sequence: 
Length            :  100
Significant Digits:  1
00000749 
Testing in base:  7
Obtained digit sequence: 
Length            :  100
Significant Digits:  1
00000CC3 
Testing in base:  8
Obtained digit sequence: 
Length            :  100
Significant Digits:  1
000014E5 
Testing in base:  9
Obtained digit sequence: 
Length            :  100
Significant Digits:  1
0000206F 
Testing in base:  10
Obtained digit sequence: 
Length            :  100
Significant Digits:  1
00003039 
Testing in base:  11
Obtained digit sequence: 
Length            :  100
Significant Digits:  1
00004533 
Testing in base:  12
Obtained digit sequence: 
Length            :  100
Significant Digits:  1
00006065 
Testing in base:  13
Obtained digit sequence: 
Length            :  100
Significant Digits:  1
000082EF 
Testing in base:  14
Obtained digit sequence: 
Length            :  100
Significant Digits:  1
0000AE09 
Testing in base:  15
Obtained digit sequence: 
Length            :  100
Significant Digits:  1
0000E303 
Testing in base:  16
Obtained digit sequence: 
Length            :  100
Significant Digits:  1
00012345 
[I] String to test: " 0123456 "
Must raise CryptAda_Syntax_Error in base:  6
[I] Raised CryptAda_Syntax_Error
Must be valid in remaining bases
Testing in base:  7
Obtained digit sequence: 
Length            :  100
Significant Digits:  1
0000595B 
Testing in base:  8
Obtained digit sequence: 
Length            :  100
Significant Digits:  1
0000A72E 
Testing in base:  9
Obtained digit sequence: 
Length            :  100
Significant Digits:  1
000123ED 
Testing in base:  10
Obtained digit sequence: 
Length            :  100
Significant Digits:  1
0001E240 
Testing in base:  11
Obtained digit sequence: 
Length            :  100
Significant Digits:  1
0002F937 
Testing in base:  12
Obtained digit sequence: 
Length            :  100
Significant Digits:  1
000484C2 
Testing in base:  13
Obtained digit sequence: 
Length            :  100
Significant Digits:  1
0006A629 
Testing in base:  14
Obtained digit sequence: 
Length            :  100
Significant Digits:  1
00098484 
Testing in base:  15
Obtained digit sequence: 
Length            :  100
Significant Digits:  1
000D4D33 
Testing in base:  16
Obtained digit sequence: 
Length            :  100
Significant Digits:  1
00123456 
[I] String to test: " 01234567 "
Must raise CryptAda_Syntax_Error in base:  7
[I] Raised CryptAda_Syntax_Error
Must be valid in remaining bases
Testing in base:  8
Obtained digit sequence: 
Length            :  100
Significant Digits:  1
00053977 
Testing in base:  9
Obtained digit sequence: 
Length            :  100
Significant Digits:  1
000A435C 
Testing in base:  10
Obtained digit sequence: 
Length            :  100
Significant Digits:  1
0012D687 
Testing in base:  11
Obtained digit sequence: 
Length            :  100
Significant Digits:  1
0020B564 
Testing in base:  12
Obtained digit sequence: 
Length            :  100
Significant Digits:  1
0036391F 
Testing in base:  13
Obtained digit sequence: 
Length            :  100
Significant Digits:  1
0056701C 
Testing in base:  14
Obtained digit sequence: 
Length            :  100
Significant Digits:  1
00853F3F 
Testing in base:  15
Obtained digit sequence: 
Length            :  100
Significant Digits:  1
00C78604 
Testing in base:  16
Obtained digit sequence: 
Length            :  100
Significant Digits:  1
01234567 
[I] String to test: " 012345678 "
Must raise CryptAda_Syntax_Error in base:  8
[I] Raised CryptAda_Syntax_Error
Must be valid in remaining bases
Testing in base:  9
Obtained digit sequence: 
Length            :  100
Significant Digits:  1
005C5E44 
Testing in base:  10
Obtained digit sequence: 
Length            :  100
Significant Digits:  1
00BC614E 
Testing in base:  11
Obtained digit sequence: 
Length            :  100
Significant Digits:  1
0167CB54 
Testing in base:  12
Obtained digit sequence: 
Length            :  100
Significant Digits:  1
028AAD7C 
Testing in base:  13
Obtained digit sequence: 
Length            :  100
Significant Digits:  1
0463B174 
Testing in base:  14
Obtained digit sequence: 
Length            :  100
Significant Digits:  1
0749757A 
Testing in base:  15
Obtained digit sequence: 
Length            :  100
Significant Digits:  1
0BB0DA44 
Testing in base:  16
Obtained digit sequence: 
Length            :  100
Significant Digits:  1
12345678 
[I] String to test: " 0123456789 "
Must raise CryptAda_Syntax_Error in base:  9
[I] Raised CryptAda_Syntax_Error
Must be valid in remaining bases
Testing in base:  10
Obtained digit sequence: 
Length            :  100
Significant Digits:  1
075BCD15 
Testing in base:  11
Obtained digit sequence: 
Length            :  100
Significant Digits:  1
0F75BCA5 
Testing in base:  12
Obtained digit sequence: 
Length            :  100
Significant Digits:  1
1E8021D9 
Testing in base:  13
Obtained digit sequence: 
Length            :  100
Significant Digits:  1
391002ED 
Testing in base:  14
Obtained digit sequence: 
Length            :  100
Significant Digits:  1
66046CB5 
Testing in base:  15
Obtained digit sequence: 
Length            :  100
Significant Digits:  1
AF5CCA05 
Testing in base:  16
Obtained digit sequence: 
Length            :  100
Significant Digits:  2
00000001 23456789 
[I] String to test: " 0123456789a "
Must raise CryptAda_Syntax_Error in base:  10
[I] Raised CryptAda_Syntax_Error
Must be valid in remaining bases
Testing in base:  11
Obtained digit sequence: 
Length            :  100
Significant Digits:  1
AA0F1B21 
Testing in base:  12
Obtained digit sequence: 
Length            :  100
Significant Digits:  2
00000001 6E019636 
Testing in base:  13
Obtained digit sequence: 
Length            :  100
Significant Digits:  2
00000002 E5D02613 
Testing in base:  14
Obtained digit sequence: 
Length            :  100
Significant Digits:  2
00000005 943DF1F0 
Testing in base:  15
Obtained digit sequence: 
Length            :  100
Significant Digits:  2
0000000A 466FD655 
Testing in base:  16
Obtained digit sequence: 
Length            :  100
Significant Digits:  2
00000012 3456789A 
[I] String to test: " 0123456789ab "
Must raise CryptAda_Syntax_Error in base:  11
[I] Raised CryptAda_Syntax_Error
Must be valid in remaining bases
Testing in base:  12
Obtained digit sequence: 
Length            :  100
Significant Digits:  2
00000011 28130A93 
Testing in base:  13
Obtained digit sequence: 
Length            :  100
Significant Digits:  2
00000025 AB91EF02 
Testing in base:  14
Obtained digit sequence: 
Length            :  100
Significant Digits:  2
0000004E 1B633B2B 
Testing in base:  15
Obtained digit sequence: 
Length            :  100
Significant Digits:  2
0000009A 208D8F06 
Testing in base:  16
Obtained digit sequence: 
Length            :  100
Significant Digits:  2
00000123 456789AB 
[I] String to test: " 0123456789abc "
Must raise CryptAda_Syntax_Error in base:  12
[I] Raised CryptAda_Syntax_Error
Must be valid in remaining bases
Testing in base:  13
Obtained digit sequence: 
Length            :  100
Significant Digits:  2
000001E9 B6692326 
Testing in base:  14
Obtained digit sequence: 
Length            :  100
Significant Digits:  2
00000445 7F6D3C66 
Testing in base:  15
Obtained digit sequence: 
Length            :  100
Significant Digits:  2
00000907 E84B6166 
Testing in base:  16
Obtained digit sequence: 
Length            :  100
Significant Digits:  2
00001234 56789ABC 
[I] String to test: " 0123456789abcd "
Must raise CryptAda_Syntax_Error in base:  13
[I] Raised CryptAda_Syntax_Error
Must be valid in remaining bases
Testing in base:  14
Obtained digit sequence: 
Length            :  100
Significant Digits:  2
00003BCC F7F94DA1 
Testing in base:  15
Obtained digit sequence: 
Length            :  100
Significant Digits:  2
00008776 9C6AB507 
Testing in base:  16
Obtained digit sequence: 
Length            :  100
Significant Digits:  2
00012345 6789ABCD 
[I] String to test: " 0123456789abcde "
Must raise CryptAda_Syntax_Error in base:  14
[I] Raised CryptAda_Syntax_Error
Must be valid in remaining bases
Testing in base:  15
Obtained digit sequence: 
Length            :  100
Significant Digits:  2
0007EFF3 2A409B77 
Testing in base:  16
Obtained digit sequence: 
Length            :  100
Significant Digits:  2
00123456 789ABCDE 
[I] String to test: " 0123456789abcdef "
Must raise CryptAda_Syntax_Error in base:  15
[I] Raised CryptAda_Syntax_Error
Must be valid in remaining bases
Testing in base:  16
Obtained digit sequence: 
Length            :  100
Significant Digits:  2
01234567 89ABCDEF 
[I] String to test: " 0123456789abcdefg "
Must raise CryptAda_Syntax_Error in base:  16
[I] Raised CryptAda_Syntax_Error
Must be valid in remaining bases
[I] Test case OK.
--------------------------------------------------------------------------------
Test Case Number: 2
Test Case Result: PASSED
Finished        : 2017/03/20 - 21:38:04
--[End Test Case]---------------------------------------------------------------

--[Begin Test Case]-------------------------------------------------------------
Test Case Number: 3
Description     : Getting Zero_Digit_Sequence string literals
Started         : 2017/03/20 - 21:38:04
--------------------------------------------------------------------------------
[I] Interfaces exercised:
- String_2_Digit_Sequence()
[I] Base:  2
    String to test: ""
Obtained DS:
Length            :  20
Significant Digits:  0
00000000
    String to test: "                                           "
Obtained DS:
Length            :  20
Significant Digits:  0
00000000
    String to test: "0"
Obtained DS:
Length            :  20
Significant Digits:  0
00000000
    String to test: "    000000000       "
Obtained DS:
Length            :  20
Significant Digits:  0
00000000
    String to test: "00000000000000      "
Obtained DS:
Length            :  20
Significant Digits:  0
00000000
[I] Base:  3
    String to test: ""
Obtained DS:
Length            :  20
Significant Digits:  0
00000000
    String to test: "                                           "
Obtained DS:
Length            :  20
Significant Digits:  0
00000000
    String to test: "0"
Obtained DS:
Length            :  20
Significant Digits:  0
00000000
    String to test: "    000000000       "
Obtained DS:
Length            :  20
Significant Digits:  0
00000000
    String to test: "00000000000000      "
Obtained DS:
Length            :  20
Significant Digits:  0
00000000
[I] Base:  4
    String to test: ""
Obtained DS:
Length            :  20
Significant Digits:  0
00000000
    String to test: "                                           "
Obtained DS:
Length            :  20
Significant Digits:  0
00000000
    String to test: "0"
Obtained DS:
Length            :  20
Significant Digits:  0
00000000
    String to test: "    000000000       "
Obtained DS:
Length            :  20
Significant Digits:  0
00000000
    String to test: "00000000000000      "
Obtained DS:
Length            :  20
Significant Digits:  0
00000000
[I] Base:  5
    String to test: ""
Obtained DS:
Length            :  20
Significant Digits:  0
00000000
    String to test: "                                           "
Obtained DS:
Length            :  20
Significant Digits:  0
00000000
    String to test: "0"
Obtained DS:
Length            :  20
Significant Digits:  0
00000000
    String to test: "    000000000       "
Obtained DS:
Length            :  20
Significant Digits:  0
00000000
    String to test: "00000000000000      "
Obtained DS:
Length            :  20
Significant Digits:  0
00000000
[I] Base:  6
    String to test: ""
Obtained DS:
Length            :  20
Significant Digits:  0
00000000
    String to test: "                                           "
Obtained DS:
Length            :  20
Significant Digits:  0
00000000
    String to test: "0"
Obtained DS:
Length            :  20
Significant Digits:  0
00000000
    String to test: "    000000000       "
Obtained DS:
Length            :  20
Significant Digits:  0
00000000
    String to test: "00000000000000      "
Obtained DS:
Length            :  20
Significant Digits:  0
00000000
[I] Base:  7
    String to test: ""
Obtained DS:
Length            :  20
Significant Digits:  0
00000000
    String to test: "                                           "
Obtained DS:
Length            :  20
Significant Digits:  0
00000000
    String to test: "0"
Obtained DS:
Length            :  20
Significant Digits:  0
00000000
    String to test: "    000000000       "
Obtained DS:
Length            :  20
Significant Digits:  0
00000000
    String to test: "00000000000000      "
Obtained DS:
Length            :  20
Significant Digits:  0
00000000
[I] Base:  8
    String to test: ""
Obtained DS:
Length            :  20
Significant Digits:  0
00000000
    String to test: "                                           "
Obtained DS:
Length            :  20
Significant Digits:  0
00000000
    String to test: "0"
Obtained DS:
Length            :  20
Significant Digits:  0
00000000
    String to test: "    000000000       "
Obtained DS:
Length            :  20
Significant Digits:  0
00000000
    String to test: "00000000000000      "
Obtained DS:
Length            :  20
Significant Digits:  0
00000000
[I] Base:  9
    String to test: ""
Obtained DS:
Length            :  20
Significant Digits:  0
00000000
    String to test: "                                           "
Obtained DS:
Length            :  20
Significant Digits:  0
00000000
    String to test: "0"
Obtained DS:
Length            :  20
Significant Digits:  0
00000000
    String to test: "    000000000       "
Obtained DS:
Length            :  20
Significant Digits:  0
00000000
    String to test: "00000000000000      "
Obtained DS:
Length            :  20
Significant Digits:  0
00000000
[I] Base:  10
    String to test: ""
Obtained DS:
Length            :  20
Significant Digits:  0
00000000
    String to test: "                                           "
Obtained DS:
Length            :  20
Significant Digits:  0
00000000
    String to test: "0"
Obtained DS:
Length            :  20
Significant Digits:  0
00000000
    String to test: "    000000000       "
Obtained DS:
Length            :  20
Significant Digits:  0
00000000
    String to test: "00000000000000      "
Obtained DS:
Length            :  20
Significant Digits:  0
00000000
[I] Base:  11
    String to test: ""
Obtained DS:
Length            :  20
Significant Digits:  0
00000000
    String to test: "                                           "
Obtained DS:
Length            :  20
Significant Digits:  0
00000000
    String to test: "0"
Obtained DS:
Length            :  20
Significant Digits:  0
00000000
    String to test: "    000000000       "
Obtained DS:
Length            :  20
Significant Digits:  0
00000000
    String to test: "00000000000000      "
Obtained DS:
Length            :  20
Significant Digits:  0
00000000
[I] Base:  12
    String to test: ""
Obtained DS:
Length            :  20
Significant Digits:  0
00000000
    String to test: "                                           "
Obtained DS:
Length            :  20
Significant Digits:  0
00000000
    String to test: "0"
Obtained DS:
Length            :  20
Significant Digits:  0
00000000
    String to test: "    000000000       "
Obtained DS:
Length            :  20
Significant Digits:  0
00000000
    String to test: "00000000000000      "
Obtained DS:
Length            :  20
Significant Digits:  0
00000000
[I] Base:  13
    String to test: ""
Obtained DS:
Length            :  20
Significant Digits:  0
00000000
    String to test: "                                           "
Obtained DS:
Length            :  20
Significant Digits:  0
00000000
    String to test: "0"
Obtained DS:
Length            :  20
Significant Digits:  0
00000000
    String to test: "    000000000       "
Obtained DS:
Length            :  20
Significant Digits:  0
00000000
    String to test: "00000000000000      "
Obtained DS:
Length            :  20
Significant Digits:  0
00000000
[I] Base:  14
    String to test: ""
Obtained DS:
Length            :  20
Significant Digits:  0
00000000
    String to test: "                                           "
Obtained DS:
Length            :  20
Significant Digits:  0
00000000
    String to test: "0"
Obtained DS:
Length            :  20
Significant Digits:  0
00000000
    String to test: "    000000000       "
Obtained DS:
Length            :  20
Significant Digits:  0
00000000
    String to test: "00000000000000      "
Obtained DS:
Length            :  20
Significant Digits:  0
00000000
[I] Base:  15
    String to test: ""
Obtained DS:
Length            :  20
Significant Digits:  0
00000000
    String to test: "                                           "
Obtained DS:
Length            :  20
Significant Digits:  0
00000000
    String to test: "0"
Obtained DS:
Length            :  20
Significant Digits:  0
00000000
    String to test: "    000000000       "
Obtained DS:
Length            :  20
Significant Digits:  0
00000000
    String to test: "00000000000000      "
Obtained DS:
Length            :  20
Significant Digits:  0
00000000
[I] Base:  16
    String to test: ""
Obtained DS:
Length            :  20
Significant Digits:  0
00000000
    String to test: "                                           "
Obtained DS:
Length            :  20
Significant Digits:  0
00000000
    String to test: "0"
Obtained DS:
Length            :  20
Significant Digits:  0
00000000
    String to test: "    000000000       "
Obtained DS:
Length            :  20
Significant Digits:  0
00000000
    String to test: "00000000000000      "
Obtained DS:
Length            :  20
Significant Digits:  0
00000000
[I] Test case OK.
--------------------------------------------------------------------------------
Test Case Number: 3
Test Case Result: PASSED
Finished        : 2017/03/20 - 21:38:04
--[End Test Case]---------------------------------------------------------------

--[Begin Test Case]-------------------------------------------------------------
Test Case Number: 4
Description     : Getting One_Digit_Sequence string literals
Started         : 2017/03/20 - 21:38:04
--------------------------------------------------------------------------------
[I] Interfaces exercised:
- String_2_Digit_Sequence()
[I] Base:  2
    String to test: "1"
Obtained DS:
Length            :  20
Significant Digits:  1
00000001 
    String to test: "                     1                      "
Obtained DS:
Length            :  20
Significant Digits:  1
00000001 
    String to test: "00000000000000000000000000000000000000000001"
Obtained DS:
Length            :  20
Significant Digits:  1
00000001 
    String to test: "    0000000001      "
Obtained DS:
Length            :  20
Significant Digits:  1
00000001 
    String to test: "000000000000001     "
Obtained DS:
Length            :  20
Significant Digits:  1
00000001 
[I] Base:  3
    String to test: "1"
Obtained DS:
Length            :  20
Significant Digits:  1
00000001 
    String to test: "                     1                      "
Obtained DS:
Length            :  20
Significant Digits:  1
00000001 
    String to test: "00000000000000000000000000000000000000000001"
Obtained DS:
Length            :  20
Significant Digits:  1
00000001 
    String to test: "    0000000001      "
Obtained DS:
Length            :  20
Significant Digits:  1
00000001 
    String to test: "000000000000001     "
Obtained DS:
Length            :  20
Significant Digits:  1
00000001 
[I] Base:  4
    String to test: "1"
Obtained DS:
Length            :  20
Significant Digits:  1
00000001 
    String to test: "                     1                      "
Obtained DS:
Length            :  20
Significant Digits:  1
00000001 
    String to test: "00000000000000000000000000000000000000000001"
Obtained DS:
Length            :  20
Significant Digits:  1
00000001 
    String to test: "    0000000001      "
Obtained DS:
Length            :  20
Significant Digits:  1
00000001 
    String to test: "000000000000001     "
Obtained DS:
Length            :  20
Significant Digits:  1
00000001 
[I] Base:  5
    String to test: "1"
Obtained DS:
Length            :  20
Significant Digits:  1
00000001 
    String to test: "                     1                      "
Obtained DS:
Length            :  20
Significant Digits:  1
00000001 
    String to test: "00000000000000000000000000000000000000000001"
Obtained DS:
Length            :  20
Significant Digits:  1
00000001 
    String to test: "    0000000001      "
Obtained DS:
Length            :  20
Significant Digits:  1
00000001 
    String to test: "000000000000001     "
Obtained DS:
Length            :  20
Significant Digits:  1
00000001 
[I] Base:  6
    String to test: "1"
Obtained DS:
Length            :  20
Significant Digits:  1
00000001 
    String to test: "                     1                      "
Obtained DS:
Length            :  20
Significant Digits:  1
00000001 
    String to test: "00000000000000000000000000000000000000000001"
Obtained DS:
Length            :  20
Significant Digits:  1
00000001 
    String to test: "    0000000001      "
Obtained DS:
Length            :  20
Significant Digits:  1
00000001 
    String to test: "000000000000001     "
Obtained DS:
Length            :  20
Significant Digits:  1
00000001 
[I] Base:  7
    String to test: "1"
Obtained DS:
Length            :  20
Significant Digits:  1
00000001 
    String to test: "                     1                      "
Obtained DS:
Length            :  20
Significant Digits:  1
00000001 
    String to test: "00000000000000000000000000000000000000000001"
Obtained DS:
Length            :  20
Significant Digits:  1
00000001 
    String to test: "    0000000001      "
Obtained DS:
Length            :  20
Significant Digits:  1
00000001 
    String to test: "000000000000001     "
Obtained DS:
Length            :  20
Significant Digits:  1
00000001 
[I] Base:  8
    String to test: "1"
Obtained DS:
Length            :  20
Significant Digits:  1
00000001 
    String to test: "                     1                      "
Obtained DS:
Length            :  20
Significant Digits:  1
00000001 
    String to test: "00000000000000000000000000000000000000000001"
Obtained DS:
Length            :  20
Significant Digits:  1
00000001 
    String to test: "    0000000001      "
Obtained DS:
Length            :  20
Significant Digits:  1
00000001 
    String to test: "000000000000001     "
Obtained DS:
Length            :  20
Significant Digits:  1
00000001 
[I] Base:  9
    String to test: "1"
Obtained DS:
Length            :  20
Significant Digits:  1
00000001 
    String to test: "                     1                      "
Obtained DS:
Length            :  20
Significant Digits:  1
00000001 
    String to test: "00000000000000000000000000000000000000000001"
Obtained DS:
Length            :  20
Significant Digits:  1
00000001 
    String to test: "    0000000001      "
Obtained DS:
Length            :  20
Significant Digits:  1
00000001 
    String to test: "000000000000001     "
Obtained DS:
Length            :  20
Significant Digits:  1
00000001 
[I] Base:  10
    String to test: "1"
Obtained DS:
Length            :  20
Significant Digits:  1
00000001 
    String to test: "                     1                      "
Obtained DS:
Length            :  20
Significant Digits:  1
00000001 
    String to test: "00000000000000000000000000000000000000000001"
Obtained DS:
Length            :  20
Significant Digits:  1
00000001 
    String to test: "    0000000001      "
Obtained DS:
Length            :  20
Significant Digits:  1
00000001 
    String to test: "000000000000001     "
Obtained DS:
Length            :  20
Significant Digits:  1
00000001 
[I] Base:  11
    String to test: "1"
Obtained DS:
Length            :  20
Significant Digits:  1
00000001 
    String to test: "                     1                      "
Obtained DS:
Length            :  20
Significant Digits:  1
00000001 
    String to test: "00000000000000000000000000000000000000000001"
Obtained DS:
Length            :  20
Significant Digits:  1
00000001 
    String to test: "    0000000001      "
Obtained DS:
Length            :  20
Significant Digits:  1
00000001 
    String to test: "000000000000001     "
Obtained DS:
Length            :  20
Significant Digits:  1
00000001 
[I] Base:  12
    String to test: "1"
Obtained DS:
Length            :  20
Significant Digits:  1
00000001 
    String to test: "                     1                      "
Obtained DS:
Length            :  20
Significant Digits:  1
00000001 
    String to test: "00000000000000000000000000000000000000000001"
Obtained DS:
Length            :  20
Significant Digits:  1
00000001 
    String to test: "    0000000001      "
Obtained DS:
Length            :  20
Significant Digits:  1
00000001 
    String to test: "000000000000001     "
Obtained DS:
Length            :  20
Significant Digits:  1
00000001 
[I] Base:  13
    String to test: "1"
Obtained DS:
Length            :  20
Significant Digits:  1
00000001 
    String to test: "                     1                      "
Obtained DS:
Length            :  20
Significant Digits:  1
00000001 
    String to test: "00000000000000000000000000000000000000000001"
Obtained DS:
Length            :  20
Significant Digits:  1
00000001 
    String to test: "    0000000001      "
Obtained DS:
Length            :  20
Significant Digits:  1
00000001 
    String to test: "000000000000001     "
Obtained DS:
Length            :  20
Significant Digits:  1
00000001 
[I] Base:  14
    String to test: "1"
Obtained DS:
Length            :  20
Significant Digits:  1
00000001 
    String to test: "                     1                      "
Obtained DS:
Length            :  20
Significant Digits:  1
00000001 
    String to test: "00000000000000000000000000000000000000000001"
Obtained DS:
Length            :  20
Significant Digits:  1
00000001 
    String to test: "    0000000001      "
Obtained DS:
Length            :  20
Significant Digits:  1
00000001 
    String to test: "000000000000001     "
Obtained DS:
Length            :  20
Significant Digits:  1
00000001 
[I] Base:  15
    String to test: "1"
Obtained DS:
Length            :  20
Significant Digits:  1
00000001 
    String to test: "                     1                      "
Obtained DS:
Length            :  20
Significant Digits:  1
00000001 
    String to test: "00000000000000000000000000000000000000000001"
Obtained DS:
Length            :  20
Significant Digits:  1
00000001 
    String to test: "    0000000001      "
Obtained DS:
Length            :  20
Significant Digits:  1
00000001 
    String to test: "000000000000001     "
Obtained DS:
Length            :  20
Significant Digits:  1
00000001 
[I] Base:  16
    String to test: "1"
Obtained DS:
Length            :  20
Significant Digits:  1
00000001 
    String to test: "                     1                      "
Obtained DS:
Length            :  20
Significant Digits:  1
00000001 
    String to test: "00000000000000000000000000000000000000000001"
Obtained DS:
Length            :  20
Significant Digits:  1
00000001 
    String to test: "    0000000001      "
Obtained DS:
Length            :  20
Significant Digits:  1
00000001 
    String to test: "000000000000001     "
Obtained DS:
Length            :  20
Significant Digits:  1
00000001 
[I] Test case OK.
--------------------------------------------------------------------------------
Test Case Number: 4
Test Case Result: PASSED
Finished        : 2017/03/20 - 21:38:04
--[End Test Case]---------------------------------------------------------------

--[Begin Test Case]-------------------------------------------------------------
Test Case Number: 5
Description     : Converting test string literals in all bases
Started         : 2017/03/20 - 21:38:04
--------------------------------------------------------------------------------
[I] Interfaces exercised:
- String_2_Digit_Sequence()
[I] String literal : "100100011010001010110011110001001101010111100110111101111"
    Base           :  2
    Expected result:
Length            :  2
Significant Digits:  2
01234567 89ABCDEF 
    Obtained result:
Length            :  20
Significant Digits:  2
01234567 89ABCDEF 
[I] Values match
[I] String literal : "112202012100200001022001212111102020"
    Base           :  3
    Expected result:
Length            :  2
Significant Digits:  2
01234567 89ABCDEF 
    Obtained result:
Length            :  20
Significant Digits:  2
01234567 89ABCDEF 
[I] Values match
[I] String literal : "10203101112132021222330313233"
    Base           :  4
    Expected result:
Length            :  2
Significant Digits:  2
01234567 89ABCDEF 
    Obtained result:
Length            :  20
Significant Digits:  2
01234567 89ABCDEF 
[I] Values match
[I] String literal : "1141432001402313410040040"
    Base           :  5
    Expected result:
Length            :  2
Significant Digits:  2
01234567 89ABCDEF 
    Obtained result:
Length            :  20
Significant Digits:  2
01234567 89ABCDEF 
[I] Values match
[I] String literal : "3423132400100351001223"
    Base           :  6
    Expected result:
Length            :  2
Significant Digits:  2
01234567 89ABCDEF 
    Obtained result:
Length            :  20
Significant Digits:  2
01234567 89ABCDEF 
[I] Values match
[I] String literal : "101226656005511246646"
    Base           :  7
    Expected result:
Length            :  2
Significant Digits:  2
01234567 89ABCDEF 
    Obtained result:
Length            :  20
Significant Digits:  2
01234567 89ABCDEF 
[I] Values match
[I] String literal : "4432126361152746757"
    Base           :  8
    Expected result:
Length            :  2
Significant Digits:  2
01234567 89ABCDEF 
    Obtained result:
Length            :  20
Significant Digits:  2
01234567 89ABCDEF 
[I] Values match
[I] String literal : "482170601261774366"
    Base           :  9
    Expected result:
Length            :  2
Significant Digits:  2
01234567 89ABCDEF 
    Obtained result:
Length            :  20
Significant Digits:  2
01234567 89ABCDEF 
[I] Values match
[I] String literal : "81985529216486895"
    Base           :  10
    Expected result:
Length            :  2
Significant Digits:  2
01234567 89ABCDEF 
    Obtained result:
Length            :  20
Significant Digits:  2
01234567 89ABCDEF 
[I] Values match
[I] String literal : "1869913075540737A"
    Base           :  11
    Expected result:
Length            :  2
Significant Digits:  2
01234567 89ABCDEF 
    Obtained result:
Length            :  20
Significant Digits:  2
01234567 89ABCDEF 
[I] Values match
[I] String literal : "53A32809A3809213"
    Base           :  12
    Expected result:
Length            :  2
Significant Digits:  2
01234567 89ABCDEF 
    Obtained result:
Length            :  20
Significant Digits:  2
01234567 89ABCDEF 
[I] Values match
[I] String literal : "17A8C9B3017B847C"
    Base           :  13
    Expected result:
Length            :  2
Significant Digits:  2
01234567 89ABCDEF 
    Obtained result:
Length            :  20
Significant Digits:  2
01234567 89ABCDEF 
[I] Values match
[I] String literal : "754172B025DC35D"
    Base           :  14
    Expected result:
Length            :  2
Significant Digits:  2
01234567 89ABCDEF 
    Obtained result:
Length            :  20
Significant Digits:  2
01234567 89ABCDEF 
[I] Values match
[I] String literal : "2C1D56B648C6CD0"
    Base           :  15
    Expected result:
Length            :  2
Significant Digits:  2
01234567 89ABCDEF 
    Obtained result:
Length            :  20
Significant Digits:  2
01234567 89ABCDEF 
[I] Values match
[I] String literal : "123456789ABCDEF"
    Base           :  16
    Expected result:
Length            :  2
Significant Digits:  2
01234567 89ABCDEF 
    Obtained result:
Length            :  20
Significant Digits:  2
01234567 89ABCDEF 
[I] Values match
[I] Test case OK.
--------------------------------------------------------------------------------
Test Case Number: 5
Test Case Result: PASSED
Finished        : 2017/03/20 - 21:38:04
--[End Test Case]---------------------------------------------------------------

--[Begin Test Case]-------------------------------------------------------------
Test Case Number: 6
Description     : Converting digit sequences to string literals in all bases
Started         : 2017/03/20 - 21:38:04
--------------------------------------------------------------------------------
[I] Interfaces exercised:
- Digit_Sequence_2_String()
[I] Digit sequence to convert: 
Length            :  2
Significant Digits:  2
01234567 89ABCDEF 
[I] Base:  2
    Expected result: "100100011010001010110011110001001101010111100110111101111"
    Obtained result: "100100011010001010110011110001001101010111100110111101111"
[I] Values match
[I] Digit sequence to convert: 
Length            :  2
Significant Digits:  2
01234567 89ABCDEF 
[I] Base:  3
    Expected result: "112202012100200001022001212111102020"
    Obtained result: "112202012100200001022001212111102020"
[I] Values match
[I] Digit sequence to convert: 
Length            :  2
Significant Digits:  2
01234567 89ABCDEF 
[I] Base:  4
    Expected result: "10203101112132021222330313233"
    Obtained result: "10203101112132021222330313233"
[I] Values match
[I] Digit sequence to convert: 
Length            :  2
Significant Digits:  2
01234567 89ABCDEF 
[I] Base:  5
    Expected result: "1141432001402313410040040"
    Obtained result: "1141432001402313410040040"
[I] Values match
[I] Digit sequence to convert: 
Length            :  2
Significant Digits:  2
01234567 89ABCDEF 
[I] Base:  6
    Expected result: "3423132400100351001223"
    Obtained result: "3423132400100351001223"
[I] Values match
[I] Digit sequence to convert: 
Length            :  2
Significant Digits:  2
01234567 89ABCDEF 
[I] Base:  7
    Expected result: "101226656005511246646"
    Obtained result: "101226656005511246646"
[I] Values match
[I] Digit sequence to convert: 
Length            :  2
Significant Digits:  2
01234567 89ABCDEF 
[I] Base:  8
    Expected result: "4432126361152746757"
    Obtained result: "4432126361152746757"
[I] Values match
[I] Digit sequence to convert: 
Length            :  2
Significant Digits:  2
01234567 89ABCDEF 
[I] Base:  9
    Expected result: "482170601261774366"
    Obtained result: "482170601261774366"
[I] Values match
[I] Digit sequence to convert: 
Length            :  2
Significant Digits:  2
01234567 89ABCDEF 
[I] Base:  10
    Expected result: "81985529216486895"
    Obtained result: "81985529216486895"
[I] Values match
[I] Digit sequence to convert: 
Length            :  2
Significant Digits:  2
01234567 89ABCDEF 
[I] Base:  11
    Expected result: "1869913075540737A"
    Obtained result: "1869913075540737A"
[I] Values match
[I] Digit sequence to convert: 
Length            :  2
Significant Digits:  2
01234567 89ABCDEF 
[I] Base:  12
    Expected result: "53A32809A3809213"
    Obtained result: "53A32809A3809213"
[I] Values match
[I] Digit sequence to convert: 
Length            :  2
Significant Digits:  2
01234567 89ABCDEF 
[I] Base:  13
    Expected result: "17A8C9B3017B847C"
    Obtained result: "17A8C9B3017B847C"
[I] Values match
[I] Digit sequence to convert: 
Length            :  2
Significant Digits:  2
01234567 89ABCDEF 
[I] Base:  14
    Expected result: "754172B025DC35D"
    Obtained result: "754172B025DC35D"
[I] Values match
[I] Digit sequence to convert: 
Length            :  2
Significant Digits:  2
01234567 89ABCDEF 
[I] Base:  15
    Expected result: "2C1D56B648C6CD0"
    Obtained result: "2C1D56B648C6CD0"
[I] Values match
[I] Digit sequence to convert: 
Length            :  2
Significant Digits:  2
01234567 89ABCDEF 
[I] Base:  16
    Expected result: "123456789ABCDEF"
    Obtained result: "123456789ABCDEF"
[I] Values match
[I] Test case OK.
--------------------------------------------------------------------------------
Test Case Number: 6
Test Case Result: PASSED
Finished        : 2017/03/20 - 21:38:04
--[End Test Case]---------------------------------------------------------------

--[Begin Test Case]-------------------------------------------------------------
Test Case Number: 7
Description     : Converting random digit sequence to literal strings
Started         : 2017/03/20 - 21:38:04
--------------------------------------------------------------------------------
[I] Interfaces exercised:
- Digit_Sequence_2_String()
- String_2_Digit_Sequence()
[I] This test case will obtain a random Digit_Sequence, convert it to string
    reconvert back to Digit_Sequence and check that both Digit_Sequences are equal.
    The case will be executed  1000 times for all supported bases.
[I] Performing  1000 iterations for base:  2
Finished test for base:  2
[I] Performing  1000 iterations for base:  3
Finished test for base:  3
[I] Performing  1000 iterations for base:  4
Finished test for base:  4
[I] Performing  1000 iterations for base:  5
Finished test for base:  5
[I] Performing  1000 iterations for base:  6
Finished test for base:  6
[I] Performing  1000 iterations for base:  7
Finished test for base:  7
[I] Performing  1000 iterations for base:  8
Finished test for base:  8
[I] Performing  1000 iterations for base:  9
Finished test for base:  9
[I] Performing  1000 iterations for base:  10
Finished test for base:  10
[I] Performing  1000 iterations for base:  11
Finished test for base:  11
[I] Performing  1000 iterations for base:  12
Finished test for base:  12
[I] Performing  1000 iterations for base:  13
Finished test for base:  13
[I] Performing  1000 iterations for base:  14
Finished test for base:  14
[I] Performing  1000 iterations for base:  15
Finished test for base:  15
[I] Performing  1000 iterations for base:  16
Finished test for base:  16
[I] Test case OK.
--------------------------------------------------------------------------------
Test Case Number: 7
Test Case Result: PASSED
Finished        : 2017/03/20 - 21:38:05
--[End Test Case]---------------------------------------------------------------

================================================================================
CryptAda Test Driver End
CryptAda Test Driver Name: CryptAda.Big_Naturals.Tests.Conv
Finished                 : 2017/03/20 - 21:38:05
================================================================================
