================================================================================
TCantos Ada Cryptography Library (CryptAda)
Version: 0.1.a (2017/03/31)
Copyright (c) 2017, Antonio Duran
================================================================================
CryptAda Test Driver Begin
CryptAda Test Driver Name: CryptAda.Big_Naturals.Tests.Add
Description              : Unit test driver for CryptAda.Big_Naturals addition functionality.
Started                  : 2017/03/21 - 07:34:55
================================================================================
[I] This test driver will validate Digit_Sequences addition
Next elements will be tested:
    - Add()
    - Add_Digit()

--[Begin Test Case]-------------------------------------------------------------
Test Case Number: 1
Description     : Overflow conditions in addition
Started         : 2017/03/21 - 07:34:55
--------------------------------------------------------------------------------
[I] Subprograms tested:
- Add()
[I] Using a Digit_Sequence for the sum result not long enough.
Shall raise CryptAda_Overflow_Error
[I] Raised CryptAda_Overflow_Error
[I] Test case OK.
--------------------------------------------------------------------------------
Test Case Number: 1
Test Case Result: PASSED
Finished        : 2017/03/21 - 07:34:55
--[End Test Case]---------------------------------------------------------------

--[Begin Test Case]-------------------------------------------------------------
Test Case Number: 2
Description     : Basic addition operations
Started         : 2017/03/21 - 07:34:55
--------------------------------------------------------------------------------
[I] Subprograms tested:
- Add()
[I] Adding One to Zero
Left: 
Length            :  1
Significant Digits:  1
00000001 
Right: 
Length            :  1
Significant Digits:  0
00000000
Expected Result: 
Length            :  1
Significant Digits:  1
00000001 
Obtained Result: 
Length            :  20
Significant Digits:  1
00000001 
Values match
[I] Adding Zero to One
Left: 
Length            :  1
Significant Digits:  0
00000000
Right: 
Length            :  1
Significant Digits:  1
00000001 
Expected Result: 
Length            :  1
Significant Digits:  1
00000001 
Obtained Result: 
Length            :  20
Significant Digits:  1
00000001 
Values match
[I] Testing addition carry
Left: 
Length            :  20
Significant Digits:  4
FFFFFFFF FFFFFFFF FFFFFFFF FFFFFFFF 
Right: 
Length            :  1
Significant Digits:  1
00000001 
Expected Result: 
Length            :  20
Significant Digits:  5
00000001 00000000 00000000 00000000 00000000 
Obtained Result: 
Length            :  20
Significant Digits:  5
00000001 00000000 00000000 00000000 00000000 
Values match
[I] Test case OK.
--------------------------------------------------------------------------------
Test Case Number: 2
Test Case Result: PASSED
Finished        : 2017/03/21 - 07:34:55
--[End Test Case]---------------------------------------------------------------

--[Begin Test Case]-------------------------------------------------------------
Test Case Number: 3
Description     : Testing additive identity
Started         : 2017/03/21 - 07:34:55
--------------------------------------------------------------------------------
[I] Subprogams tested:
- Add()
Performing  100000 iterations, adding Zero_Digit_Sequence to random digit sequences
[I] Test case OK.
--------------------------------------------------------------------------------
Test Case Number: 3
Test Case Result: PASSED
Finished        : 2017/03/21 - 07:34:55
--[End Test Case]---------------------------------------------------------------

--[Begin Test Case]-------------------------------------------------------------
Test Case Number: 4
Description     : Testing addition conmutative property
Started         : 2017/03/21 - 07:34:55
--------------------------------------------------------------------------------
[I] Subprogams tested:
- Add()
Performing  100000 iterations with random Digit_Sequences
[I] Test case OK.
--------------------------------------------------------------------------------
Test Case Number: 4
Test Case Result: PASSED
Finished        : 2017/03/21 - 07:34:55
--[End Test Case]---------------------------------------------------------------

--[Begin Test Case]-------------------------------------------------------------
Test Case Number: 5
Description     : Testing addition associative property
Started         : 2017/03/21 - 07:34:55
--------------------------------------------------------------------------------
[I] Subprogams tested:
- Add()
Performing  100000 iterations with random Digit_Sequences
[I] Test case OK.
--------------------------------------------------------------------------------
Test Case Number: 5
Test Case Result: PASSED
Finished        : 2017/03/21 - 07:34:55
--[End Test Case]---------------------------------------------------------------

--[Begin Test Case]-------------------------------------------------------------
Test Case Number: 6
Description     : Overflow conditions in Add_Digit
Started         : 2017/03/21 - 07:34:55
--------------------------------------------------------------------------------
[I] Subprograms tested:
- Add_Digit()
[I] Using a Digit_Sequence for the sum result not long enough.
Shall raise CryptAda_Overflow_Error
[I] Raised CryptAda_Overflow_Error
[I] Test case OK.
--------------------------------------------------------------------------------
Test Case Number: 6
Test Case Result: PASSED
Finished        : 2017/03/21 - 07:34:55
--[End Test Case]---------------------------------------------------------------

--[Begin Test Case]-------------------------------------------------------------
Test Case Number: 7
Description     : Basic Add_Digit operations
Started         : 2017/03/21 - 07:34:55
--------------------------------------------------------------------------------
[I] Subprograms tested:
- Add_Digit()
[I] Adding One_Digit_Sequence to 0
Left: 
Length            :  1
Significant Digits:  1
00000001 
Right:  0
Expected Result: 
Length            :  1
Significant Digits:  1
00000001 
Obtained Result: 
Length            :  20
Significant Digits:  1
00000001 
Values match
[I] Adding Zero_Digit_Sequence to 1
Left: 
Length            :  1
Significant Digits:  0
00000000
Right:  1
Expected Result: 
Length            :  1
Significant Digits:  1
00000001 
Obtained Result: 
Length            :  20
Significant Digits:  1
00000001 
Values match
[I] Testing addition carry
Left: 
Length            :  20
Significant Digits:  4
FFFFFFFF FFFFFFFF FFFFFFFF FFFFFFFF 
Right:  1
Expected Result: 
Length            :  20
Significant Digits:  5
00000001 00000000 00000000 00000000 00000000 
Obtained Result: 
Length            :  20
Significant Digits:  5
00000001 00000000 00000000 00000000 00000000 
Values match
[I] Testing addition neutral element
Performing  100000 iterations, adding 0 to random digit sequences
[I] Test case OK.
--------------------------------------------------------------------------------
Test Case Number: 7
Test Case Result: PASSED
Finished        : 2017/03/21 - 07:34:55
--[End Test Case]---------------------------------------------------------------

--[Begin Test Case]-------------------------------------------------------------
Test Case Number: 8
Description     : Bulk Add_Digit operations
Started         : 2017/03/21 - 07:34:55
--------------------------------------------------------------------------------
[I] Subprograms tested:
- Add_Digit()
- Add()
[I] Testing Add_Digit checking results with Add using random digit sequences and digits
Performing  100000 iterations.
[I] Test case OK.
--------------------------------------------------------------------------------
Test Case Number: 8
Test Case Result: PASSED
Finished        : 2017/03/21 - 07:34:55
--[End Test Case]---------------------------------------------------------------

================================================================================
CryptAda Test Driver End
CryptAda Test Driver Name: CryptAda.Big_Naturals.Tests.Add
Finished                 : 2017/03/21 - 07:34:55
================================================================================
