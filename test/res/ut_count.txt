================================================================================
TCantos Ada Cryptography Library (CryptAda)
Version: 0.1.b (2017/03/31)
Copyright (c) 2017, Antonio Duran
================================================================================
CryptAda Test Driver Begin
CryptAda Test Driver Name: CryptAda.Tests.Unit.Counters
Description              : Unit test driver for CryptAda.Pragmatics.Counters functionality.
Started                  : 2017/04/03 - 20:44:24
================================================================================

--[Begin Test Case]-------------------------------------------------------------
Test Case Number: 1
Description     : Setting counters
Started         : 2017/04/03 - 20:44:24
--------------------------------------------------------------------------------
[I] Interfaces tested:
- Set_Counter
- Low_Eight_Bytes
- High_Eight_Bytes
[I] Setting counters from Natural values.
Performing  100000 iterations
[I] Setting counters from Eight_Byte values.
Performing  100000 iterations
[I] Test case OK.
--------------------------------------------------------------------------------
Test Case Number: 1
Test Case Result: PASSED
Finished        : 2017/04/03 - 20:44:24
--[End Test Case]---------------------------------------------------------------

--[Begin Test Case]-------------------------------------------------------------
Test Case Number: 2
Description     : Setting counters (2)
Started         : 2017/04/03 - 20:44:24
--------------------------------------------------------------------------------
[I] Interfaces tested:
- To_Counter
- Low_Eight_Bytes
- High_Eight_Bytes
[I] Setting counters from Natural values.
Performing  100000 iterations
[I] Setting counters from Eight_Byte values.
Performing  100000 iterations
[I] Test case OK.
--------------------------------------------------------------------------------
Test Case Number: 2
Test Case Result: PASSED
Finished        : 2017/04/03 - 20:44:24
--[End Test Case]---------------------------------------------------------------

--[Begin Test Case]-------------------------------------------------------------
Test Case Number: 3
Description     : Incrementing counters
Started         : 2017/04/03 - 20:44:24
--------------------------------------------------------------------------------
[I] Interfaces tested:
- Increment
- Low_Eight_Bytes
- High_Eight_Bytes
[I] Incrementing counters
[I] Counter before incrementing:
Low : 16#FFFFFFFFFFFFFFFA#
High: 16#0000000000000001#
[I] Incrementing in 1
[I] Counter after incrementing:
Low : 16#FFFFFFFFFFFFFFFB#
High: 16#0000000000000001#
[I] Counter before incrementing:
Low : 16#FFFFFFFFFFFFFFFB#
High: 16#0000000000000001#
[I] Incrementing in 1
[I] Counter after incrementing:
Low : 16#FFFFFFFFFFFFFFFC#
High: 16#0000000000000001#
[I] Counter before incrementing:
Low : 16#FFFFFFFFFFFFFFFC#
High: 16#0000000000000001#
[I] Incrementing in 1
[I] Counter after incrementing:
Low : 16#FFFFFFFFFFFFFFFD#
High: 16#0000000000000001#
[I] Counter before incrementing:
Low : 16#FFFFFFFFFFFFFFFD#
High: 16#0000000000000001#
[I] Incrementing in 1
[I] Counter after incrementing:
Low : 16#FFFFFFFFFFFFFFFE#
High: 16#0000000000000001#
[I] Counter before incrementing:
Low : 16#FFFFFFFFFFFFFFFE#
High: 16#0000000000000001#
[I] Incrementing in 1
[I] Counter after incrementing:
Low : 16#FFFFFFFFFFFFFFFF#
High: 16#0000000000000001#
[I] Counter before incrementing:
Low : 16#FFFFFFFFFFFFFFFF#
High: 16#0000000000000001#
[I] Incrementing in 1
[I] Counter after incrementing:
Low : 16#0000000000000000#
High: 16#0000000000000002#
[I] Counter before incrementing:
Low : 16#0000000000000000#
High: 16#0000000000000002#
[I] Incrementing in 1
[I] Counter after incrementing:
Low : 16#0000000000000001#
High: 16#0000000000000002#
[I] Counter before incrementing:
Low : 16#0000000000000001#
High: 16#0000000000000002#
[I] Incrementing in 1
[I] Counter after incrementing:
Low : 16#0000000000000002#
High: 16#0000000000000002#
[I] Counter before incrementing:
Low : 16#0000000000000002#
High: 16#0000000000000002#
[I] Incrementing in 1
[I] Counter after incrementing:
Low : 16#0000000000000003#
High: 16#0000000000000002#
[I] Counter before incrementing:
Low : 16#0000000000000003#
High: 16#0000000000000002#
[I] Incrementing in 1
[I] Counter after incrementing:
Low : 16#0000000000000004#
High: 16#0000000000000002#
[I] Test case OK.
--------------------------------------------------------------------------------
Test Case Number: 3
Test Case Result: PASSED
Finished        : 2017/04/03 - 20:44:24
--[End Test Case]---------------------------------------------------------------

--[Begin Test Case]-------------------------------------------------------------
Test Case Number: 4
Description     : Decrementing counters
Started         : 2017/04/03 - 20:44:24
--------------------------------------------------------------------------------
[I] Interfaces tested:
- Decrement
- Low_Eight_Bytes
- High_Eight_Bytes
[I] Decrementing counters
[I] Counter before decrementing:
Low : 16#0000000000000005#
High: 16#0000000000000001#
[I] Decrementing in 1
[I] Counter after decrementing:
Low : 16#0000000000000004#
High: 16#0000000000000001#
[I] Counter before decrementing:
Low : 16#0000000000000004#
High: 16#0000000000000001#
[I] Decrementing in 1
[I] Counter after decrementing:
Low : 16#0000000000000003#
High: 16#0000000000000001#
[I] Counter before decrementing:
Low : 16#0000000000000003#
High: 16#0000000000000001#
[I] Decrementing in 1
[I] Counter after decrementing:
Low : 16#0000000000000002#
High: 16#0000000000000001#
[I] Counter before decrementing:
Low : 16#0000000000000002#
High: 16#0000000000000001#
[I] Decrementing in 1
[I] Counter after decrementing:
Low : 16#0000000000000001#
High: 16#0000000000000001#
[I] Counter before decrementing:
Low : 16#0000000000000001#
High: 16#0000000000000001#
[I] Decrementing in 1
[I] Counter after decrementing:
Low : 16#0000000000000000#
High: 16#0000000000000001#
[I] Counter before decrementing:
Low : 16#0000000000000000#
High: 16#0000000000000001#
[I] Decrementing in 1
[I] Counter after decrementing:
Low : 16#FFFFFFFFFFFFFFFF#
High: 16#0000000000000000#
[I] Counter before decrementing:
Low : 16#FFFFFFFFFFFFFFFF#
High: 16#0000000000000000#
[I] Decrementing in 1
[I] Counter after decrementing:
Low : 16#FFFFFFFFFFFFFFFE#
High: 16#0000000000000000#
[I] Counter before decrementing:
Low : 16#FFFFFFFFFFFFFFFE#
High: 16#0000000000000000#
[I] Decrementing in 1
[I] Counter after decrementing:
Low : 16#FFFFFFFFFFFFFFFD#
High: 16#0000000000000000#
[I] Counter before decrementing:
Low : 16#FFFFFFFFFFFFFFFD#
High: 16#0000000000000000#
[I] Decrementing in 1
[I] Counter after decrementing:
Low : 16#FFFFFFFFFFFFFFFC#
High: 16#0000000000000000#
[I] Counter before decrementing:
Low : 16#FFFFFFFFFFFFFFFC#
High: 16#0000000000000000#
[I] Decrementing in 1
[I] Counter after decrementing:
Low : 16#FFFFFFFFFFFFFFFB#
High: 16#0000000000000000#
[I] Testing Constraint_Error condition
[I] Setting counter to 100
[I] Counter before decrementing:
Low : 16#0000000000000064#
High: 16#0000000000000000#
[I] Decrementing in 150
[I] Constraint_Error raised
Exception: "CONSTRAINT_ERROR"
Message  : "cryptada-digests-counters.adb:112 explicit raise"
[I] Test case OK.
--------------------------------------------------------------------------------
Test Case Number: 4
Test Case Result: PASSED
Finished        : 2017/04/03 - 20:44:24
--[End Test Case]---------------------------------------------------------------

--[Begin Test Case]-------------------------------------------------------------
Test Case Number: 5
Description     : Packing bytes
Started         : 2017/04/03 - 20:44:24
--------------------------------------------------------------------------------
[I] Interfaces tested:
- Pack
- =
[I] Packing a Byte_Array Little_Endian (function)
Array to pack: 
16#00#, 16#01#, 16#02#, 16#03#, 16#04#, 16#05#, 16#06#, 16#07#, 16#08#, 16#09#, 16#0A#, 16#0B#, 16#0C#, 16#0D#, 16#0E#, 16#0F#
Expected low : 16#0706050403020100#
Expected high: 16#0F0E0D0C0B0A0908#
Obtained low : 16#0706050403020100#
Obtained high: 16#0F0E0D0C0B0A0908#
[I] Results match
[I] Packing a Byte_Array Little_Endian (procedure)
Array to pack: 
16#00#, 16#01#, 16#02#, 16#03#, 16#04#, 16#05#, 16#06#, 16#07#, 16#08#, 16#09#, 16#0A#, 16#0B#, 16#0C#, 16#0D#, 16#0E#, 16#0F#
Expected low : 16#0706050403020100#
Expected high: 16#0F0E0D0C0B0A0908#
Obtained low : 16#0706050403020100#
Obtained high: 16#0F0E0D0C0B0A0908#
[I] Results match
[I] Packing a Byte_Array Big_Endian (function)
Array to pack: 
16#0F#, 16#0E#, 16#0D#, 16#0C#, 16#0B#, 16#0A#, 16#09#, 16#08#, 16#07#, 16#06#, 16#05#, 16#04#, 16#03#, 16#02#, 16#01#, 16#00#
Expected low : 16#0706050403020100#
Expected high: 16#0F0E0D0C0B0A0908#
Obtained low : 16#0706050403020100#
Obtained high: 16#0F0E0D0C0B0A0908#
[I] Results match
[I] Packing a Byte_Array Big_Endian (procedure)
Array to pack: 
16#0F#, 16#0E#, 16#0D#, 16#0C#, 16#0B#, 16#0A#, 16#09#, 16#08#, 16#07#, 16#06#, 16#05#, 16#04#, 16#03#, 16#02#, 16#01#, 16#00#
Expected low : 16#0706050403020100#
Expected high: 16#0F0E0D0C0B0A0908#
Obtained low : 16#0706050403020100#
Obtained high: 16#0F0E0D0C0B0A0908#
[I] Results match
[I] Test case OK.
--------------------------------------------------------------------------------
Test Case Number: 5
Test Case Result: PASSED
Finished        : 2017/04/03 - 20:44:24
--[End Test Case]---------------------------------------------------------------

--[Begin Test Case]-------------------------------------------------------------
Test Case Number: 6
Description     : Unpacking counters
Started         : 2017/04/03 - 20:44:24
--------------------------------------------------------------------------------
[I] Interfaces tested:
- Unpack
[I] Unpacking a Counter Little_Endian (function)
Counter to unpack: 
Low : 16#0706050403020100#
High: 16#0F0E0D0C0B0A0908#
Expected array: 
16#00#, 16#01#, 16#02#, 16#03#, 16#04#, 16#05#, 16#06#, 16#07#, 16#08#, 16#09#, 16#0A#, 16#0B#, 16#0C#, 16#0D#, 16#0E#, 16#0F#
Obtained array: 
16#00#, 16#01#, 16#02#, 16#03#, 16#04#, 16#05#, 16#06#, 16#07#, 16#08#, 16#09#, 16#0A#, 16#0B#, 16#0C#, 16#0D#, 16#0E#, 16#0F#
[I] Results match
[I] Unpacking a Counter Little_Endian (procedure)
Counter to unpack: 
Low : 16#0706050403020100#
High: 16#0F0E0D0C0B0A0908#
Expected array: 
16#00#, 16#01#, 16#02#, 16#03#, 16#04#, 16#05#, 16#06#, 16#07#, 16#08#, 16#09#, 16#0A#, 16#0B#, 16#0C#, 16#0D#, 16#0E#, 16#0F#
Obtained array: 
16#00#, 16#01#, 16#02#, 16#03#, 16#04#, 16#05#, 16#06#, 16#07#, 16#08#, 16#09#, 16#0A#, 16#0B#, 16#0C#, 16#0D#, 16#0E#, 16#0F#
[I] Results match
[I] Unpacking a Counter Big_Endian (function)
Counter to unpack: 
Low : 16#0706050403020100#
High: 16#0F0E0D0C0B0A0908#
Expected array: 
16#0F#, 16#0E#, 16#0D#, 16#0C#, 16#0B#, 16#0A#, 16#09#, 16#08#, 16#07#, 16#06#, 16#05#, 16#04#, 16#03#, 16#02#, 16#01#, 16#00#
Obtained array: 
16#0F#, 16#0E#, 16#0D#, 16#0C#, 16#0B#, 16#0A#, 16#09#, 16#08#, 16#07#, 16#06#, 16#05#, 16#04#, 16#03#, 16#02#, 16#01#, 16#00#
[I] Results match
[I] Unpacking a Counter Big_Endian (procedure)
Counter to unpack: 
Low : 16#0706050403020100#
High: 16#0F0E0D0C0B0A0908#
Expected array: 
16#0F#, 16#0E#, 16#0D#, 16#0C#, 16#0B#, 16#0A#, 16#09#, 16#08#, 16#07#, 16#06#, 16#05#, 16#04#, 16#03#, 16#02#, 16#01#, 16#00#
Obtained array: 
16#0F#, 16#0E#, 16#0D#, 16#0C#, 16#0B#, 16#0A#, 16#09#, 16#08#, 16#07#, 16#06#, 16#05#, 16#04#, 16#03#, 16#02#, 16#01#, 16#00#
[I] Results match
[I] Test case OK.
--------------------------------------------------------------------------------
Test Case Number: 6
Test Case Result: PASSED
Finished        : 2017/04/03 - 20:44:24
--[End Test Case]---------------------------------------------------------------

================================================================================
CryptAda Test Driver End
CryptAda Test Driver Name: CryptAda.Tests.Unit.Counters
Finished                 : 2017/04/03 - 20:44:24
================================================================================
