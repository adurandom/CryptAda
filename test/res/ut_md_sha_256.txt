================================================================================
TCantos Ada Cryptography Library (CryptAda)
Version: 0.1.d (2017/04/30)
Copyright (c) 2017, Antonio Duran
================================================================================
CryptAda Test Driver Begin
CryptAda Test Driver Name: CryptAda.Tests.Unit.MD_SHA_256
Description              : Unit test driver for CryptAda.Digests.Message_Digests.SHA_256 functionality.
Started                  : 2017/05/22 - 18:33:01
================================================================================

--[Begin Test Case]-------------------------------------------------------------
Test Case Number: 1
Description     : Getting a handle for message digest objects
Started         : 2017/05/22 - 18:33:01
--------------------------------------------------------------------------------
[I] Subprograms tested: 
    - Get_Message_Digest_Handle
    - Is_Valid_Handle
    - Invalidate_Handle
    - Get_Message_Digest_Ptr
[I] Before Get_Message_Digest_Handle the handle is invalid:
[I] Handle is invalid
[I] Getting a pointer from an invalid handle will return null
[I] Pointer is null
[I] Trying any operation with a null pointer will raise Constraint_Error
    Trying Digest_Start
[I] Caught Constraint_Error
    Exception: "CONSTRAINT_ERROR"
    Message  : "cryptada-tests-unit-md_sha_256.adb:198 access check failed"
[I] Getting a message digest handle
[I] Information on handle BEFORE calling Get_Message_Digest_Handle
    Invalid Message_Digest_Handle
[I] Information on handle AFTER calling Get_Message_Digest_Handle
    Digest object tag name        : "CRYPTADA.DIGESTS.MESSAGE_DIGESTS.SHA_256.SHA_256_DIGEST"
    CryptAda digest algorithm id  : "MD_SHA_256"
    Digest algorithm SCAN name    : ""
    Digest algorithm ASN1 OID     : "2.16.840.1.101.3.4.2.1"
    Digest algorithm OpenPGP name : ""
    State size (bytes)            :  32
    Input block size (bytes)      :  64
    Hash size (bytes)             :  32
    Processed bit count           : 16#00000000000000000000000000000000#
[I] Now the handle must be invalid:
[I] Handle is valid
[I] Getting a pointer from an invalid handle will return a not null value
[I] Pointer is not null
[I] Computing a hash value may succeed
[I] Digest information AFTER Digest_Start
    Digest object tag name        : "CRYPTADA.DIGESTS.MESSAGE_DIGESTS.SHA_256.SHA_256_DIGEST"
    CryptAda digest algorithm id  : "MD_SHA_256"
    Digest algorithm SCAN name    : ""
    Digest algorithm ASN1 OID     : "2.16.840.1.101.3.4.2.1"
    Digest algorithm OpenPGP name : ""
    State size (bytes)            :  32
    Input block size (bytes)      :  64
    Hash size (bytes)             :  32
    Processed bit count           : 16#00000000000000000000000000000000#
[I] Calling Digest_Update
[I] Digesting string              : "CryptAda By TCantos Software"
[I] Digest information AFTER Digest_Update
    Digest object tag name        : "CRYPTADA.DIGESTS.MESSAGE_DIGESTS.SHA_256.SHA_256_DIGEST"
    CryptAda digest algorithm id  : "MD_SHA_256"
    Digest algorithm SCAN name    : ""
    Digest algorithm ASN1 OID     : "2.16.840.1.101.3.4.2.1"
    Digest algorithm OpenPGP name : ""
    State size (bytes)            :  32
    Input block size (bytes)      :  64
    Hash size (bytes)             :  32
    Processed bit count           : 16#000000000000000000000000000000E0#
[I] Calling Digest_End to finish processing and obtaining the computed Hash
[I] Digest information AFTER Digest_End
    Digest object tag name        : "CRYPTADA.DIGESTS.MESSAGE_DIGESTS.SHA_256.SHA_256_DIGEST"
    CryptAda digest algorithm id  : "MD_SHA_256"
    Digest algorithm SCAN name    : ""
    Digest algorithm ASN1 OID     : "2.16.840.1.101.3.4.2.1"
    Digest algorithm OpenPGP name : ""
    State size (bytes)            :  32
    Input block size (bytes)      :  64
    Hash size (bytes)             :  32
    Processed bit count           : 16#000000000000000000000000000000E0#
[I] Checking digest computation results
[I] Expected hash
    - Hash size :  32
    - Hash bytes:
16#22#, 16#3C#, 16#1B#, 16#EC#, 16#12#, 16#BC#, 16#E8#, 16#C2#, 16#43#, 16#40#, 16#E7#, 16#A1#, 16#7B#, 16#C1#, 16#DA#, 16#26#, 
16#FE#, 16#9F#, 16#B4#, 16#C1#, 16#8B#, 16#2E#, 16#EA#, 16#AA#, 16#11#, 16#B3#, 16#4E#, 16#76#, 16#FB#, 16#E9#, 16#74#, 16#40#
[I] Obtained hash
    - Hash size :  32
    - Hash bytes:
16#22#, 16#3C#, 16#1B#, 16#EC#, 16#12#, 16#BC#, 16#E8#, 16#C2#, 16#43#, 16#40#, 16#E7#, 16#A1#, 16#7B#, 16#C1#, 16#DA#, 16#26#, 
16#FE#, 16#9F#, 16#B4#, 16#C1#, 16#8B#, 16#2E#, 16#EA#, 16#AA#, 16#11#, 16#B3#, 16#4E#, 16#76#, 16#FB#, 16#E9#, 16#74#, 16#40#
[I] Results match
[I] Invalidating handle
[I] Digest information AFTER invalidating handle
    Invalid Message_Digest_Handle
[I] Handle is invalid
[I] Using a pointer from an invalid handle must result in an exception
    Trying Digest_Start
[I] Caught Constraint_Error
    Exception: "CONSTRAINT_ERROR"
    Message  : "cryptada-tests-unit-md_sha_256.adb:281 access check failed"
[I] Test case OK
--------------------------------------------------------------------------------
Test Case Number: 1
Test Case Result: PASSED
Finished        : 2017/05/22 - 18:33:01
--[End Test Case]---------------------------------------------------------------

--[Begin Test Case]-------------------------------------------------------------
Test Case Number: 2
Description     : Testing default Digest_Start
Started         : 2017/05/22 - 18:33:01
--------------------------------------------------------------------------------
[I] Subprograms tested: 
    - Digest_Start
[I] Default Digest_Start will start digest computation with default parameters
    SHA_256 is not parametrizable
[I] Digest information BEFORE Digest_Start
    Digest object tag name        : "CRYPTADA.DIGESTS.MESSAGE_DIGESTS.SHA_256.SHA_256_DIGEST"
    CryptAda digest algorithm id  : "MD_SHA_256"
    Digest algorithm SCAN name    : ""
    Digest algorithm ASN1 OID     : "2.16.840.1.101.3.4.2.1"
    Digest algorithm OpenPGP name : ""
    State size (bytes)            :  32
    Input block size (bytes)      :  64
    Hash size (bytes)             :  32
    Processed bit count           : 16#00000000000000000000000000000000#
[I] Digest information AFTER Digest_Start
    Digest object tag name        : "CRYPTADA.DIGESTS.MESSAGE_DIGESTS.SHA_256.SHA_256_DIGEST"
    CryptAda digest algorithm id  : "MD_SHA_256"
    Digest algorithm SCAN name    : ""
    Digest algorithm ASN1 OID     : "2.16.840.1.101.3.4.2.1"
    Digest algorithm OpenPGP name : ""
    State size (bytes)            :  32
    Input block size (bytes)      :  64
    Hash size (bytes)             :  32
    Processed bit count           : 16#00000000000000000000000000000000#
[I] Calling Digest_Update
[I] Digesting string              : "CryptAda By TCantos Software"
[I] Digest information AFTER Digest_Update
    Digest object tag name        : "CRYPTADA.DIGESTS.MESSAGE_DIGESTS.SHA_256.SHA_256_DIGEST"
    CryptAda digest algorithm id  : "MD_SHA_256"
    Digest algorithm SCAN name    : ""
    Digest algorithm ASN1 OID     : "2.16.840.1.101.3.4.2.1"
    Digest algorithm OpenPGP name : ""
    State size (bytes)            :  32
    Input block size (bytes)      :  64
    Hash size (bytes)             :  32
    Processed bit count           : 16#000000000000000000000000000000E0#
[I] Calling Digest_End to finish processing and obtaining the computed Hash
[I] Digest information AFTER Digest_End
    Digest object tag name        : "CRYPTADA.DIGESTS.MESSAGE_DIGESTS.SHA_256.SHA_256_DIGEST"
    CryptAda digest algorithm id  : "MD_SHA_256"
    Digest algorithm SCAN name    : ""
    Digest algorithm ASN1 OID     : "2.16.840.1.101.3.4.2.1"
    Digest algorithm OpenPGP name : ""
    State size (bytes)            :  32
    Input block size (bytes)      :  64
    Hash size (bytes)             :  32
    Processed bit count           : 16#000000000000000000000000000000E0#
[I] AFTER Digest_End, bit counter is not set to 0
[I] Checking digest computation results
[I] Expected hash
    - Hash size :  32
    - Hash bytes:
16#22#, 16#3C#, 16#1B#, 16#EC#, 16#12#, 16#BC#, 16#E8#, 16#C2#, 16#43#, 16#40#, 16#E7#, 16#A1#, 16#7B#, 16#C1#, 16#DA#, 16#26#, 
16#FE#, 16#9F#, 16#B4#, 16#C1#, 16#8B#, 16#2E#, 16#EA#, 16#AA#, 16#11#, 16#B3#, 16#4E#, 16#76#, 16#FB#, 16#E9#, 16#74#, 16#40#
[I] Obtained hash
    - Hash size :  32
    - Hash bytes:
16#22#, 16#3C#, 16#1B#, 16#EC#, 16#12#, 16#BC#, 16#E8#, 16#C2#, 16#43#, 16#40#, 16#E7#, 16#A1#, 16#7B#, 16#C1#, 16#DA#, 16#26#, 
16#FE#, 16#9F#, 16#B4#, 16#C1#, 16#8B#, 16#2E#, 16#EA#, 16#AA#, 16#11#, 16#B3#, 16#4E#, 16#76#, 16#FB#, 16#E9#, 16#74#, 16#40#
[I] Results match
[I] Digest_Start resets bit counter to 0
[I] Digest information BEFORE Digest_Start
    Digest object tag name        : "CRYPTADA.DIGESTS.MESSAGE_DIGESTS.SHA_256.SHA_256_DIGEST"
    CryptAda digest algorithm id  : "MD_SHA_256"
    Digest algorithm SCAN name    : ""
    Digest algorithm ASN1 OID     : "2.16.840.1.101.3.4.2.1"
    Digest algorithm OpenPGP name : ""
    State size (bytes)            :  32
    Input block size (bytes)      :  64
    Hash size (bytes)             :  32
    Processed bit count           : 16#000000000000000000000000000000E0#
[I] Digest information AFTER Digest_Start
    Digest object tag name        : "CRYPTADA.DIGESTS.MESSAGE_DIGESTS.SHA_256.SHA_256_DIGEST"
    CryptAda digest algorithm id  : "MD_SHA_256"
    Digest algorithm SCAN name    : ""
    Digest algorithm ASN1 OID     : "2.16.840.1.101.3.4.2.1"
    Digest algorithm OpenPGP name : ""
    State size (bytes)            :  32
    Input block size (bytes)      :  64
    Hash size (bytes)             :  32
    Processed bit count           : 16#00000000000000000000000000000000#
[I] Test case OK
--------------------------------------------------------------------------------
Test Case Number: 2
Test Case Result: PASSED
Finished        : 2017/05/22 - 18:33:01
--[End Test Case]---------------------------------------------------------------

--[Begin Test Case]-------------------------------------------------------------
Test Case Number: 3
Description     : Testing parametrized Digest_Start
Started         : 2017/05/22 - 18:33:01
--------------------------------------------------------------------------------
[I] Subprograms tested: 
    - Digest_Start(Parameter_List)
[I] SHA_256 does not accept any parameter. So any valid Parameter list is ignored
[I] Trying Digest_Start with an empty list: ()
[I] Digest information AFTER Digest_Start
    Digest object tag name        : "CRYPTADA.DIGESTS.MESSAGE_DIGESTS.SHA_256.SHA_256_DIGEST"
    CryptAda digest algorithm id  : "MD_SHA_256"
    Digest algorithm SCAN name    : ""
    Digest algorithm ASN1 OID     : "2.16.840.1.101.3.4.2.1"
    Digest algorithm OpenPGP name : ""
    State size (bytes)            :  32
    Input block size (bytes)      :  64
    Hash size (bytes)             :  32
    Processed bit count           : 16#00000000000000000000000000000000#
[I] Trying Digest_Start with the list: (Hello,World)
[I] Digest information AFTER Digest_Start
    Digest object tag name        : "CRYPTADA.DIGESTS.MESSAGE_DIGESTS.SHA_256.SHA_256_DIGEST"
    CryptAda digest algorithm id  : "MD_SHA_256"
    Digest algorithm SCAN name    : ""
    Digest algorithm ASN1 OID     : "2.16.840.1.101.3.4.2.1"
    Digest algorithm OpenPGP name : ""
    State size (bytes)            :  32
    Input block size (bytes)      :  64
    Hash size (bytes)             :  32
    Processed bit count           : 16#00000000000000000000000000000000#
[I] Test case OK
--------------------------------------------------------------------------------
Test Case Number: 3
Test Case Result: PASSED
Finished        : 2017/05/22 - 18:33:01
--[End Test Case]---------------------------------------------------------------

--[Begin Test Case]-------------------------------------------------------------
Test Case Number: 4
Description     : Standard SHA-1 test vectors
Started         : 2017/05/22 - 18:33:01
--------------------------------------------------------------------------------
[I] Standard test vectors obtained from http://www.di-mgt.com.au/sha_testvectors.html
    Number of vectors to test:  4
[I] Computing hash for a test vector:
    Hash algorithm                : MD_SHA_256
    Vector string                 : ""
    Vector length                 :  0
    Vector array                  : 

[I] Digest results
    Expected bit count            : 16#00000000000000000000000000000000#
    Obtained bit count            : 16#00000000000000000000000000000000#
    Expected hash (String)        : "E3B0C44298FC1C149AFBF4C8996FB92427AE41E4649B934CA495991B7852B855"
    Obtained hash (String)        : "E3B0C44298FC1C149AFBF4C8996FB92427AE41E4649B934CA495991B7852B855"
[I] Counters match
[I] Hashes match
[I] Vector  1 test passed.
[I] Computing hash for a test vector:
    Hash algorithm                : MD_SHA_256
    Vector string                 : "abc"
    Vector length                 :  3
    Vector array                  : 
16#61#, 16#62#, 16#63#
[I] Digest results
    Expected bit count            : 16#00000000000000000000000000000018#
    Obtained bit count            : 16#00000000000000000000000000000018#
    Expected hash (String)        : "BA7816BF8F01CFEA414140DE5DAE2223B00361A396177A9CB410FF61F20015AD"
    Obtained hash (String)        : "BA7816BF8F01CFEA414140DE5DAE2223B00361A396177A9CB410FF61F20015AD"
[I] Counters match
[I] Hashes match
[I] Vector  2 test passed.
[I] Computing hash for a test vector:
    Hash algorithm                : MD_SHA_256
    Vector string                 : "abcdbcdecdefdefgefghfghighijhijkijkljklmklmnlmnomnopnopq"
    Vector length                 :  56
    Vector array                  : 
16#61#, 16#62#, 16#63#, 16#64#, 16#62#, 16#63#, 16#64#, 16#65#, 16#63#, 16#64#, 
16#65#, 16#66#, 16#64#, 16#65#, 16#66#, 16#67#, 16#65#, 16#66#, 16#67#, 16#68#, 
16#66#, 16#67#, 16#68#, 16#69#, 16#67#, 16#68#, 16#69#, 16#6A#, 16#68#, 16#69#, 
16#6A#, 16#6B#, 16#69#, 16#6A#, 16#6B#, 16#6C#, 16#6A#, 16#6B#, 16#6C#, 16#6D#, 
16#6B#, 16#6C#, 16#6D#, 16#6E#, 16#6C#, 16#6D#, 16#6E#, 16#6F#, 16#6D#, 16#6E#, 
16#6F#, 16#70#, 16#6E#, 16#6F#, 16#70#, 16#71#
[I] Digest results
    Expected bit count            : 16#000000000000000000000000000001C0#
    Obtained bit count            : 16#000000000000000000000000000001C0#
    Expected hash (String)        : "248D6A61D20638B8E5C026930C3E6039A33CE45964FF2167F6ECEDD419DB06C1"
    Obtained hash (String)        : "248D6A61D20638B8E5C026930C3E6039A33CE45964FF2167F6ECEDD419DB06C1"
[I] Counters match
[I] Hashes match
[I] Vector  3 test passed.
[I] Computing hash for a test vector:
    Hash algorithm                : MD_SHA_256
    Vector string                 : "abcdefghbcdefghicdefghijdefghijkefghijklfghijklmghijklmnhijklmnoijklmnopjklmnopqklmnopqrlmnopqrsmnopqrstnopqrstu"
    Vector length                 :  112
    Vector array                  : 
16#61#, 16#62#, 16#63#, 16#64#, 16#65#, 16#66#, 16#67#, 16#68#, 16#62#, 16#63#, 
16#64#, 16#65#, 16#66#, 16#67#, 16#68#, 16#69#, 16#63#, 16#64#, 16#65#, 16#66#, 
16#67#, 16#68#, 16#69#, 16#6A#, 16#64#, 16#65#, 16#66#, 16#67#, 16#68#, 16#69#, 
16#6A#, 16#6B#, 16#65#, 16#66#, 16#67#, 16#68#, 16#69#, 16#6A#, 16#6B#, 16#6C#, 
16#66#, 16#67#, 16#68#, 16#69#, 16#6A#, 16#6B#, 16#6C#, 16#6D#, 16#67#, 16#68#, 
16#69#, 16#6A#, 16#6B#, 16#6C#, 16#6D#, 16#6E#, 16#68#, 16#69#, 16#6A#, 16#6B#, 
16#6C#, 16#6D#, 16#6E#, 16#6F#, 16#69#, 16#6A#, 16#6B#, 16#6C#, 16#6D#, 16#6E#, 
16#6F#, 16#70#, 16#6A#, 16#6B#, 16#6C#, 16#6D#, 16#6E#, 16#6F#, 16#70#, 16#71#, 
16#6B#, 16#6C#, 16#6D#, 16#6E#, 16#6F#, 16#70#, 16#71#, 16#72#, 16#6C#, 16#6D#, 
16#6E#, 16#6F#, 16#70#, 16#71#, 16#72#, 16#73#, 16#6D#, 16#6E#, 16#6F#, 16#70#, 
16#71#, 16#72#, 16#73#, 16#74#, 16#6E#, 16#6F#, 16#70#, 16#71#, 16#72#, 16#73#, 
16#74#, 16#75#
[I] Digest results
    Expected bit count            : 16#00000000000000000000000000000380#
    Obtained bit count            : 16#00000000000000000000000000000380#
    Expected hash (String)        : "CF5B16A778AF8380036CE59E7B0492370B249B11E8F07A51AFAC45037AFEE9D1"
    Obtained hash (String)        : "CF5B16A778AF8380036CE59E7B0492370B249B11E8F07A51AFAC45037AFEE9D1"
[I] Counters match
[I] Hashes match
[I] Vector  4 test passed.
[I] Test case OK
--------------------------------------------------------------------------------
Test Case Number: 4
Test Case Result: PASSED
Finished        : 2017/05/22 - 18:33:01
--[End Test Case]---------------------------------------------------------------

--[Begin Test Case]-------------------------------------------------------------
Test Case Number: 5
Description     : CryptAda SHA-1 test vectors
Started         : 2017/05/22 - 18:33:01
--------------------------------------------------------------------------------
[I] Obtained hashes are checked against values obtained by using several online tools
    Number of vectors to test:  9
[I] Computing hash for an CryptAda standard test vector.
    Hash algorithm                : MD_SHA_256
    Test vector index             :  1
    Vector string                 : ""
    Vector length                 :  0
    Vector array                  : 

[I] Digest results for vector     :  1
    Expected bit count            : 16#00000000000000000000000000000000#
    Obtained bit count            : 16#00000000000000000000000000000000#
    Expected hash (String)        : "E3B0C44298FC1C149AFBF4C8996FB92427AE41E4649B934CA495991B7852B855"
    Obtained hash (String)        : "E3B0C44298FC1C149AFBF4C8996FB92427AE41E4649B934CA495991B7852B855"
[I] Counters match
[I] Hashes match
[I] Vector  1 test passed.
[I] Computing hash for an CryptAda standard test vector.
    Hash algorithm                : MD_SHA_256
    Test vector index             :  2
    Vector string                 : "a"
    Vector length                 :  1
    Vector array                  : 
16#61#
[I] Digest results for vector     :  2
    Expected bit count            : 16#00000000000000000000000000000008#
    Obtained bit count            : 16#00000000000000000000000000000008#
    Expected hash (String)        : "CA978112CA1BBDCAFAC231B39A23DC4DA786EFF8147C4E72B9807785AFEE48BB"
    Obtained hash (String)        : "CA978112CA1BBDCAFAC231B39A23DC4DA786EFF8147C4E72B9807785AFEE48BB"
[I] Counters match
[I] Hashes match
[I] Vector  2 test passed.
[I] Computing hash for an CryptAda standard test vector.
    Hash algorithm                : MD_SHA_256
    Test vector index             :  3
    Vector string                 : "abc"
    Vector length                 :  3
    Vector array                  : 
16#61#, 16#62#, 16#63#
[I] Digest results for vector     :  3
    Expected bit count            : 16#00000000000000000000000000000018#
    Obtained bit count            : 16#00000000000000000000000000000018#
    Expected hash (String)        : "BA7816BF8F01CFEA414140DE5DAE2223B00361A396177A9CB410FF61F20015AD"
    Obtained hash (String)        : "BA7816BF8F01CFEA414140DE5DAE2223B00361A396177A9CB410FF61F20015AD"
[I] Counters match
[I] Hashes match
[I] Vector  3 test passed.
[I] Computing hash for an CryptAda standard test vector.
    Hash algorithm                : MD_SHA_256
    Test vector index             :  4
    Vector string                 : "message digest"
    Vector length                 :  14
    Vector array                  : 
16#6D#, 16#65#, 16#73#, 16#73#, 16#61#, 16#67#, 16#65#, 16#20#, 16#64#, 16#69#, 
16#67#, 16#65#, 16#73#, 16#74#
[I] Digest results for vector     :  4
    Expected bit count            : 16#00000000000000000000000000000070#
    Obtained bit count            : 16#00000000000000000000000000000070#
    Expected hash (String)        : "F7846F55CF23E14EEBEAB5B4E1550CAD5B509E3348FBC4EFA3A1413D393CB650"
    Obtained hash (String)        : "F7846F55CF23E14EEBEAB5B4E1550CAD5B509E3348FBC4EFA3A1413D393CB650"
[I] Counters match
[I] Hashes match
[I] Vector  4 test passed.
[I] Computing hash for an CryptAda standard test vector.
    Hash algorithm                : MD_SHA_256
    Test vector index             :  5
    Vector string                 : "abcdefghijklmnopqrstuvwxyz"
    Vector length                 :  26
    Vector array                  : 
16#61#, 16#62#, 16#63#, 16#64#, 16#65#, 16#66#, 16#67#, 16#68#, 16#69#, 16#6A#, 
16#6B#, 16#6C#, 16#6D#, 16#6E#, 16#6F#, 16#70#, 16#71#, 16#72#, 16#73#, 16#74#, 
16#75#, 16#76#, 16#77#, 16#78#, 16#79#, 16#7A#
[I] Digest results for vector     :  5
    Expected bit count            : 16#000000000000000000000000000000D0#
    Obtained bit count            : 16#000000000000000000000000000000D0#
    Expected hash (String)        : "71C480DF93D6AE2F1EFAD1447C66C9525E316218CF51FC8D9ED832F2DAF18B73"
    Obtained hash (String)        : "71C480DF93D6AE2F1EFAD1447C66C9525E316218CF51FC8D9ED832F2DAF18B73"
[I] Counters match
[I] Hashes match
[I] Vector  5 test passed.
[I] Computing hash for an CryptAda standard test vector.
    Hash algorithm                : MD_SHA_256
    Test vector index             :  6
    Vector string                 : "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789"
    Vector length                 :  62
    Vector array                  : 
16#41#, 16#42#, 16#43#, 16#44#, 16#45#, 16#46#, 16#47#, 16#48#, 16#49#, 16#4A#, 
16#4B#, 16#4C#, 16#4D#, 16#4E#, 16#4F#, 16#50#, 16#51#, 16#52#, 16#53#, 16#54#, 
16#55#, 16#56#, 16#57#, 16#58#, 16#59#, 16#5A#, 16#61#, 16#62#, 16#63#, 16#64#, 
16#65#, 16#66#, 16#67#, 16#68#, 16#69#, 16#6A#, 16#6B#, 16#6C#, 16#6D#, 16#6E#, 
16#6F#, 16#70#, 16#71#, 16#72#, 16#73#, 16#74#, 16#75#, 16#76#, 16#77#, 16#78#, 
16#79#, 16#7A#, 16#30#, 16#31#, 16#32#, 16#33#, 16#34#, 16#35#, 16#36#, 16#37#, 
16#38#, 16#39#
[I] Digest results for vector     :  6
    Expected bit count            : 16#000000000000000000000000000001F0#
    Obtained bit count            : 16#000000000000000000000000000001F0#
    Expected hash (String)        : "DB4BFCBD4DA0CD85A60C3C37D3FBD8805C77F15FC6B1FDFE614EE0A7C8FDB4C0"
    Obtained hash (String)        : "DB4BFCBD4DA0CD85A60C3C37D3FBD8805C77F15FC6B1FDFE614EE0A7C8FDB4C0"
[I] Counters match
[I] Hashes match
[I] Vector  6 test passed.
[I] Computing hash for an CryptAda standard test vector.
    Hash algorithm                : MD_SHA_256
    Test vector index             :  7
    Vector string                 : "12345678901234567890123456789012345678901234567890123456789012345678901234567890"
    Vector length                 :  80
    Vector array                  : 
16#31#, 16#32#, 16#33#, 16#34#, 16#35#, 16#36#, 16#37#, 16#38#, 16#39#, 16#30#, 
16#31#, 16#32#, 16#33#, 16#34#, 16#35#, 16#36#, 16#37#, 16#38#, 16#39#, 16#30#, 
16#31#, 16#32#, 16#33#, 16#34#, 16#35#, 16#36#, 16#37#, 16#38#, 16#39#, 16#30#, 
16#31#, 16#32#, 16#33#, 16#34#, 16#35#, 16#36#, 16#37#, 16#38#, 16#39#, 16#30#, 
16#31#, 16#32#, 16#33#, 16#34#, 16#35#, 16#36#, 16#37#, 16#38#, 16#39#, 16#30#, 
16#31#, 16#32#, 16#33#, 16#34#, 16#35#, 16#36#, 16#37#, 16#38#, 16#39#, 16#30#, 
16#31#, 16#32#, 16#33#, 16#34#, 16#35#, 16#36#, 16#37#, 16#38#, 16#39#, 16#30#, 
16#31#, 16#32#, 16#33#, 16#34#, 16#35#, 16#36#, 16#37#, 16#38#, 16#39#, 16#30#
[I] Digest results for vector     :  7
    Expected bit count            : 16#00000000000000000000000000000280#
    Obtained bit count            : 16#00000000000000000000000000000280#
    Expected hash (String)        : "F371BC4A311F2B009EEF952DD83CA80E2B60026C8E935592D0F9C308453C813E"
    Obtained hash (String)        : "F371BC4A311F2B009EEF952DD83CA80E2B60026C8E935592D0F9C308453C813E"
[I] Counters match
[I] Hashes match
[I] Vector  7 test passed.
[I] Computing hash for an CryptAda standard test vector.
    Hash algorithm                : MD_SHA_256
    Test vector index             :  8
    Vector string                 : "The quick brown fox jumps over the lazy dog"
    Vector length                 :  43
    Vector array                  : 
16#54#, 16#68#, 16#65#, 16#20#, 16#71#, 16#75#, 16#69#, 16#63#, 16#6B#, 16#20#, 
16#62#, 16#72#, 16#6F#, 16#77#, 16#6E#, 16#20#, 16#66#, 16#6F#, 16#78#, 16#20#, 
16#6A#, 16#75#, 16#6D#, 16#70#, 16#73#, 16#20#, 16#6F#, 16#76#, 16#65#, 16#72#, 
16#20#, 16#74#, 16#68#, 16#65#, 16#20#, 16#6C#, 16#61#, 16#7A#, 16#79#, 16#20#, 
16#64#, 16#6F#, 16#67#
[I] Digest results for vector     :  8
    Expected bit count            : 16#00000000000000000000000000000158#
    Obtained bit count            : 16#00000000000000000000000000000158#
    Expected hash (String)        : "D7A8FBB307D7809469CA9ABCB0082E4F8D5651E46D3CDB762D02D0BF37C9E592"
    Obtained hash (String)        : "D7A8FBB307D7809469CA9ABCB0082E4F8D5651E46D3CDB762D02D0BF37C9E592"
[I] Counters match
[I] Hashes match
[I] Vector  8 test passed.
[I] Computing hash for an CryptAda standard test vector.
    Hash algorithm                : MD_SHA_256
    Test vector index             :  9
    Vector string                 : "CryptAda By TCantos Software"
    Vector length                 :  28
    Vector array                  : 
16#43#, 16#72#, 16#79#, 16#70#, 16#74#, 16#41#, 16#64#, 16#61#, 16#20#, 16#42#, 
16#79#, 16#20#, 16#54#, 16#43#, 16#61#, 16#6E#, 16#74#, 16#6F#, 16#73#, 16#20#, 
16#53#, 16#6F#, 16#66#, 16#74#, 16#77#, 16#61#, 16#72#, 16#65#
[I] Digest results for vector     :  9
    Expected bit count            : 16#000000000000000000000000000000E0#
    Obtained bit count            : 16#000000000000000000000000000000E0#
    Expected hash (String)        : "223C1BEC12BCE8C24340E7A17BC1DA26FE9FB4C18B2EEAAA11B34E76FBE97440"
    Obtained hash (String)        : "223C1BEC12BCE8C24340E7A17BC1DA26FE9FB4C18B2EEAAA11B34E76FBE97440"
[I] Counters match
[I] Hashes match
[I] Vector  9 test passed.
[I] Test case OK
--------------------------------------------------------------------------------
Test Case Number: 5
Test Case Result: PASSED
Finished        : 2017/05/22 - 18:33:01
--[End Test Case]---------------------------------------------------------------

--[Begin Test Case]-------------------------------------------------------------
Test Case Number: 6
Description     : Testing SHA-1 operation at counter offset and block boundary.
Started         : 2017/05/22 - 18:33:01
--------------------------------------------------------------------------------
[I] Obtained hashes are checked against values obtained by using several online tools
[I] Checking at counter offset boundary.
    Number of vectors to test:  3
[I] Vector   :  1
Vector length:  55
[I] Digest result for test vector:  1
    Expected bit count            : 16#000000000000000000000000000001B8#
    Obtained bit count            : 16#000000000000000000000000000001B8#
    Expected hash (String)        : "9F4390F8D30C2DD92EC9F095B65E2B9AE9B0A925A5258E241C9F1E910F734318"
    Obtained hash (String)        : "9F4390F8D30C2DD92EC9F095B65E2B9AE9B0A925A5258E241C9F1E910F734318"
[I] Counters match
[I] Hashes match
[I] Vector  1 results match
[I] Vector   :  2
Vector length:  56
[I] Digest result for test vector:  2
    Expected bit count            : 16#000000000000000000000000000001C0#
    Obtained bit count            : 16#000000000000000000000000000001C0#
    Expected hash (String)        : "B35439A4AC6F0948B6D6F9E3C6AF0F5F590CE20F1BDE7090EF7970686EC6738A"
    Obtained hash (String)        : "B35439A4AC6F0948B6D6F9E3C6AF0F5F590CE20F1BDE7090EF7970686EC6738A"
[I] Counters match
[I] Hashes match
[I] Vector  2 results match
[I] Vector   :  3
Vector length:  57
[I] Digest result for test vector:  3
    Expected bit count            : 16#000000000000000000000000000001C8#
    Obtained bit count            : 16#000000000000000000000000000001C8#
    Expected hash (String)        : "F13B2D724659EB3BF47F2DD6AF1ACCC87B81F09F59F2B75E5C0BED6589DFE8C6"
    Obtained hash (String)        : "F13B2D724659EB3BF47F2DD6AF1ACCC87B81F09F59F2B75E5C0BED6589DFE8C6"
[I] Counters match
[I] Hashes match
[I] Vector  3 results match
[I] Checking at block boundary.
    Number of vectors to test:  3
[I] Vector   :  1
Vector length:  63
[I] Digest result for test vector:  1
    Expected bit count            : 16#000000000000000000000000000001F8#
    Obtained bit count            : 16#000000000000000000000000000001F8#
    Expected hash (String)        : "7D3E74A05D7DB15BCE4AD9EC0658EA98E3F06EEECF16B4C6FFF2DA457DDC2F34"
    Obtained hash (String)        : "7D3E74A05D7DB15BCE4AD9EC0658EA98E3F06EEECF16B4C6FFF2DA457DDC2F34"
[I] Counters match
[I] Hashes match
[I] Vector  1 results match
[I] Vector   :  2
Vector length:  64
[I] Digest result for test vector:  2
    Expected bit count            : 16#00000000000000000000000000000200#
    Obtained bit count            : 16#00000000000000000000000000000200#
    Expected hash (String)        : "FFE054FE7AE0CB6DC65C3AF9B61D5209F439851DB43D0BA5997337DF154668EB"
    Obtained hash (String)        : "FFE054FE7AE0CB6DC65C3AF9B61D5209F439851DB43D0BA5997337DF154668EB"
[I] Counters match
[I] Hashes match
[I] Vector  2 results match
[I] Vector   :  3
Vector length:  65
[I] Digest result for test vector:  3
    Expected bit count            : 16#00000000000000000000000000000208#
    Obtained bit count            : 16#00000000000000000000000000000208#
    Expected hash (String)        : "635361C48BB9EAB14198E76EA8AB7F1A41685D6AD62AA9146D301D4F17EB0AE0"
    Obtained hash (String)        : "635361C48BB9EAB14198E76EA8AB7F1A41685D6AD62AA9146D301D4F17EB0AE0"
[I] Counters match
[I] Hashes match
[I] Vector  3 results match
[I] Test case OK
--------------------------------------------------------------------------------
Test Case Number: 6
Test Case Result: PASSED
Finished        : 2017/05/22 - 18:33:01
--[End Test Case]---------------------------------------------------------------

--[Begin Test Case]-------------------------------------------------------------
Test Case Number: 7
Description     : Another standard SHA-1 test vector: 1,000,000 repetitions of 'a'
Started         : 2017/05/22 - 18:33:01
--------------------------------------------------------------------------------
[I] Performng 1,000 iteratios with a 1,000 bytes buffer
    Expected bit count (Low, High): ( 8000000,  0)
    Expected hash                 : "CDC76E5C9914FB9281A1C7E284D73E67F1809A48A497200E046D39CCC7112CD0"
    Obtained bit count (Low, High): ( 8000000,  0)
    Obtained hash                 : "CDC76E5C9914FB9281A1C7E284D73E67F1809A48A497200E046D39CCC7112CD0"
[I] Counters match
[I] Hashes match
[I] Test case OK
--------------------------------------------------------------------------------
Test Case Number: 7
Test Case Result: PASSED
Finished        : 2017/05/22 - 18:33:01
--[End Test Case]---------------------------------------------------------------

================================================================================
CryptAda Test Driver End
CryptAda Test Driver Name: CryptAda.Tests.Unit.MD_SHA_256
Finished                 : 2017/05/22 - 18:33:01
================================================================================
